# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/aws-beam/aws-codegen for more details.

defmodule AWS.EC2 do
  @moduledoc """
  Amazon Elastic Compute Cloud
  """

  alias AWS.Client
  alias AWS.Request

  @typedoc """

  ## Example:
      
      describe_traffic_mirror_targets_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TrafficMirrorTargetIds") => list(String.t()())
      }
      
  """
  @type describe_traffic_mirror_targets_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_pool_allocation() :: %{
        "Cidr" => String.t(),
        "Description" => String.t(),
        "IpamPoolAllocationId" => String.t(),
        "ResourceId" => String.t(),
        "ResourceOwner" => String.t(),
        "ResourceRegion" => String.t(),
        "ResourceType" => list(any())
      }
      
  """
  @type ipam_pool_allocation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_connects_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayAttachmentIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_connects_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_peering_attachments_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayPeeringAttachments" => list(transit_gateway_peering_attachment()())
      }
      
  """
  @type describe_transit_gateway_peering_attachments_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_prefix_list_reference_request() :: %{
        optional("Blackhole") => boolean(),
        optional("DryRun") => boolean(),
        optional("TransitGatewayAttachmentId") => String.t(),
        required("PrefixListId") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type create_transit_gateway_prefix_list_reference_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      stale_ip_permission() :: %{
        "FromPort" => integer(),
        "IpProtocol" => String.t(),
        "IpRanges" => list(String.t()()),
        "PrefixListIds" => list(String.t()()),
        "ToPort" => integer(),
        "UserIdGroupPairs" => list(user_id_group_pair()())
      }
      
  """
  @type stale_ip_permission() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      address_transfer() :: %{
        "AddressTransferStatus" => list(any()),
        "AllocationId" => String.t(),
        "PublicIp" => String.t(),
        "TransferAccountId" => String.t(),
        "TransferOfferAcceptedTimestamp" => non_neg_integer(),
        "TransferOfferExpirationTimestamp" => non_neg_integer()
      }
      
  """
  @type address_transfer() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_verified_access_endpoint_policy_result() :: %{
        "PolicyDocument" => String.t(),
        "PolicyEnabled" => boolean()
      }
      
  """
  @type get_verified_access_endpoint_policy_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_host_reservation_request() :: %{
        optional("ClientToken") => String.t(),
        optional("CurrencyCode") => list(any()),
        optional("LimitPrice") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("HostIdSet") => list(String.t()()),
        required("OfferingId") => String.t()
      }
      
  """
  @type purchase_host_reservation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_result() :: %{
        "Ipam" => ipam()
      }
      
  """
  @type create_ipam_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_transit_gateway_multicast_group_members_request() :: %{
        optional("DryRun") => boolean(),
        optional("GroupIpAddress") => String.t(),
        required("NetworkInterfaceIds") => list(String.t()()),
        required("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type register_transit_gateway_multicast_group_members_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      memory_mi_b() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type memory_mi_b() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_requirements_request() :: %{
        "AcceleratorCount" => accelerator_count_request(),
        "AcceleratorManufacturers" => list(list(any())()),
        "AcceleratorNames" => list(list(any())()),
        "AcceleratorTotalMemoryMiB" => accelerator_total_memory_mi_b_request(),
        "AcceleratorTypes" => list(list(any())()),
        "AllowedInstanceTypes" => list(String.t()()),
        "BareMetal" => list(any()),
        "BaselineEbsBandwidthMbps" => baseline_ebs_bandwidth_mbps_request(),
        "BurstablePerformance" => list(any()),
        "CpuManufacturers" => list(list(any())()),
        "ExcludedInstanceTypes" => list(String.t()()),
        "InstanceGenerations" => list(list(any())()),
        "LocalStorage" => list(any()),
        "LocalStorageTypes" => list(list(any())()),
        "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice" => integer(),
        "MemoryGiBPerVCpu" => memory_gi_b_per_v_cpu_request(),
        "MemoryMiB" => memory_mi_b_request(),
        "NetworkBandwidthGbps" => network_bandwidth_gbps_request(),
        "NetworkInterfaceCount" => network_interface_count_request(),
        "OnDemandMaxPricePercentageOverLowestPrice" => integer(),
        "RequireHibernateSupport" => boolean(),
        "SpotMaxPricePercentageOverLowestPrice" => integer(),
        "TotalLocalStorageGB" => total_local_storage_g_b_request(),
        "VCpuCount" => v_cpu_count_range_request()
      }
      
  """
  @type instance_requirements_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_insights_access_scopes_result() :: %{
        "NetworkInsightsAccessScopes" => list(network_insights_access_scope()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_network_insights_access_scopes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ena_srd_specification() :: %{
        "EnaSrdEnabled" => boolean(),
        "EnaSrdUdpSpecification" => ena_srd_udp_specification()
      }
      
  """
  @type ena_srd_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_image_block_public_access_result() :: %{
        "ImageBlockPublicAccessState" => list(any())
      }
      
  """
  @type enable_image_block_public_access_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_vpc_attachment_result() :: %{
        "TransitGatewayVpcAttachment" => transit_gateway_vpc_attachment()
      }
      
  """
  @type create_transit_gateway_vpc_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      assign_private_ip_addresses_result() :: %{
        "AssignedIpv4Prefixes" => list(ipv4_prefix_specification()()),
        "AssignedPrivateIpAddresses" => list(assigned_private_ip_address()()),
        "NetworkInterfaceId" => String.t()
      }
      
  """
  @type assign_private_ip_addresses_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_console_screenshot_request() :: %{
        optional("DryRun") => boolean(),
        optional("WakeUp") => boolean(),
        required("InstanceId") => String.t()
      }
      
  """
  @type get_console_screenshot_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      inference_accelerator_info() :: %{
        "Accelerators" => list(inference_device_info()()),
        "TotalInferenceMemoryInMiB" => integer()
      }
      
  """
  @type inference_accelerator_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_trunk_interface_result() :: %{
        "ClientToken" => String.t(),
        "InterfaceAssociation" => trunk_interface_association()
      }
      
  """
  @type associate_trunk_interface_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_instance_export_task_result() :: %{
        "ExportTask" => export_task()
      }
      
  """
  @type create_instance_export_task_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_request() :: %{
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("Options") => transit_gateway_request_options(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_transit_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_acl_entry() :: %{
        "CidrBlock" => String.t(),
        "Egress" => boolean(),
        "IcmpTypeCode" => icmp_type_code(),
        "Ipv6CidrBlock" => String.t(),
        "PortRange" => port_range(),
        "Protocol" => String.t(),
        "RuleAction" => list(any()),
        "RuleNumber" => integer()
      }
      
  """
  @type network_acl_entry() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface_attachment_changes() :: %{
        "AttachmentId" => String.t(),
        "DeleteOnTermination" => boolean()
      }
      
  """
  @type network_interface_attachment_changes() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_and_overrides_response() :: %{
        "LaunchTemplateSpecification" => fleet_launch_template_specification(),
        "Overrides" => fleet_launch_template_overrides()
      }
      
  """
  @type launch_template_and_overrides_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase2_integrity_algorithms_request_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type phase2_integrity_algorithms_request_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_gateway() :: %{
        "AmazonSideAsn" => float(),
        "AvailabilityZone" => String.t(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "Type" => list(any()),
        "VpcAttachments" => list(vpc_attachment()()),
        "VpnGatewayId" => String.t()
      }
      
  """
  @type vpn_gateway() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_flow_logs_integration_template_request() :: %{
        optional("DryRun") => boolean(),
        required("ConfigDeliveryS3DestinationArn") => String.t(),
        required("FlowLogId") => String.t(),
        required("IntegrateServices") => integrate_services()
      }
      
  """
  @type get_flow_logs_integration_template_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_connect_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("Options") => create_transit_gateway_connect_request_options(),
        required("TransportTransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type create_transit_gateway_connect_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ena_srd_specification_request() :: %{
        "EnaSrdEnabled" => boolean(),
        "EnaSrdUdpSpecification" => ena_srd_udp_specification_request()
      }
      
  """
  @type ena_srd_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_route() :: %{
        "ClientVpnEndpointId" => String.t(),
        "Description" => String.t(),
        "DestinationCidr" => String.t(),
        "Origin" => String.t(),
        "Status" => client_vpn_route_status(),
        "TargetSubnet" => String.t(),
        "Type" => String.t()
      }
      
  """
  @type client_vpn_route() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      byoip_cidr() :: %{
        "AsnAssociations" => list(asn_association()()),
        "Cidr" => String.t(),
        "Description" => String.t(),
        "NetworkBorderGroup" => String.t(),
        "State" => list(any()),
        "StatusMessage" => String.t()
      }
      
  """
  @type byoip_cidr() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_availability_zones_result() :: %{
        "AvailabilityZones" => list(availability_zone()())
      }
      
  """
  @type describe_availability_zones_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_resource_discoveries_result() :: %{
        "IpamResourceDiscoveries" => list(ipam_resource_discovery()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_ipam_resource_discoveries_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      update_security_group_rule_descriptions_egress_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type update_security_group_rule_descriptions_egress_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_reserved_instances_listings_request() :: %{
        optional("Filters") => list(filter()()),
        optional("ReservedInstancesId") => String.t(),
        optional("ReservedInstancesListingId") => String.t()
      }
      
  """
  @type describe_reserved_instances_listings_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_static_route() :: %{
        "DestinationCidrBlock" => String.t(),
        "Source" => list(any()),
        "State" => list(any())
      }
      
  """
  @type vpn_static_route() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_prefix_list_attachment() :: %{
        "ResourceId" => String.t(),
        "ResourceType" => list(any()),
        "TransitGatewayAttachmentId" => String.t()
      }
      
  """
  @type transit_gateway_prefix_list_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instance_recurrence() :: %{
        "Frequency" => String.t(),
        "Interval" => integer(),
        "OccurrenceDaySet" => list(integer()()),
        "OccurrenceRelativeToEnd" => boolean(),
        "OccurrenceUnit" => String.t()
      }
      
  """
  @type scheduled_instance_recurrence() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_attachments_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayAttachmentIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_attachments_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_snapshot_tier_status_result() :: %{
        "NextToken" => String.t(),
        "SnapshotTierStatuses" => list(snapshot_tier_status()())
      }
      
  """
  @type describe_snapshot_tier_status_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_tunnel_options_specification() :: %{
        "DPDTimeoutAction" => String.t(),
        "DPDTimeoutSeconds" => integer(),
        "EnableTunnelLifecycleControl" => boolean(),
        "IKEVersions" => list(i_k_e_versions_request_list_value()()),
        "LogOptions" => vpn_tunnel_log_options_specification(),
        "Phase1DHGroupNumbers" => list(phase1_d_h_group_numbers_request_list_value()()),
        "Phase1EncryptionAlgorithms" => list(phase1_encryption_algorithms_request_list_value()()),
        "Phase1IntegrityAlgorithms" => list(phase1_integrity_algorithms_request_list_value()()),
        "Phase1LifetimeSeconds" => integer(),
        "Phase2DHGroupNumbers" => list(phase2_d_h_group_numbers_request_list_value()()),
        "Phase2EncryptionAlgorithms" => list(phase2_encryption_algorithms_request_list_value()()),
        "Phase2IntegrityAlgorithms" => list(phase2_integrity_algorithms_request_list_value()()),
        "Phase2LifetimeSeconds" => integer(),
        "PreSharedKey" => String.t(),
        "RekeyFuzzPercentage" => integer(),
        "RekeyMarginTimeSeconds" => integer(),
        "ReplayWindowSize" => integer(),
        "StartupAction" => String.t(),
        "TunnelInsideCidr" => String.t(),
        "TunnelInsideIpv6Cidr" => String.t()
      }
      
  """
  @type modify_vpn_tunnel_options_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_templates_monitoring() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type launch_templates_monitoring() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      peering_attachment_status() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type peering_attachment_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_attribute_result() :: %{
        "EnableDnsHostnames" => attribute_boolean_value(),
        "EnableDnsSupport" => attribute_boolean_value(),
        "EnableNetworkAddressUsageMetrics" => attribute_boolean_value(),
        "VpcId" => String.t()
      }
      
  """
  @type describe_vpc_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_id_format_request() :: %{
        required("Resource") => String.t(),
        required("UseLongIds") => boolean()
      }
      
  """
  @type modify_id_format_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_connect_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type delete_transit_gateway_connect_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_elastic_inference_accelerator_response() :: %{
        "Count" => integer(),
        "Type" => String.t()
      }
      
  """
  @type launch_template_elastic_inference_accelerator_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_multicast_domain_result() :: %{
        "TransitGatewayMulticastDomain" => transit_gateway_multicast_domain()
      }
      
  """
  @type create_transit_gateway_multicast_domain_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_peering_attachment_request() :: %{
        optional("DryRun") => boolean(),
        optional("Options") => create_transit_gateway_peering_attachment_request_options(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("PeerAccountId") => String.t(),
        required("PeerRegion") => String.t(),
        required("PeerTransitGatewayId") => String.t(),
        required("TransitGatewayId") => String.t()
      }
      
  """
  @type create_transit_gateway_peering_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unsuccessful_instance_credit_specification_item_error() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type unsuccessful_instance_credit_specification_item_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_instance_event_notification_attributes_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceTagAttribute") => register_instance_tag_attribute_request()
      }
      
  """
  @type register_instance_event_notification_attributes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_connections_result() :: %{
        "Connections" => list(client_vpn_connection()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_client_vpn_connections_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      subnet_association() :: %{
        "State" => list(any()),
        "SubnetId" => String.t()
      }
      
  """
  @type subnet_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_result() :: %{
        "TransitGateway" => transit_gateway()
      }
      
  """
  @type delete_transit_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_maintenance_options() :: %{
        "AutoRecovery" => list(any())
      }
      
  """
  @type instance_maintenance_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_network_interface() :: %{
        "Association" => instance_network_interface_association(),
        "Attachment" => instance_network_interface_attachment(),
        "ConnectionTrackingConfiguration" => connection_tracking_specification_response(),
        "Description" => String.t(),
        "Groups" => list(group_identifier()()),
        "InterfaceType" => String.t(),
        "Ipv4Prefixes" => list(instance_ipv4_prefix()()),
        "Ipv6Addresses" => list(instance_ipv6_address()()),
        "Ipv6Prefixes" => list(instance_ipv6_prefix()()),
        "MacAddress" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "OwnerId" => String.t(),
        "PrivateDnsName" => String.t(),
        "PrivateIpAddress" => String.t(),
        "PrivateIpAddresses" => list(instance_private_ip_address()()),
        "SourceDestCheck" => boolean(),
        "Status" => list(any()),
        "SubnetId" => String.t(),
        "VpcId" => String.t()
      }
      
  """
  @type instance_network_interface() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fast_launch_images_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("ImageIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_fast_launch_images_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_specification() :: %{
        "ExcludeBootVolume" => boolean(),
        "ExcludeDataVolumeIds" => list(String.t()()),
        "InstanceId" => String.t()
      }
      
  """
  @type instance_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_address_transfer_result() :: %{
        "AddressTransfer" => address_transfer()
      }
      
  """
  @type disable_address_transfer_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_coip_pool_result() :: %{
        "CoipPool" => coip_pool()
      }
      
  """
  @type create_coip_pool_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      stop_instances_request() :: %{
        optional("DryRun") => boolean(),
        optional("Force") => boolean(),
        optional("Hibernate") => boolean(),
        required("InstanceIds") => list(String.t()())
      }
      
  """
  @type stop_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpn_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("VpnGatewayId") => String.t()
      }
      
  """
  @type delete_vpn_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      detach_network_interface_request() :: %{
        optional("DryRun") => boolean(),
        optional("Force") => boolean(),
        required("AttachmentId") => String.t()
      }
      
  """
  @type detach_network_interface_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unmonitor_instances_result() :: %{
        "InstanceMonitorings" => list(instance_monitoring()())
      }
      
  """
  @type unmonitor_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_vpc_peering_connection_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcPeeringConnectionId") => String.t()
      }
      
  """
  @type reject_vpc_peering_connection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_transit_gateway_policy_table_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t(),
        required("TransitGatewayPolicyTableId") => String.t()
      }
      
  """
  @type associate_transit_gateway_policy_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_peering_connection_options_description() :: %{
        "AllowDnsResolutionFromRemoteVpc" => boolean(),
        "AllowEgressFromLocalClassicLinkToRemoteVpc" => boolean(),
        "AllowEgressFromLocalVpcToRemoteClassicLink" => boolean()
      }
      
  """
  @type vpc_peering_connection_options_description() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      license_configuration() :: %{
        "LicenseConfigurationArn" => String.t()
      }
      
  """
  @type license_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fpga_image_attribute_result() :: %{
        "FpgaImageAttribute" => fpga_image_attribute()
      }
      
  """
  @type describe_fpga_image_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_instance_event_window_result() :: %{
        "InstanceEventWindowState" => instance_event_window_state_change()
      }
      
  """
  @type delete_instance_event_window_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_route_tables_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayRouteTables" => list(transit_gateway_route_table()())
      }
      
  """
  @type describe_transit_gateway_route_tables_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_route_table_result() :: %{
        "ClientToken" => String.t(),
        "RouteTable" => route_table()
      }
      
  """
  @type create_route_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_snapshot_request() :: %{
        optional("DryRun") => boolean(),
        required("SnapshotId") => String.t()
      }
      
  """
  @type delete_snapshot_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_aws_network_performance_metric_subscription_result() :: %{
        "Output" => boolean()
      }
      
  """
  @type disable_aws_network_performance_metric_subscription_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_route_table_request() :: %{
        optional("DryRun") => boolean(),
        required("RouteTableId") => String.t()
      }
      
  """
  @type delete_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_address_transfers_result() :: %{
        "AddressTransfers" => list(address_transfer()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_address_transfers_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_spot_fleet_requests_error_item() :: %{
        "Error" => cancel_spot_fleet_requests_error(),
        "SpotFleetRequestId" => String.t()
      }
      
  """
  @type cancel_spot_fleet_requests_error_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_price() :: %{
        "AvailabilityZone" => String.t(),
        "InstanceType" => list(any()),
        "ProductDescription" => list(any()),
        "SpotPrice" => String.t(),
        "Timestamp" => non_neg_integer()
      }
      
  """
  @type spot_price() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation() :: %{
        "AvailabilityZone" => String.t(),
        "AvailabilityZoneId" => String.t(),
        "AvailableInstanceCount" => integer(),
        "CapacityAllocations" => list(capacity_allocation()()),
        "CapacityReservationArn" => String.t(),
        "CapacityReservationFleetId" => String.t(),
        "CapacityReservationId" => String.t(),
        "CreateDate" => non_neg_integer(),
        "EbsOptimized" => boolean(),
        "EndDate" => non_neg_integer(),
        "EndDateType" => list(any()),
        "EphemeralStorage" => boolean(),
        "InstanceMatchCriteria" => list(any()),
        "InstancePlatform" => list(any()),
        "InstanceType" => String.t(),
        "OutpostArn" => String.t(),
        "OwnerId" => String.t(),
        "PlacementGroupArn" => String.t(),
        "ReservationType" => list(any()),
        "StartDate" => non_neg_integer(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "Tenancy" => list(any()),
        "TotalInstanceCount" => integer()
      }
      
  """
  @type capacity_reservation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      move_address_to_vpc_result() :: %{
        "AllocationId" => String.t(),
        "Status" => list(any())
      }
      
  """
  @type move_address_to_vpc_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_instance_metadata_options_request() :: %{
        "HttpEndpoint" => list(any()),
        "HttpProtocolIpv6" => list(any()),
        "HttpPutResponseHopLimit" => integer(),
        "HttpTokens" => list(any()),
        "InstanceMetadataTags" => list(any())
      }
      
  """
  @type launch_template_instance_metadata_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_peering_attachment_result() :: %{
        "TransitGatewayPeeringAttachment" => transit_gateway_peering_attachment()
      }
      
  """
  @type delete_transit_gateway_peering_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      internet_gateway() :: %{
        "Attachments" => list(internet_gateway_attachment()()),
        "InternetGatewayId" => String.t(),
        "OwnerId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type internet_gateway() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_placement() :: %{
        "Affinity" => String.t(),
        "AvailabilityZone" => String.t(),
        "GroupId" => String.t(),
        "GroupName" => String.t(),
        "HostId" => String.t(),
        "HostResourceGroupArn" => String.t(),
        "PartitionNumber" => integer(),
        "SpreadDomain" => String.t(),
        "Tenancy" => list(any())
      }
      
  """
  @type launch_template_placement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_status_item() :: %{
        "Actions" => list(volume_status_action()()),
        "AttachmentStatuses" => list(volume_status_attachment_status()()),
        "AvailabilityZone" => String.t(),
        "Events" => list(volume_status_event()()),
        "OutpostArn" => String.t(),
        "VolumeId" => String.t(),
        "VolumeStatus" => volume_status_info()
      }
      
  """
  @type volume_status_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_route_table_association_request() :: %{
        optional("DryRun") => boolean(),
        required("AssociationId") => String.t(),
        required("RouteTableId") => String.t()
      }
      
  """
  @type replace_route_table_association_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_instance_maintenance_options() :: %{
        "AutoRecovery" => list(any())
      }
      
  """
  @type launch_template_instance_maintenance_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_interface_permission_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type delete_network_interface_permission_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_enclave_certificate_iam_role_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type disassociate_enclave_certificate_iam_role_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_instance_requests_result() :: %{
        "NextToken" => String.t(),
        "SpotInstanceRequests" => list(spot_instance_request()())
      }
      
  """
  @type describe_spot_instance_requests_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_client_vpn_client_certificate_revocation_list_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type import_client_vpn_client_certificate_revocation_list_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_acl() :: %{
        "Associations" => list(network_acl_association()()),
        "Entries" => list(network_acl_entry()()),
        "IsDefault" => boolean(),
        "NetworkAclId" => String.t(),
        "OwnerId" => String.t(),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type network_acl() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      search_transit_gateway_routes_result() :: %{
        "AdditionalRoutesAvailable" => boolean(),
        "Routes" => list(transit_gateway_route()())
      }
      
  """
  @type search_transit_gateway_routes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      snapshot_detail() :: %{
        "Description" => String.t(),
        "DeviceName" => String.t(),
        "DiskImageSize" => float(),
        "Format" => String.t(),
        "Progress" => String.t(),
        "SnapshotId" => String.t(),
        "Status" => String.t(),
        "StatusMessage" => String.t(),
        "Url" => String.t(),
        "UserBucket" => user_bucket_details()
      }
      
  """
  @type snapshot_detail() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_discovered_resource_cidr() :: %{
        "AvailabilityZoneId" => String.t(),
        "IpUsage" => float(),
        "IpamResourceDiscoveryId" => String.t(),
        "NetworkInterfaceAttachmentStatus" => list(any()),
        "ResourceCidr" => String.t(),
        "ResourceId" => String.t(),
        "ResourceOwnerId" => String.t(),
        "ResourceRegion" => String.t(),
        "ResourceTags" => list(ipam_resource_tag()()),
        "ResourceType" => list(any()),
        "SampleTime" => non_neg_integer(),
        "VpcId" => String.t()
      }
      
  """
  @type ipam_discovered_resource_cidr() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_subnet_cidr_reservations_result() :: %{
        "NextToken" => String.t(),
        "SubnetIpv4CidrReservations" => list(subnet_cidr_reservation()()),
        "SubnetIpv6CidrReservations" => list(subnet_cidr_reservation()())
      }
      
  """
  @type get_subnet_cidr_reservations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      asn_authorization_context() :: %{
        "Message" => String.t(),
        "Signature" => String.t()
      }
      
  """
  @type asn_authorization_context() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      snapshot_recycle_bin_info() :: %{
        "Description" => String.t(),
        "RecycleBinEnterTime" => non_neg_integer(),
        "RecycleBinExitTime" => non_neg_integer(),
        "SnapshotId" => String.t(),
        "VolumeId" => String.t()
      }
      
  """
  @type snapshot_recycle_bin_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_options() :: %{
        "AmazonSideAsn" => float(),
        "AssociationDefaultRouteTableId" => String.t(),
        "AutoAcceptSharedAttachments" => list(any()),
        "DefaultRouteTableAssociation" => list(any()),
        "DefaultRouteTablePropagation" => list(any()),
        "DnsSupport" => list(any()),
        "MulticastSupport" => list(any()),
        "PropagationDefaultRouteTableId" => String.t(),
        "SecurityGroupReferencingSupport" => list(any()),
        "TransitGatewayCidrBlocks" => list(String.t()()),
        "VpnEcmpSupport" => list(any())
      }
      
  """
  @type transit_gateway_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_managed_prefix_lists_result() :: %{
        "NextToken" => String.t(),
        "PrefixLists" => list(managed_prefix_list()())
      }
      
  """
  @type describe_managed_prefix_lists_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      detach_verified_access_trust_provider_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("VerifiedAccessInstanceId") => String.t(),
        required("VerifiedAccessTrustProviderId") => String.t()
      }
      
  """
  @type detach_verified_access_trust_provider_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_prefix_list_reference() :: %{
        "Blackhole" => boolean(),
        "PrefixListId" => String.t(),
        "PrefixListOwnerId" => String.t(),
        "State" => list(any()),
        "TransitGatewayAttachment" => transit_gateway_prefix_list_attachment(),
        "TransitGatewayRouteTableId" => String.t()
      }
      
  """
  @type transit_gateway_prefix_list_reference() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_status_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IncludeAllInstances") => boolean(),
        optional("InstanceIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_instance_status_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_connect_peer_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayConnectPeerId") => String.t()
      }
      
  """
  @type delete_transit_gateway_connect_peer_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_fast_snapshot_restore_state_error_item() :: %{
        "AvailabilityZone" => String.t(),
        "Error" => disable_fast_snapshot_restore_state_error()
      }
      
  """
  @type disable_fast_snapshot_restore_state_error_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase1_integrity_algorithms_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type phase1_integrity_algorithms_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_capacity_reservation_fleet_result() :: %{
        "AllocationStrategy" => String.t(),
        "CapacityReservationFleetId" => String.t(),
        "CreateTime" => non_neg_integer(),
        "EndDate" => non_neg_integer(),
        "FleetCapacityReservations" => list(fleet_capacity_reservation()()),
        "InstanceMatchCriteria" => list(any()),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "Tenancy" => list(any()),
        "TotalFulfilledCapacity" => float(),
        "TotalTargetCapacity" => integer()
      }
      
  """
  @type create_capacity_reservation_fleet_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_market_options() :: %{
        "BlockDurationMinutes" => integer(),
        "InstanceInterruptionBehavior" => list(any()),
        "MaxPrice" => String.t(),
        "SpotInstanceType" => list(any()),
        "ValidUntil" => non_neg_integer()
      }
      
  """
  @type spot_market_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      authorize_security_group_egress_result() :: %{
        "Return" => boolean(),
        "SecurityGroupRules" => list(security_group_rule()())
      }
      
  """
  @type authorize_security_group_egress_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_instance_request() :: %{
        optional("Description") => String.t(),
        optional("DiskImages") => list(disk_image()()),
        optional("DryRun") => boolean(),
        optional("LaunchSpecification") => import_instance_launch_specification(),
        required("Platform") => list(any())
      }
      
  """
  @type import_instance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_managed_prefix_list_entries_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TargetVersion") => float(),
        required("PrefixListId") => String.t()
      }
      
  """
  @type get_managed_prefix_list_entries_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_types_result() :: %{
        "InstanceTypes" => list(instance_type_info()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_instance_types_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_resource_cidr_result() :: %{
        "IpamResourceCidr" => ipam_resource_cidr()
      }
      
  """
  @type modify_ipam_resource_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_spot_datafeed_subscription_request() :: %{
        optional("DryRun") => boolean(),
        optional("Prefix") => String.t(),
        required("Bucket") => String.t()
      }
      
  """
  @type create_spot_datafeed_subscription_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_egress_only_internet_gateways_request() :: %{
        optional("DryRun") => boolean(),
        optional("EgressOnlyInternetGatewayIds") => list(String.t()()),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_egress_only_internet_gateways_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_egress_only_internet_gateway_result() :: %{
        "ReturnCode" => boolean()
      }
      
  """
  @type delete_egress_only_internet_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_group_result() :: %{
        "VerifiedAccessGroup" => verified_access_group()
      }
      
  """
  @type modify_verified_access_group_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_managed_prefix_list_result() :: %{
        "PrefixList" => managed_prefix_list()
      }
      
  """
  @type delete_managed_prefix_list_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      asn_association() :: %{
        "Asn" => String.t(),
        "Cidr" => String.t(),
        "State" => list(any()),
        "StatusMessage" => String.t()
      }
      
  """
  @type asn_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deregister_transit_gateway_multicast_group_members_result() :: %{
        "DeregisteredMulticastGroupMembers" => transit_gateway_multicast_deregistered_group_members()
      }
      
  """
  @type deregister_transit_gateway_multicast_group_members_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_launch_template_versions_result() :: %{
        "LaunchTemplateVersions" => list(launch_template_version()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_launch_template_versions_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_transit_gateway_prefix_list_reference_request() :: %{
        optional("Blackhole") => boolean(),
        optional("DryRun") => boolean(),
        optional("TransitGatewayAttachmentId") => String.t(),
        required("PrefixListId") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type modify_transit_gateway_prefix_list_reference_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_tags_request() :: %{
        optional("DryRun") => boolean(),
        optional("Tags") => list(tag()()),
        required("Resources") => list(String.t()())
      }
      
  """
  @type delete_tags_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_ipam_resource_discovery_result() :: %{
        "IpamResourceDiscoveryAssociation" => ipam_resource_discovery_association()
      }
      
  """
  @type disassociate_ipam_resource_discovery_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      target_groups_config() :: %{
        "TargetGroups" => list(target_group()())
      }
      
  """
  @type target_groups_config() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_metadata_options_request() :: %{
        "HttpEndpoint" => list(any()),
        "HttpProtocolIpv6" => list(any()),
        "HttpPutResponseHopLimit" => integer(),
        "HttpTokens" => list(any()),
        "InstanceMetadataTags" => list(any())
      }
      
  """
  @type instance_metadata_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_tunnel_certificate_result() :: %{
        "VpnConnection" => vpn_connection()
      }
      
  """
  @type modify_vpn_tunnel_certificate_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deregister_instance_tag_attribute_request() :: %{
        "IncludeAllTagsOfInstance" => boolean(),
        "InstanceTagKeys" => list(String.t()())
      }
      
  """
  @type deregister_instance_tag_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_capacity_reservation_attributes_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_instance_capacity_reservation_attributes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_instance_state_fault() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type spot_instance_state_fault() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_queued_reserved_instances_result() :: %{
        "FailedQueuedPurchaseDeletions" => list(failed_queued_purchase_deletion()()),
        "SuccessfulQueuedPurchaseDeletions" => list(successful_queued_purchase_deletion()())
      }
      
  """
  @type delete_queued_reserved_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_virtual_interface_groups_result() :: %{
        "LocalGatewayVirtualInterfaceGroups" => list(local_gateway_virtual_interface_group()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_local_gateway_virtual_interface_groups_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_traffic_mirror_filter_rule_request() :: %{
        optional("DryRun") => boolean(),
        required("TrafficMirrorFilterRuleId") => String.t()
      }
      
  """
  @type delete_traffic_mirror_filter_rule_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_managed_prefix_list_associations_result() :: %{
        "NextToken" => String.t(),
        "PrefixListAssociations" => list(prefix_list_association()())
      }
      
  """
  @type get_managed_prefix_list_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_vpc_cidr_block_request() :: %{
        optional("AmazonProvidedIpv6CidrBlock") => boolean(),
        optional("CidrBlock") => String.t(),
        optional("Ipv4IpamPoolId") => String.t(),
        optional("Ipv4NetmaskLength") => integer(),
        optional("Ipv6CidrBlock") => String.t(),
        optional("Ipv6CidrBlockNetworkBorderGroup") => String.t(),
        optional("Ipv6IpamPoolId") => String.t(),
        optional("Ipv6NetmaskLength") => integer(),
        optional("Ipv6Pool") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type associate_vpc_cidr_block_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      path_component() :: %{
        "AclRule" => analysis_acl_rule(),
        "AdditionalDetails" => list(additional_detail()()),
        "AttachedTo" => analysis_component(),
        "Component" => analysis_component(),
        "DestinationVpc" => analysis_component(),
        "ElasticLoadBalancerListener" => analysis_component(),
        "Explanations" => list(explanation()()),
        "FirewallStatefulRule" => firewall_stateful_rule(),
        "FirewallStatelessRule" => firewall_stateless_rule(),
        "InboundHeader" => analysis_packet_header(),
        "OutboundHeader" => analysis_packet_header(),
        "RouteTableRoute" => analysis_route_table_route(),
        "SecurityGroupRule" => analysis_security_group_rule(),
        "SequenceNumber" => integer(),
        "ServiceName" => String.t(),
        "SourceVpc" => analysis_component(),
        "Subnet" => analysis_component(),
        "TransitGateway" => analysis_component(),
        "TransitGatewayRouteTableRoute" => transit_gateway_route_table_route(),
        "Vpc" => analysis_component()
      }
      
  """
  @type path_component() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provision_public_ipv4_pool_cidr_request() :: %{
        optional("DryRun") => boolean(),
        optional("NetworkBorderGroup") => String.t(),
        required("IpamPoolId") => String.t(),
        required("NetmaskLength") => integer(),
        required("PoolId") => String.t()
      }
      
  """
  @type provision_public_ipv4_pool_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_transit_gateway_routes_result() :: %{
        "S3Location" => String.t()
      }
      
  """
  @type export_transit_gateway_routes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      image_attribute() :: %{
        "BlockDeviceMappings" => list(block_device_mapping()()),
        "BootMode" => attribute_value(),
        "DeregistrationProtection" => attribute_value(),
        "Description" => attribute_value(),
        "ImageId" => String.t(),
        "ImdsSupport" => attribute_value(),
        "KernelId" => attribute_value(),
        "LastLaunchedTime" => attribute_value(),
        "LaunchPermissions" => list(launch_permission()()),
        "ProductCodes" => list(product_code()()),
        "RamdiskId" => attribute_value(),
        "SriovNetSupport" => attribute_value(),
        "TpmSupport" => attribute_value(),
        "UefiData" => attribute_value()
      }
      
  """
  @type image_attribute() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_client_vpn_client_configuration_request() :: %{
        optional("DryRun") => boolean(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type export_client_vpn_client_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_insights_access_scope_analysis_result() :: %{
        "NetworkInsightsAccessScopeAnalysisId" => String.t()
      }
      
  """
  @type delete_network_insights_access_scope_analysis_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disk_image_volume_description() :: %{
        "Id" => String.t(),
        "Size" => float()
      }
      
  """
  @type disk_image_volume_description() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_volume_request() :: %{
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        required("AvailabilityZone") => String.t(),
        required("Image") => disk_image_detail(),
        required("Volume") => volume_detail()
      }
      
  """
  @type import_volume_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_multicast_domain_associations_result() :: %{
        "MulticastDomainAssociations" => list(transit_gateway_multicast_domain_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_transit_gateway_multicast_domain_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_instance_event_window_result() :: %{
        "InstanceEventWindow" => instance_event_window()
      }
      
  """
  @type create_instance_event_window_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deregister_instance_event_notification_attributes_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceTagAttribute") => deregister_instance_tag_attribute_request()
      }
      
  """
  @type deregister_instance_event_notification_attributes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_transit_gateway_multicast_domain_result() :: %{
        "Associations" => transit_gateway_multicast_domain_associations()
      }
      
  """
  @type associate_transit_gateway_multicast_domain_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_spot_market_options_request() :: %{
        "BlockDurationMinutes" => integer(),
        "InstanceInterruptionBehavior" => list(any()),
        "MaxPrice" => String.t(),
        "SpotInstanceType" => list(any()),
        "ValidUntil" => non_neg_integer()
      }
      
  """
  @type launch_template_spot_market_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_log_s3_destination_options() :: %{
        "BucketName" => String.t(),
        "BucketOwner" => String.t(),
        "Enabled" => boolean(),
        "Prefix" => String.t()
      }
      
  """
  @type verified_access_log_s3_destination_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_verified_access_endpoint_result() :: %{
        "VerifiedAccessEndpoint" => verified_access_endpoint()
      }
      
  """
  @type delete_verified_access_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      peering_connection_options() :: %{
        "AllowDnsResolutionFromRemoteVpc" => boolean(),
        "AllowEgressFromLocalClassicLinkToRemoteVpc" => boolean(),
        "AllowEgressFromLocalVpcToRemoteClassicLink" => boolean()
      }
      
  """
  @type peering_connection_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_endpoints_result() :: %{
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type delete_vpc_endpoints_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_carrier_gateway_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("VpcId") => String.t()
      }
      
  """
  @type create_carrier_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_registered_group_sources() :: %{
        "GroupIpAddress" => String.t(),
        "RegisteredNetworkInterfaceIds" => list(String.t()()),
        "TransitGatewayMulticastDomainId" => String.t()
      }
      
  """
  @type transit_gateway_multicast_registered_group_sources() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_subnet_cidr_reservation_result() :: %{
        "SubnetCidrReservation" => subnet_cidr_reservation()
      }
      
  """
  @type create_subnet_cidr_reservation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      availability_zone() :: %{
        "GroupName" => String.t(),
        "Messages" => list(availability_zone_message()()),
        "NetworkBorderGroup" => String.t(),
        "OptInStatus" => list(any()),
        "ParentZoneId" => String.t(),
        "ParentZoneName" => String.t(),
        "RegionName" => String.t(),
        "State" => list(any()),
        "ZoneId" => String.t(),
        "ZoneName" => String.t(),
        "ZoneType" => String.t()
      }
      
  """
  @type availability_zone() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_pool_request() :: %{
        optional("Cascade") => boolean(),
        optional("DryRun") => boolean(),
        required("IpamPoolId") => String.t()
      }
      
  """
  @type delete_ipam_pool_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_network_insights_access_scope_content_result() :: %{
        "NetworkInsightsAccessScopeContent" => network_insights_access_scope_content()
      }
      
  """
  @type get_network_insights_access_scope_content_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_serial_console_access_result() :: %{
        "SerialConsoleAccessEnabled" => boolean()
      }
      
  """
  @type enable_serial_console_access_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_nat_gateway_address_result() :: %{
        "NatGatewayAddresses" => list(nat_gateway_address()()),
        "NatGatewayId" => String.t()
      }
      
  """
  @type disassociate_nat_gateway_address_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      s3_object_tag() :: %{
        "Key" => String.t(),
        "Value" => String.t()
      }
      
  """
  @type s3_object_tag() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_associated_ipv6_pool_cidrs_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("PoolId") => String.t()
      }
      
  """
  @type get_associated_ipv6_pool_cidrs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_volume_request() :: %{
        optional("DryRun") => boolean(),
        optional("Iops") => integer(),
        optional("MultiAttachEnabled") => boolean(),
        optional("Size") => integer(),
        optional("Throughput") => integer(),
        optional("VolumeType") => list(any()),
        required("VolumeId") => String.t()
      }
      
  """
  @type modify_volume_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_customer_gateway_result() :: %{
        "CustomerGateway" => customer_gateway()
      }
      
  """
  @type create_customer_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      security_group_rule_description() :: %{
        "Description" => String.t(),
        "SecurityGroupRuleId" => String.t()
      }
      
  """
  @type security_group_rule_description() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_addresses_attribute_request() :: %{
        optional("AllocationIds") => list(String.t()()),
        optional("Attribute") => list(any()),
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_addresses_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_transit_gateway_prefix_list_reference_result() :: %{
        "TransitGatewayPrefixListReference" => transit_gateway_prefix_list_reference()
      }
      
  """
  @type modify_transit_gateway_prefix_list_reference_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_snapshot_block_public_access_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type disable_snapshot_block_public_access_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unsuccessful_item_error() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type unsuccessful_item_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_status_info() :: %{
        "Details" => list(volume_status_details()()),
        "Status" => list(any())
      }
      
  """
  @type volume_status_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_coip_pools_result() :: %{
        "CoipPools" => list(coip_pool()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_coip_pools_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_snapshot_tier_request() :: %{
        optional("DryRun") => boolean(),
        optional("StorageTier") => list(any()),
        required("SnapshotId") => String.t()
      }
      
  """
  @type modify_snapshot_tier_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instances_modification() :: %{
        "ClientToken" => String.t(),
        "CreateDate" => non_neg_integer(),
        "EffectiveDate" => non_neg_integer(),
        "ModificationResults" => list(reserved_instances_modification_result()()),
        "ReservedInstancesIds" => list(reserved_instances_id()()),
        "ReservedInstancesModificationId" => String.t(),
        "Status" => String.t(),
        "StatusMessage" => String.t(),
        "UpdateDate" => non_neg_integer()
      }
      
  """
  @type reserved_instances_modification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      allocate_address_result() :: %{
        "AllocationId" => String.t(),
        "CarrierIp" => String.t(),
        "CustomerOwnedIp" => String.t(),
        "CustomerOwnedIpv4Pool" => String.t(),
        "Domain" => list(any()),
        "NetworkBorderGroup" => String.t(),
        "PublicIp" => String.t(),
        "PublicIpv4Pool" => String.t()
      }
      
  """
  @type allocate_address_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_coip_pool_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("LocalGatewayRouteTableId") => String.t()
      }
      
  """
  @type create_coip_pool_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ebs_default_kms_key_id_result() :: %{
        "KmsKeyId" => String.t()
      }
      
  """
  @type get_ebs_default_kms_key_id_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_volume_request() :: %{
        optional("DryRun") => boolean(),
        required("VolumeId") => String.t()
      }
      
  """
  @type delete_volume_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_dhcp_options_request() :: %{
        optional("DhcpOptionsIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_dhcp_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_classic_link_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("VpcIds") => list(String.t()())
      }
      
  """
  @type describe_vpc_classic_link_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpcs_result() :: %{
        "NextToken" => String.t(),
        "Vpcs" => list(vpc()())
      }
      
  """
  @type describe_vpcs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_peering_connection_options_result() :: %{
        "AccepterPeeringConnectionOptions" => peering_connection_options(),
        "RequesterPeeringConnectionOptions" => peering_connection_options()
      }
      
  """
  @type modify_vpc_peering_connection_options_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_network_interface_association() :: %{
        "CarrierIp" => String.t(),
        "CustomerOwnedIp" => String.t(),
        "IpOwnerId" => String.t(),
        "PublicDnsName" => String.t(),
        "PublicIp" => String.t()
      }
      
  """
  @type instance_network_interface_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_connect_peer_result() :: %{
        "TransitGatewayConnectPeer" => transit_gateway_connect_peer()
      }
      
  """
  @type create_transit_gateway_connect_peer_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_traffic_mirror_filter_rules_result() :: %{
        "NextToken" => String.t(),
        "TrafficMirrorFilterRules" => list(traffic_mirror_filter_rule()())
      }
      
  """
  @type describe_traffic_mirror_filter_rules_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_vpc_peering_connection_result() :: %{
        "VpcPeeringConnection" => vpc_peering_connection()
      }
      
  """
  @type accept_vpc_peering_connection_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fpga_image() :: %{
        "CreateTime" => non_neg_integer(),
        "DataRetentionSupport" => boolean(),
        "Description" => String.t(),
        "FpgaImageGlobalId" => String.t(),
        "FpgaImageId" => String.t(),
        "InstanceTypes" => list(String.t()()),
        "Name" => String.t(),
        "OwnerAlias" => String.t(),
        "OwnerId" => String.t(),
        "PciId" => pci_id(),
        "ProductCodes" => list(product_code()()),
        "Public" => boolean(),
        "ShellVersion" => String.t(),
        "State" => fpga_image_state(),
        "Tags" => list(tag()()),
        "UpdateTime" => non_neg_integer()
      }
      
  """
  @type fpga_image() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_peering_connection_request() :: %{
        optional("DryRun") => boolean(),
        optional("PeerOwnerId") => String.t(),
        optional("PeerRegion") => String.t(),
        optional("PeerVpcId") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("VpcId") => String.t()
      }
      
  """
  @type create_vpc_peering_connection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_ipam_byoasn_request() :: %{
        optional("DryRun") => boolean(),
        required("Asn") => String.t(),
        required("Cidr") => String.t()
      }
      
  """
  @type disassociate_ipam_byoasn_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instance_availability() :: %{
        "AvailabilityZone" => String.t(),
        "AvailableInstanceCount" => integer(),
        "FirstSlotStartTime" => non_neg_integer(),
        "HourlyPrice" => String.t(),
        "InstanceType" => String.t(),
        "MaxTermDurationInDays" => integer(),
        "MinTermDurationInDays" => integer(),
        "NetworkPlatform" => String.t(),
        "Platform" => String.t(),
        "PurchaseToken" => String.t(),
        "Recurrence" => scheduled_instance_recurrence(),
        "SlotDurationInHours" => integer(),
        "TotalScheduledInstanceHours" => integer()
      }
      
  """
  @type scheduled_instance_availability() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_snapshot_request() :: %{
        optional("ClientData") => client_data(),
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DiskContainer") => snapshot_disk_container(),
        optional("DryRun") => boolean(),
        optional("Encrypted") => boolean(),
        optional("KmsKeyId") => String.t(),
        optional("RoleName") => String.t(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type import_snapshot_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_resource_discovery_association() :: %{
        "IpamArn" => String.t(),
        "IpamId" => String.t(),
        "IpamRegion" => String.t(),
        "IpamResourceDiscoveryAssociationArn" => String.t(),
        "IpamResourceDiscoveryAssociationId" => String.t(),
        "IpamResourceDiscoveryId" => String.t(),
        "IsDefault" => boolean(),
        "OwnerId" => String.t(),
        "ResourceDiscoveryStatus" => list(any()),
        "State" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type ipam_resource_discovery_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_instance_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("InstanceId") => String.t()
      }
      
  """
  @type reset_instance_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      detach_volume_request() :: %{
        optional("Device") => String.t(),
        optional("DryRun") => boolean(),
        optional("Force") => boolean(),
        optional("InstanceId") => String.t(),
        required("VolumeId") => String.t()
      }
      
  """
  @type detach_volume_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_iam_instance_profile() :: %{
        "Arn" => String.t(),
        "Name" => String.t()
      }
      
  """
  @type scheduled_instances_iam_instance_profile() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface_count() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type network_interface_count() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_flow_logs_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DeliverCrossAccountRole") => String.t(),
        optional("DeliverLogsPermissionArn") => String.t(),
        optional("DestinationOptions") => destination_options_request(),
        optional("DryRun") => boolean(),
        optional("LogDestination") => String.t(),
        optional("LogDestinationType") => list(any()),
        optional("LogFormat") => String.t(),
        optional("LogGroupName") => String.t(),
        optional("MaxAggregationInterval") => integer(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("TrafficType") => list(any()),
        required("ResourceIds") => list(String.t()()),
        required("ResourceType") => list(any())
      }
      
  """
  @type create_flow_logs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_instance_event_notification_attributes_result() :: %{
        "InstanceTagAttribute" => instance_tag_notification_attribute()
      }
      
  """
  @type register_instance_event_notification_attributes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_task_s3_location_request() :: %{
        "S3Bucket" => String.t(),
        "S3Prefix" => String.t()
      }
      
  """
  @type export_task_s3_location_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_fast_snapshot_restore_state_error_item() :: %{
        "AvailabilityZone" => String.t(),
        "Error" => enable_fast_snapshot_restore_state_error()
      }
      
  """
  @type enable_fast_snapshot_restore_state_error_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_image_attribute_request() :: %{
        optional("Attribute") => String.t(),
        optional("Description") => attribute_value(),
        optional("DryRun") => boolean(),
        optional("ImdsSupport") => attribute_value(),
        optional("LaunchPermission") => launch_permission_modifications(),
        optional("OperationType") => list(any()),
        optional("OrganizationArns") => list(String.t()()),
        optional("OrganizationalUnitArns") => list(String.t()()),
        optional("ProductCodes") => list(String.t()()),
        optional("UserGroups") => list(String.t()()),
        optional("UserIds") => list(String.t()()),
        optional("Value") => String.t(),
        required("ImageId") => String.t()
      }
      
  """
  @type modify_image_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_vpc_peering_connection_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type reject_vpc_peering_connection_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_instance_network_interface_specification_request() :: %{
        "AssociateCarrierIpAddress" => boolean(),
        "AssociatePublicIpAddress" => boolean(),
        "ConnectionTrackingSpecification" => connection_tracking_specification_request(),
        "DeleteOnTermination" => boolean(),
        "Description" => String.t(),
        "DeviceIndex" => integer(),
        "EnaSrdSpecification" => ena_srd_specification_request(),
        "Groups" => list(String.t()()),
        "InterfaceType" => String.t(),
        "Ipv4PrefixCount" => integer(),
        "Ipv4Prefixes" => list(ipv4_prefix_specification_request()()),
        "Ipv6AddressCount" => integer(),
        "Ipv6Addresses" => list(instance_ipv6_address_request()()),
        "Ipv6PrefixCount" => integer(),
        "Ipv6Prefixes" => list(ipv6_prefix_specification_request()()),
        "NetworkCardIndex" => integer(),
        "NetworkInterfaceId" => String.t(),
        "PrimaryIpv6" => boolean(),
        "PrivateIpAddress" => String.t(),
        "PrivateIpAddresses" => list(private_ip_address_specification()()),
        "SecondaryPrivateIpAddressCount" => integer(),
        "SubnetId" => String.t()
      }
      
  """
  @type launch_template_instance_network_interface_specification_request() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      modify_address_attribute_result() :: %{
        "Address" => address_attribute()
      }
      
  """
  @type modify_address_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      dns_servers_options_modify_structure() :: %{
        "CustomDnsServers" => list(String.t()()),
        "Enabled" => boolean()
      }
      
  """
  @type dns_servers_options_modify_structure() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_prefix_lists_result() :: %{
        "NextToken" => String.t(),
        "PrefixLists" => list(prefix_list()())
      }
      
  """
  @type describe_prefix_lists_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_templates_monitoring_request() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type launch_templates_monitoring_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_event_start_time_result() :: %{
        "Event" => instance_status_event()
      }
      
  """
  @type modify_instance_event_start_time_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_customer_gateways_result() :: %{
        "CustomerGateways" => list(customer_gateway()())
      }
      
  """
  @type describe_customer_gateways_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_log_kinesis_data_firehose_destination_options() :: %{
        "DeliveryStream" => String.t(),
        "Enabled" => boolean()
      }
      
  """
  @type verified_access_log_kinesis_data_firehose_destination_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_resource_cidr() :: %{
        "AvailabilityZoneId" => String.t(),
        "ComplianceStatus" => list(any()),
        "IpUsage" => float(),
        "IpamId" => String.t(),
        "IpamPoolId" => String.t(),
        "IpamScopeId" => String.t(),
        "ManagementState" => list(any()),
        "OverlapStatus" => list(any()),
        "ResourceCidr" => String.t(),
        "ResourceId" => String.t(),
        "ResourceName" => String.t(),
        "ResourceOwnerId" => String.t(),
        "ResourceRegion" => String.t(),
        "ResourceTags" => list(ipam_resource_tag()()),
        "ResourceType" => list(any()),
        "VpcId" => String.t()
      }
      
  """
  @type ipam_resource_cidr() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_client_vpn_target_network_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("ClientVpnEndpointId") => String.t(),
        required("SubnetId") => String.t()
      }
      
  """
  @type associate_client_vpn_target_network_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_route_result() :: %{
        "Route" => transit_gateway_route()
      }
      
  """
  @type delete_transit_gateway_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_status_event() :: %{
        "Description" => String.t(),
        "EventId" => String.t(),
        "EventType" => String.t(),
        "InstanceId" => String.t(),
        "NotAfter" => non_neg_integer(),
        "NotBefore" => non_neg_integer()
      }
      
  """
  @type volume_status_event() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      revoke_security_group_egress_result() :: %{
        "Return" => boolean(),
        "UnknownIpPermissions" => list(ip_permission()())
      }
      
  """
  @type revoke_security_group_egress_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      efa_info() :: %{
        "MaximumEfaInterfaces" => integer()
      }
      
  """
  @type efa_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_market_options_request() :: %{
        "MarketType" => list(any()),
        "SpotOptions" => spot_market_options()
      }
      
  """
  @type instance_market_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_vpn_tunnel_request() :: %{
        optional("ApplyPendingMaintenance") => boolean(),
        optional("DryRun") => boolean(),
        required("VpnConnectionId") => String.t(),
        required("VpnTunnelOutsideIpAddress") => String.t()
      }
      
  """
  @type replace_vpn_tunnel_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reboot_instances_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceIds") => list(String.t()())
      }
      
  """
  @type reboot_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_transit_gateway_route_table_result() :: %{
        "Association" => transit_gateway_association()
      }
      
  """
  @type disassociate_transit_gateway_route_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_attachment() :: %{
        "AssociatedResource" => String.t(),
        "AttachTime" => non_neg_integer(),
        "DeleteOnTermination" => boolean(),
        "Device" => String.t(),
        "InstanceId" => String.t(),
        "InstanceOwningService" => String.t(),
        "State" => list(any()),
        "VolumeId" => String.t()
      }
      
  """
  @type volume_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_transit_gateway_request() :: %{
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("Options") => modify_transit_gateway_options(),
        required("TransitGatewayId") => String.t()
      }
      
  """
  @type modify_transit_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_instance_uefi_data_result() :: %{
        "InstanceId" => String.t(),
        "UefiData" => String.t()
      }
      
  """
  @type get_instance_uefi_data_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_route_table_vpc_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LocalGatewayRouteTableVpcAssociationIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_local_gateway_route_table_vpc_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      update_security_group_rule_descriptions_ingress_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type update_security_group_rule_descriptions_ingress_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_store_image_tasks_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("ImageIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_store_image_tasks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_connection_notification_request() :: %{
        optional("ConnectionEvents") => list(String.t()()),
        optional("ConnectionNotificationArn") => String.t(),
        optional("DryRun") => boolean(),
        required("ConnectionNotificationId") => String.t()
      }
      
  """
  @type modify_vpc_endpoint_connection_notification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      terminate_instances_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceIds") => list(String.t()())
      }
      
  """
  @type terminate_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface_permission_state() :: %{
        "State" => list(any()),
        "StatusMessage" => String.t()
      }
      
  """
  @type network_interface_permission_state() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_service_payer_responsibility_request() :: %{
        optional("DryRun") => boolean(),
        required("PayerResponsibility") => list(any()),
        required("ServiceId") => String.t()
      }
      
  """
  @type modify_vpc_endpoint_service_payer_responsibility_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      access_scope_analysis_finding() :: %{
        "FindingComponents" => list(path_component()()),
        "FindingId" => String.t(),
        "NetworkInsightsAccessScopeAnalysisId" => String.t(),
        "NetworkInsightsAccessScopeId" => String.t()
      }
      
  """
  @type access_scope_analysis_finding() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_count() :: %{
        "InstanceCount" => integer(),
        "State" => list(any())
      }
      
  """
  @type instance_count() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_scheduled_instances_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("ScheduledInstanceIds") => list(String.t()()),
        optional("SlotStartTimeRange") => slot_start_time_range_request()
      }
      
  """
  @type describe_scheduled_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      s3_storage() :: %{
        "AWSAccessKeyId" => String.t(),
        "Bucket" => String.t(),
        "Prefix" => String.t(),
        "UploadPolicy" => binary(),
        "UploadPolicySignature" => String.t()
      }
      
  """
  @type s3_storage() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_vpc_classic_link_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcId") => String.t()
      }
      
  """
  @type disable_vpc_classic_link_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_attachment() :: %{
        "State" => list(any()),
        "VpcId" => String.t()
      }
      
  """
  @type vpc_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_image_block_public_access_request() :: %{
        optional("DryRun") => boolean(),
        required("ImageBlockPublicAccessState") => list(any())
      }
      
  """
  @type enable_image_block_public_access_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_volume_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("VolumeId") => String.t()
      }
      
  """
  @type describe_volume_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      authorization_rule() :: %{
        "AccessAll" => boolean(),
        "ClientVpnEndpointId" => String.t(),
        "Description" => String.t(),
        "DestinationCidr" => String.t(),
        "GroupId" => String.t(),
        "Status" => client_vpn_authorization_rule_status()
      }
      
  """
  @type authorization_rule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_nat_gateway_result() :: %{
        "ClientToken" => String.t(),
        "NatGateway" => nat_gateway()
      }
      
  """
  @type create_nat_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      route_table() :: %{
        "Associations" => list(route_table_association()()),
        "OwnerId" => String.t(),
        "PropagatingVgws" => list(propagating_vgw()()),
        "RouteTableId" => String.t(),
        "Routes" => list(route()()),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type route_table() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_policy_table_result() :: %{
        "TransitGatewayPolicyTable" => transit_gateway_policy_table()
      }
      
  """
  @type create_transit_gateway_policy_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      added_principal() :: %{
        "Principal" => String.t(),
        "PrincipalType" => list(any()),
        "ServiceId" => String.t(),
        "ServicePermissionId" => String.t()
      }
      
  """
  @type added_principal() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_external_resource_verification_token_result() :: %{
        "IpamExternalResourceVerificationToken" => ipam_external_resource_verification_token()
      }
      
  """
  @type create_ipam_external_resource_verification_token_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_endpoint_service_configuration_request() :: %{
        optional("AcceptanceRequired") => boolean(),
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("GatewayLoadBalancerArns") => list(String.t()()),
        optional("NetworkLoadBalancerArns") => list(String.t()()),
        optional("PrivateDnsName") => String.t(),
        optional("SupportedIpAddressTypes") => list(String.t()()),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_vpc_endpoint_service_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_ebs_encryption_by_default_result() :: %{
        "EbsEncryptionByDefault" => boolean()
      }
      
  """
  @type enable_ebs_encryption_by_default_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_route_table_announcement() :: %{
        "AnnouncementDirection" => list(any()),
        "CoreNetworkId" => String.t(),
        "CreationTime" => non_neg_integer(),
        "PeerCoreNetworkId" => String.t(),
        "PeerTransitGatewayId" => String.t(),
        "PeeringAttachmentId" => String.t(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayId" => String.t(),
        "TransitGatewayRouteTableAnnouncementId" => String.t(),
        "TransitGatewayRouteTableId" => String.t()
      }
      
  """
  @type transit_gateway_route_table_announcement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_maintenance_strategies() :: %{
        "CapacityRebalance" => spot_capacity_rebalance()
      }
      
  """
  @type spot_maintenance_strategies() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      block_device_mapping() :: %{
        "DeviceName" => String.t(),
        "Ebs" => ebs_block_device(),
        "NoDevice" => String.t(),
        "VirtualName" => String.t()
      }
      
  """
  @type block_device_mapping() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      request_spot_fleet_request() :: %{
        optional("DryRun") => boolean(),
        required("SpotFleetRequestConfig") => spot_fleet_request_config_data()
      }
      
  """
  @type request_spot_fleet_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_coip_pool_request() :: %{
        optional("DryRun") => boolean(),
        required("CoipPoolId") => String.t()
      }
      
  """
  @type delete_coip_pool_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      neuron_device_memory_info() :: %{
        "SizeInMiB" => integer()
      }
      
  """
  @type neuron_device_memory_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unmonitor_instances_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceIds") => list(String.t()())
      }
      
  """
  @type unmonitor_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_groups_for_capacity_reservation_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("CapacityReservationId") => String.t()
      }
      
  """
  @type get_groups_for_capacity_reservation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      target_configuration_request() :: %{
        "InstanceCount" => integer(),
        "OfferingId" => String.t()
      }
      
  """
  @type target_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      local_gateway_route() :: %{
        "CoipPoolId" => String.t(),
        "DestinationCidrBlock" => String.t(),
        "DestinationPrefixListId" => String.t(),
        "LocalGatewayRouteTableArn" => String.t(),
        "LocalGatewayRouteTableId" => String.t(),
        "LocalGatewayVirtualInterfaceGroupId" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "OwnerId" => String.t(),
        "State" => list(any()),
        "SubnetId" => String.t(),
        "Type" => list(any())
      }
      
  """
  @type local_gateway_route() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_fleet_instances_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("SpotFleetRequestId") => String.t()
      }
      
  """
  @type describe_spot_fleet_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_license_configuration() :: %{
        "LicenseConfigurationArn" => String.t()
      }
      
  """
  @type launch_template_license_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      request_spot_instances_request() :: %{
        optional("AvailabilityZoneGroup") => String.t(),
        optional("BlockDurationMinutes") => integer(),
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("InstanceCount") => integer(),
        optional("InstanceInterruptionBehavior") => list(any()),
        optional("LaunchGroup") => String.t(),
        optional("LaunchSpecification") => request_spot_launch_specification(),
        optional("SpotPrice") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("Type") => list(any()),
        optional("ValidFrom") => non_neg_integer(),
        optional("ValidUntil") => non_neg_integer()
      }
      
  """
  @type request_spot_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_launch_template_result() :: %{
        "LaunchTemplate" => launch_template()
      }
      
  """
  @type delete_launch_template_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_launch_template_version_result() :: %{
        "LaunchTemplateVersion" => launch_template_version(),
        "Warning" => validation_warning()
      }
      
  """
  @type create_launch_template_version_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provision_ipam_pool_cidr_request() :: %{
        optional("Cidr") => String.t(),
        optional("CidrAuthorizationContext") => ipam_cidr_authorization_context(),
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("IpamExternalResourceVerificationTokenId") => String.t(),
        optional("NetmaskLength") => integer(),
        optional("VerificationMethod") => list(any()),
        required("IpamPoolId") => String.t()
      }
      
  """
  @type provision_ipam_pool_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_trunk_interface_associations_request() :: %{
        optional("AssociationIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_trunk_interface_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_enclave_certificate_iam_role_request() :: %{
        optional("DryRun") => boolean(),
        required("CertificateArn") => String.t(),
        required("RoleArn") => String.t()
      }
      
  """
  @type associate_enclave_certificate_iam_role_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_event_start_time_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceEventId") => String.t(),
        required("InstanceId") => String.t(),
        required("NotBefore") => non_neg_integer()
      }
      
  """
  @type modify_instance_event_start_time_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ebs_info() :: %{
        "EbsOptimizedInfo" => ebs_optimized_info(),
        "EbsOptimizedSupport" => list(any()),
        "EncryptionSupport" => list(any()),
        "NvmeSupport" => list(any())
      }
      
  """
  @type ebs_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_vgw_route_propagation_request() :: %{
        optional("DryRun") => boolean(),
        required("GatewayId") => String.t(),
        required("RouteTableId") => String.t()
      }
      
  """
  @type enable_vgw_route_propagation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_resource_cidr_request() :: %{
        optional("DestinationIpamScopeId") => String.t(),
        optional("DryRun") => boolean(),
        required("CurrentIpamScopeId") => String.t(),
        required("Monitored") => boolean(),
        required("ResourceCidr") => String.t(),
        required("ResourceId") => String.t(),
        required("ResourceRegion") => String.t()
      }
      
  """
  @type modify_ipam_resource_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_subnet_cidr_block_request() :: %{
        required("AssociationId") => String.t()
      }
      
  """
  @type disassociate_subnet_cidr_block_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accelerator_count() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type accelerator_count() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      connection_notification() :: %{
        "ConnectionEvents" => list(String.t()()),
        "ConnectionNotificationArn" => String.t(),
        "ConnectionNotificationId" => String.t(),
        "ConnectionNotificationState" => list(any()),
        "ConnectionNotificationType" => list(any()),
        "ServiceId" => String.t(),
        "VpcEndpointId" => String.t()
      }
      
  """
  @type connection_notification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_default_subnet_result() :: %{
        "Subnet" => subnet()
      }
      
  """
  @type create_default_subnet_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provision_ipam_byoasn_request() :: %{
        optional("DryRun") => boolean(),
        required("Asn") => String.t(),
        required("AsnAuthorizationContext") => asn_authorization_context(),
        required("IpamId") => String.t()
      }
      
  """
  @type provision_ipam_byoasn_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_route_table_associations_result() :: %{
        "Associations" => list(transit_gateway_route_table_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_transit_gateway_route_table_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_transit_gateway_multicast_group_sources_result() :: %{
        "RegisteredMulticastGroupSources" => transit_gateway_multicast_registered_group_sources()
      }
      
  """
  @type register_transit_gateway_multicast_group_sources_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc() :: %{
        "CidrBlock" => String.t(),
        "CidrBlockAssociationSet" => list(vpc_cidr_block_association()()),
        "DhcpOptionsId" => String.t(),
        "InstanceTenancy" => list(any()),
        "Ipv6CidrBlockAssociationSet" => list(vpc_ipv6_cidr_block_association()()),
        "IsDefault" => boolean(),
        "OwnerId" => String.t(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type vpc() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_bundle_task_request() :: %{
        optional("DryRun") => boolean(),
        required("BundleId") => String.t()
      }
      
  """
  @type cancel_bundle_task_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_images_result() :: %{
        "Images" => list(image()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_images_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      active_instance() :: %{
        "InstanceHealth" => list(any()),
        "InstanceId" => String.t(),
        "InstanceType" => String.t(),
        "SpotInstanceRequestId" => String.t()
      }
      
  """
  @type active_instance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_external_resource_verification_token() :: %{
        "IpamArn" => String.t(),
        "IpamExternalResourceVerificationTokenArn" => String.t(),
        "IpamExternalResourceVerificationTokenId" => String.t(),
        "IpamId" => String.t(),
        "IpamRegion" => String.t(),
        "NotAfter" => non_neg_integer(),
        "State" => list(any()),
        "Status" => list(any()),
        "Tags" => list(tag()()),
        "TokenName" => String.t(),
        "TokenValue" => String.t()
      }
      
  """
  @type ipam_external_resource_verification_token() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_image_license_configuration_request() :: %{
        "LicenseConfigurationArn" => String.t()
      }
      
  """
  @type import_image_license_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_data() :: %{
        "Comment" => String.t(),
        "UploadEnd" => non_neg_integer(),
        "UploadSize" => float(),
        "UploadStart" => non_neg_integer()
      }
      
  """
  @type client_data() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_host_reservation_result() :: %{
        "ClientToken" => String.t(),
        "CurrencyCode" => list(any()),
        "Purchase" => list(purchase()()),
        "TotalHourlyPrice" => String.t(),
        "TotalUpfrontPrice" => String.t()
      }
      
  """
  @type purchase_host_reservation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase1_encryption_algorithms_request_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type phase1_encryption_algorithms_request_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_scope() :: %{
        "Description" => String.t(),
        "IpamArn" => String.t(),
        "IpamRegion" => String.t(),
        "IpamScopeArn" => String.t(),
        "IpamScopeId" => String.t(),
        "IpamScopeType" => list(any()),
        "IsDefault" => boolean(),
        "OwnerId" => String.t(),
        "PoolCount" => integer(),
        "State" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type ipam_scope() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_fleet_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Context") => String.t(),
        optional("DryRun") => boolean(),
        optional("ExcessCapacityTerminationPolicy") => list(any()),
        optional("OnDemandOptions") => on_demand_options_request(),
        optional("ReplaceUnhealthyInstances") => boolean(),
        optional("SpotOptions") => spot_options_request(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("TerminateInstancesWithExpiration") => boolean(),
        optional("Type") => list(any()),
        optional("ValidFrom") => non_neg_integer(),
        optional("ValidUntil") => non_neg_integer(),
        required("LaunchTemplateConfigs") => list(fleet_launch_template_config_request()()),
        required("TargetCapacitySpecification") => target_capacity_specification_request()
      }
      
  """
  @type create_fleet_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_ipam_organization_admin_account_request() :: %{
        optional("DryRun") => boolean(),
        required("DelegatedAdminAccountId") => String.t()
      }
      
  """
  @type disable_ipam_organization_admin_account_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_flow_logs_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filter") => list(filter()()),
        optional("FlowLogIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_flow_logs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      elastic_gpu_association() :: %{
        "ElasticGpuAssociationId" => String.t(),
        "ElasticGpuAssociationState" => String.t(),
        "ElasticGpuAssociationTime" => String.t(),
        "ElasticGpuId" => String.t()
      }
      
  """
  @type elastic_gpu_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_peering_attachment_options() :: %{
        "DynamicRouting" => list(any())
      }
      
  """
  @type transit_gateway_peering_attachment_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_vpn_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcId") => String.t(),
        required("VpnGatewayId") => String.t()
      }
      
  """
  @type attach_vpn_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_instance_connect_endpoint_result() :: %{
        "ClientToken" => String.t(),
        "InstanceConnectEndpoint" => ec2_instance_connect_endpoint()
      }
      
  """
  @type create_instance_connect_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      detach_classic_link_vpc_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type detach_classic_link_vpc_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      assign_private_nat_gateway_address_request() :: %{
        optional("DryRun") => boolean(),
        optional("PrivateIpAddressCount") => integer(),
        optional("PrivateIpAddresses") => list(String.t()()),
        required("NatGatewayId") => String.t()
      }
      
  """
  @type assign_private_nat_gateway_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_scope_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("IpamId") => String.t()
      }
      
  """
  @type create_ipam_scope_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      private_dns_name_options_response() :: %{
        "EnableResourceNameDnsAAAARecord" => boolean(),
        "EnableResourceNameDnsARecord" => boolean(),
        "HostnameType" => list(any())
      }
      
  """
  @type private_dns_name_options_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_address_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("AllocationId") => String.t(),
        required("Attribute") => list(any())
      }
      
  """
  @type reset_address_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      federated_authentication_request() :: %{
        "SAMLProviderArn" => String.t(),
        "SelfServiceSAMLProviderArn" => String.t()
      }
      
  """
  @type federated_authentication_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      elastic_gpu_specification() :: %{
        "Type" => String.t()
      }
      
  """
  @type elastic_gpu_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_snapshot_request() :: %{
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("OutpostArn") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("VolumeId") => String.t()
      }
      
  """
  @type create_snapshot_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_route_table_announcement_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("PeeringAttachmentId") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type create_transit_gateway_route_table_announcement_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_nat_gateway_address_result() :: %{
        "NatGatewayAddresses" => list(nat_gateway_address()()),
        "NatGatewayId" => String.t()
      }
      
  """
  @type associate_nat_gateway_address_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv6_prefix_specification() :: %{
        "Ipv6Prefix" => String.t()
      }
      
  """
  @type ipv6_prefix_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_local_gateway_route_table_result() :: %{
        "LocalGatewayRouteTable" => local_gateway_route_table()
      }
      
  """
  @type create_local_gateway_route_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_cpu_options_request() :: %{
        "AmdSevSnp" => list(any()),
        "CoreCount" => integer(),
        "ThreadsPerCore" => integer()
      }
      
  """
  @type launch_template_cpu_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_vpc_peering_connection_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcPeeringConnectionId") => String.t()
      }
      
  """
  @type accept_vpc_peering_connection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_instance_event_window_request() :: %{
        optional("DryRun") => boolean(),
        optional("ForceDelete") => boolean(),
        required("InstanceEventWindowId") => String.t()
      }
      
  """
  @type delete_instance_event_window_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_transit_gateway_multicast_domain_request() :: %{
        optional("DryRun") => boolean(),
        required("SubnetIds") => list(String.t()()),
        required("TransitGatewayAttachmentId") => String.t(),
        required("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type disassociate_transit_gateway_multicast_domain_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_image_task() :: %{
        "Architecture" => String.t(),
        "BootMode" => list(any()),
        "Description" => String.t(),
        "Encrypted" => boolean(),
        "Hypervisor" => String.t(),
        "ImageId" => String.t(),
        "ImportTaskId" => String.t(),
        "KmsKeyId" => String.t(),
        "LicenseSpecifications" => list(import_image_license_configuration_response()()),
        "LicenseType" => String.t(),
        "Platform" => String.t(),
        "Progress" => String.t(),
        "SnapshotDetails" => list(snapshot_detail()()),
        "Status" => String.t(),
        "StatusMessage" => String.t(),
        "Tags" => list(tag()()),
        "UsageOperation" => String.t()
      }
      
  """
  @type import_image_task() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_snapshot_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("SnapshotId") => String.t()
      }
      
  """
  @type reset_snapshot_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      event_information() :: %{
        "EventDescription" => String.t(),
        "EventSubType" => String.t(),
        "InstanceId" => String.t()
      }
      
  """
  @type event_information() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      pci_id() :: %{
        "DeviceId" => String.t(),
        "SubsystemId" => String.t(),
        "SubsystemVendorId" => String.t(),
        "VendorId" => String.t()
      }
      
  """
  @type pci_id() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      v_cpu_count_range() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type v_cpu_count_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoints_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VpcEndpointIds") => list(String.t()())
      }
      
  """
  @type describe_vpc_endpoints_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_request() :: %{
        "InstanceCount" => integer(),
        "PurchaseToken" => String.t()
      }
      
  """
  @type purchase_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_block_device_mapping() :: %{
        "DeviceName" => String.t(),
        "Ebs" => ebs_instance_block_device()
      }
      
  """
  @type instance_block_device_mapping() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_insights_paths_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NetworkInsightsPathIds") => list(String.t()()),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_network_insights_paths_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_image_from_recycle_bin_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type restore_image_from_recycle_bin_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_interface_permission_result() :: %{
        "InterfacePermission" => network_interface_permission()
      }
      
  """
  @type create_network_interface_permission_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_host_reservation_purchase_preview_result() :: %{
        "CurrencyCode" => list(any()),
        "Purchase" => list(purchase()()),
        "TotalHourlyPrice" => String.t(),
        "TotalUpfrontPrice" => String.t()
      }
      
  """
  @type get_host_reservation_purchase_preview_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      search_transit_gateway_multicast_groups_result() :: %{
        "MulticastGroups" => list(transit_gateway_multicast_group()()),
        "NextToken" => String.t()
      }
      
  """
  @type search_transit_gateway_multicast_groups_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_ipv6_prefix() :: %{
        "Ipv6Prefix" => String.t()
      }
      
  """
  @type instance_ipv6_prefix() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      assign_ipv6_addresses_request() :: %{
        optional("Ipv6AddressCount") => integer(),
        optional("Ipv6Addresses") => list(String.t()()),
        optional("Ipv6PrefixCount") => integer(),
        optional("Ipv6Prefixes") => list(String.t()()),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type assign_ipv6_addresses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      private_dns_details() :: %{
        "PrivateDnsName" => String.t()
      }
      
  """
  @type private_dns_details() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_images_request() :: %{
        optional("DryRun") => boolean(),
        optional("ExecutableUsers") => list(String.t()()),
        optional("Filters") => list(filter()()),
        optional("ImageIds") => list(String.t()()),
        optional("IncludeDeprecated") => boolean(),
        optional("IncludeDisabled") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("Owners") => list(String.t()())
      }
      
  """
  @type describe_images_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_iam_instance_profile_specification_request() :: %{
        "Arn" => String.t(),
        "Name" => String.t()
      }
      
  """
  @type launch_template_iam_instance_profile_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_volume_permission() :: %{
        "Group" => list(any()),
        "UserId" => String.t()
      }
      
  """
  @type create_volume_permission() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_event_window() :: %{
        "AssociationTarget" => instance_event_window_association_target(),
        "CronExpression" => String.t(),
        "InstanceEventWindowId" => String.t(),
        "Name" => String.t(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TimeRanges" => list(instance_event_window_time_range()())
      }
      
  """
  @type instance_event_window() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      connection_log_response_options() :: %{
        "CloudwatchLogGroup" => String.t(),
        "CloudwatchLogStream" => String.t(),
        "Enabled" => boolean()
      }
      
  """
  @type connection_log_response_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      copy_image_request() :: %{
        optional("ClientToken") => String.t(),
        optional("CopyImageTags") => boolean(),
        optional("Description") => String.t(),
        optional("DestinationOutpostArn") => String.t(),
        optional("DryRun") => boolean(),
        optional("Encrypted") => boolean(),
        optional("KmsKeyId") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("Name") => String.t(),
        required("SourceImageId") => String.t(),
        required("SourceRegion") => String.t()
      }
      
  """
  @type copy_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_pool_result() :: %{
        "IpamPool" => ipam_pool()
      }
      
  """
  @type delete_ipam_pool_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ebs_instance_block_device_specification() :: %{
        "DeleteOnTermination" => boolean(),
        "VolumeId" => String.t()
      }
      
  """
  @type ebs_instance_block_device_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_security_group_references_request() :: %{
        optional("DryRun") => boolean(),
        required("GroupId") => list(String.t()())
      }
      
  """
  @type describe_security_group_references_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_security_groups_result() :: %{
        "NextToken" => String.t(),
        "SecurityGroups" => list(security_group()())
      }
      
  """
  @type describe_security_groups_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_fleet_request() :: %{
        optional("Context") => String.t(),
        optional("DryRun") => boolean(),
        optional("ExcessCapacityTerminationPolicy") => list(any()),
        optional("LaunchTemplateConfigs") => list(fleet_launch_template_config_request()()),
        optional("TargetCapacitySpecification") => target_capacity_specification_request(),
        required("FleetId") => String.t()
      }
      
  """
  @type modify_fleet_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      revoke_client_vpn_ingress_result() :: %{
        "Status" => client_vpn_authorization_rule_status()
      }
      
  """
  @type revoke_client_vpn_ingress_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_transit_gateway_multicast_group_members_result() :: %{
        "RegisteredMulticastGroupMembers" => transit_gateway_multicast_registered_group_members()
      }
      
  """
  @type register_transit_gateway_multicast_group_members_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_attachments_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayAttachments" => list(transit_gateway_attachment()())
      }
      
  """
  @type describe_transit_gateway_attachments_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_fleet_request_config() :: %{
        "ActivityStatus" => list(any()),
        "CreateTime" => non_neg_integer(),
        "SpotFleetRequestConfig" => spot_fleet_request_config_data(),
        "SpotFleetRequestId" => String.t(),
        "SpotFleetRequestState" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type spot_fleet_request_config() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_store_image_tasks_result() :: %{
        "NextToken" => String.t(),
        "StoreImageTaskResults" => list(store_image_task_result()())
      }
      
  """
  @type describe_store_image_tasks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_vpc_attachment_request_options() :: %{
        "ApplianceModeSupport" => list(any()),
        "DnsSupport" => list(any()),
        "Ipv6Support" => list(any()),
        "SecurityGroupReferencingSupport" => list(any())
      }
      
  """
  @type create_transit_gateway_vpc_attachment_request_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_key_pairs_result() :: %{
        "KeyPairs" => list(key_pair_info()())
      }
      
  """
  @type describe_key_pairs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      recurring_charge() :: %{
        "Amount" => float(),
        "Frequency" => list(any())
      }
      
  """
  @type recurring_charge() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ebs_encryption_by_default_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type get_ebs_encryption_by_default_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      account_attribute_value() :: %{
        "AttributeValue" => String.t()
      }
      
  """
  @type account_attribute_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_internet_gateways_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("InternetGatewayIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_internet_gateways_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_subnet_attribute_request() :: %{
        optional("AssignIpv6AddressOnCreation") => attribute_boolean_value(),
        optional("CustomerOwnedIpv4Pool") => String.t(),
        optional("DisableLniAtDeviceIndex") => attribute_boolean_value(),
        optional("EnableDns64") => attribute_boolean_value(),
        optional("EnableLniAtDeviceIndex") => integer(),
        optional("EnableResourceNameDnsAAAARecordOnLaunch") => attribute_boolean_value(),
        optional("EnableResourceNameDnsARecordOnLaunch") => attribute_boolean_value(),
        optional("MapCustomerOwnedIpOnLaunch") => attribute_boolean_value(),
        optional("MapPublicIpOnLaunch") => attribute_boolean_value(),
        optional("PrivateDnsHostnameTypeOnLaunch") => list(any()),
        required("SubnetId") => String.t()
      }
      
  """
  @type modify_subnet_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_acl_entry_request() :: %{
        optional("CidrBlock") => String.t(),
        optional("DryRun") => boolean(),
        optional("IcmpTypeCode") => icmp_type_code(),
        optional("Ipv6CidrBlock") => String.t(),
        optional("PortRange") => port_range(),
        required("Egress") => boolean(),
        required("NetworkAclId") => String.t(),
        required("Protocol") => String.t(),
        required("RuleAction") => list(any()),
        required("RuleNumber") => integer()
      }
      
  """
  @type create_network_acl_entry_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_fast_snapshot_restores_request() :: %{
        optional("DryRun") => boolean(),
        required("AvailabilityZones") => list(String.t()()),
        required("SourceSnapshotIds") => list(String.t()())
      }
      
  """
  @type disable_fast_snapshot_restores_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_pool_result() :: %{
        "IpamPool" => ipam_pool()
      }
      
  """
  @type modify_ipam_pool_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      managed_prefix_list() :: %{
        "AddressFamily" => String.t(),
        "MaxEntries" => integer(),
        "OwnerId" => String.t(),
        "PrefixListArn" => String.t(),
        "PrefixListId" => String.t(),
        "PrefixListName" => String.t(),
        "State" => list(any()),
        "StateMessage" => String.t(),
        "Tags" => list(tag()()),
        "Version" => float()
      }
      
  """
  @type managed_prefix_list() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_volume_i_o_request() :: %{
        optional("DryRun") => boolean(),
        required("VolumeId") => String.t()
      }
      
  """
  @type enable_volume_i_o_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      remove_ipam_operating_region() :: %{
        "RegionName" => String.t()
      }
      
  """
  @type remove_ipam_operating_region() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unassign_ipv6_addresses_result() :: %{
        "NetworkInterfaceId" => String.t(),
        "UnassignedIpv6Addresses" => list(String.t()()),
        "UnassignedIpv6Prefixes" => list(String.t()())
      }
      
  """
  @type unassign_ipv6_addresses_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_local_gateway_route_table_vpc_association_result() :: %{
        "LocalGatewayRouteTableVpcAssociation" => local_gateway_route_table_vpc_association()
      }
      
  """
  @type create_local_gateway_route_table_vpc_association_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_image_request() :: %{
        optional("Architecture") => String.t(),
        optional("BootMode") => list(any()),
        optional("ClientData") => client_data(),
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DiskContainers") => list(image_disk_container()()),
        optional("DryRun") => boolean(),
        optional("Encrypted") => boolean(),
        optional("Hypervisor") => String.t(),
        optional("KmsKeyId") => String.t(),
        optional("LicenseSpecifications") => list(import_image_license_configuration_request()()),
        optional("LicenseType") => String.t(),
        optional("Platform") => String.t(),
        optional("RoleName") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("UsageOperation") => String.t()
      }
      
  """
  @type import_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_endpoint_service_configurations_request() :: %{
        optional("DryRun") => boolean(),
        required("ServiceIds") => list(String.t()())
      }
      
  """
  @type delete_vpc_endpoint_service_configurations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_volumes_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VolumeIds") => list(String.t()())
      }
      
  """
  @type describe_volumes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unassign_private_nat_gateway_address_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxDrainDurationSeconds") => integer(),
        required("NatGatewayId") => String.t(),
        required("PrivateIpAddresses") => list(String.t()())
      }
      
  """
  @type unassign_private_nat_gateway_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_license_configuration_request() :: %{
        "LicenseConfigurationArn" => String.t()
      }
      
  """
  @type launch_template_license_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_policy_table_entries_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("TransitGatewayPolicyTableId") => String.t()
      }
      
  """
  @type get_transit_gateway_policy_table_entries_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_attachment_propagation() :: %{
        "State" => list(any()),
        "TransitGatewayRouteTableId" => String.t()
      }
      
  """
  @type transit_gateway_attachment_propagation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provision_byoip_cidr_result() :: %{
        "ByoipCidr" => byoip_cidr()
      }
      
  """
  @type provision_byoip_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_instance_connect_endpoint_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceConnectEndpointId") => String.t()
      }
      
  """
  @type delete_instance_connect_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_policy_table_entries_result() :: %{
        "TransitGatewayPolicyTableEntries" => list(transit_gateway_policy_table_entry()())
      }
      
  """
  @type get_transit_gateway_policy_table_entries_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_metadata_options_result() :: %{
        "InstanceId" => String.t(),
        "InstanceMetadataOptions" => instance_metadata_options_response()
      }
      
  """
  @type modify_instance_metadata_options_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface() :: %{
        "Association" => network_interface_association(),
        "Attachment" => network_interface_attachment(),
        "AvailabilityZone" => String.t(),
        "ConnectionTrackingConfiguration" => connection_tracking_configuration(),
        "DenyAllIgwTraffic" => boolean(),
        "Description" => String.t(),
        "Groups" => list(group_identifier()()),
        "InterfaceType" => list(any()),
        "Ipv4Prefixes" => list(ipv4_prefix_specification()()),
        "Ipv6Address" => String.t(),
        "Ipv6Addresses" => list(network_interface_ipv6_address()()),
        "Ipv6Native" => boolean(),
        "Ipv6Prefixes" => list(ipv6_prefix_specification()()),
        "MacAddress" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "OutpostArn" => String.t(),
        "OwnerId" => String.t(),
        "PrivateDnsName" => String.t(),
        "PrivateIpAddress" => String.t(),
        "PrivateIpAddresses" => list(network_interface_private_ip_address()()),
        "RequesterId" => String.t(),
        "RequesterManaged" => boolean(),
        "SourceDestCheck" => boolean(),
        "Status" => list(any()),
        "SubnetId" => String.t(),
        "TagSet" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type network_interface() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_target() :: %{
        "CapacityReservationId" => String.t(),
        "CapacityReservationResourceGroupArn" => String.t()
      }
      
  """
  @type capacity_reservation_target() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_local_gateway_route_table_vpc_association_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("LocalGatewayRouteTableId") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type create_local_gateway_route_table_vpc_association_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_console_screenshot_result() :: %{
        "ImageData" => String.t(),
        "InstanceId" => String.t()
      }
      
  """
  @type get_console_screenshot_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_peering_connection_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type delete_vpc_peering_connection_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_principal_id_format_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("Resources") => list(String.t()())
      }
      
  """
  @type describe_principal_id_format_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      conversion_task() :: %{
        "ConversionTaskId" => String.t(),
        "ExpirationTime" => String.t(),
        "ImportInstance" => import_instance_task_details(),
        "ImportVolume" => import_volume_task_details(),
        "State" => list(any()),
        "StatusMessage" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type conversion_task() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      load_permission_request() :: %{
        "Group" => list(any()),
        "UserId" => String.t()
      }
      
  """
  @type load_permission_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      nat_gateway_address() :: %{
        "AllocationId" => String.t(),
        "AssociationId" => String.t(),
        "FailureMessage" => String.t(),
        "IsPrimary" => boolean(),
        "NetworkInterfaceId" => String.t(),
        "PrivateIp" => String.t(),
        "PublicIp" => String.t(),
        "Status" => list(any())
      }
      
  """
  @type nat_gateway_address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      association_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type association_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_scopes_result() :: %{
        "IpamScopes" => list(ipam_scope()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_ipam_scopes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_aws_network_performance_data_result() :: %{
        "DataResponses" => list(data_response()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_aws_network_performance_data_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      subnet() :: %{
        "AssignIpv6AddressOnCreation" => boolean(),
        "AvailabilityZone" => String.t(),
        "AvailabilityZoneId" => String.t(),
        "AvailableIpAddressCount" => integer(),
        "CidrBlock" => String.t(),
        "CustomerOwnedIpv4Pool" => String.t(),
        "DefaultForAz" => boolean(),
        "EnableDns64" => boolean(),
        "EnableLniAtDeviceIndex" => integer(),
        "Ipv6CidrBlockAssociationSet" => list(subnet_ipv6_cidr_block_association()()),
        "Ipv6Native" => boolean(),
        "MapCustomerOwnedIpOnLaunch" => boolean(),
        "MapPublicIpOnLaunch" => boolean(),
        "OutpostArn" => String.t(),
        "OwnerId" => String.t(),
        "PrivateDnsNameOptionsOnLaunch" => private_dns_name_options_on_launch(),
        "State" => list(any()),
        "SubnetArn" => String.t(),
        "SubnetId" => String.t(),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type subnet() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_vgw_route_propagation_request() :: %{
        optional("DryRun") => boolean(),
        required("GatewayId") => String.t(),
        required("RouteTableId") => String.t()
      }
      
  """
  @type disable_vgw_route_propagation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_spot_fleet_requests_success_item() :: %{
        "CurrentSpotFleetRequestState" => list(any()),
        "PreviousSpotFleetRequestState" => list(any()),
        "SpotFleetRequestId" => String.t()
      }
      
  """
  @type cancel_spot_fleet_requests_success_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_nat_gateways_result() :: %{
        "NatGateways" => list(nat_gateway()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_nat_gateways_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_groups_for_capacity_reservation_result() :: %{
        "CapacityReservationGroups" => list(capacity_reservation_group()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_groups_for_capacity_reservation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      add_prefix_list_entry() :: %{
        "Cidr" => String.t(),
        "Description" => String.t()
      }
      
  """
  @type add_prefix_list_entry() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      successful_queued_purchase_deletion() :: %{
        "ReservedInstancesId" => String.t()
      }
      
  """
  @type successful_queued_purchase_deletion() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_instance_market_options_request() :: %{
        "MarketType" => list(any()),
        "SpotOptions" => launch_template_spot_market_options_request()
      }
      
  """
  @type launch_template_instance_market_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_key_pair_result() :: %{
        "KeyPairId" => String.t(),
        "Return" => boolean()
      }
      
  """
  @type delete_key_pair_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      public_ipv4_pool_range() :: %{
        "AddressCount" => integer(),
        "AvailableAddressCount" => integer(),
        "FirstAddress" => String.t(),
        "LastAddress" => String.t()
      }
      
  """
  @type public_ipv4_pool_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_domain_associations() :: %{
        "ResourceId" => String.t(),
        "ResourceOwnerId" => String.t(),
        "ResourceType" => list(any()),
        "Subnets" => list(subnet_association()()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayMulticastDomainId" => String.t()
      }
      
  """
  @type transit_gateway_multicast_domain_associations() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_transit_gateway_peering_attachment_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type reject_transit_gateway_peering_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_discovered_resource_cidrs_result() :: %{
        "IpamDiscoveredResourceCidrs" => list(ipam_discovered_resource_cidr()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_ipam_discovered_resource_cidrs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_moving_addresses_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("PublicIps") => list(String.t()())
      }
      
  """
  @type describe_moving_addresses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      subnet_ipv6_cidr_block_association() :: %{
        "AssociationId" => String.t(),
        "Ipv6CidrBlock" => String.t(),
        "Ipv6CidrBlockState" => subnet_cidr_block_state()
      }
      
  """
  @type subnet_ipv6_cidr_block_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      analysis_load_balancer_listener() :: %{
        "InstancePort" => integer(),
        "LoadBalancerPort" => integer()
      }
      
  """
  @type analysis_load_balancer_listener() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      memory_gi_b_per_v_cpu_request() :: %{
        "Max" => float(),
        "Min" => float()
      }
      
  """
  @type memory_gi_b_per_v_cpu_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_policy_rule() :: %{
        "DestinationCidrBlock" => String.t(),
        "DestinationPortRange" => String.t(),
        "MetaData" => transit_gateway_policy_rule_meta_data(),
        "Protocol" => String.t(),
        "SourceCidrBlock" => String.t(),
        "SourcePortRange" => String.t()
      }
      
  """
  @type transit_gateway_policy_rule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_price_history_request() :: %{
        optional("AvailabilityZone") => String.t(),
        optional("DryRun") => boolean(),
        optional("EndTime") => non_neg_integer(),
        optional("Filters") => list(filter()()),
        optional("InstanceTypes") => list(list(any())()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("ProductDescriptions") => list(String.t()()),
        optional("StartTime") => non_neg_integer()
      }
      
  """
  @type describe_spot_price_history_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_subnet_cidr_reservation_result() :: %{
        "DeletedSubnetCidrReservation" => subnet_cidr_reservation()
      }
      
  """
  @type delete_subnet_cidr_reservation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_client_vpn_target_network_request() :: %{
        optional("DryRun") => boolean(),
        required("AssociationId") => String.t(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type disassociate_client_vpn_target_network_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_target_networks_request() :: %{
        optional("AssociationIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type describe_client_vpn_target_networks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_fleet_instances_response() :: %{
        "ActiveInstances" => list(active_instance()()),
        "NextToken" => String.t(),
        "SpotFleetRequestId" => String.t()
      }
      
  """
  @type describe_spot_fleet_instances_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_pool_result() :: %{
        "IpamPool" => ipam_pool()
      }
      
  """
  @type create_ipam_pool_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_log_cloud_watch_logs_destination_options() :: %{
        "Enabled" => boolean(),
        "LogGroup" => String.t()
      }
      
  """
  @type verified_access_log_cloud_watch_logs_destination_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_image_request() :: %{
        optional("DryRun") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type disable_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_spot_datafeed_subscription_result() :: %{
        "SpotDatafeedSubscription" => spot_datafeed_subscription()
      }
      
  """
  @type create_spot_datafeed_subscription_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_private_dns_name_options_request() :: %{
        optional("DryRun") => boolean(),
        optional("EnableResourceNameDnsAAAARecord") => boolean(),
        optional("EnableResourceNameDnsARecord") => boolean(),
        optional("PrivateDnsHostnameType") => list(any()),
        required("InstanceId") => String.t()
      }
      
  """
  @type modify_private_dns_name_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      subnet_configuration() :: %{
        "Ipv4" => String.t(),
        "Ipv6" => String.t(),
        "SubnetId" => String.t()
      }
      
  """
  @type subnet_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cpu_options_request() :: %{
        "AmdSevSnp" => list(any()),
        "CoreCount" => integer(),
        "ThreadsPerCore" => integer()
      }
      
  """
  @type cpu_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_flow_logs_result() :: %{
        "ClientToken" => String.t(),
        "FlowLogIds" => list(String.t()()),
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type create_flow_logs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      neuron_device_info() :: %{
        "CoreInfo" => neuron_device_core_info(),
        "Count" => integer(),
        "MemoryInfo" => neuron_device_memory_info(),
        "Name" => String.t()
      }
      
  """
  @type neuron_device_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_placement_groups_result() :: %{
        "PlacementGroups" => list(placement_group()())
      }
      
  """
  @type describe_placement_groups_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_pool_cidr() :: %{
        "Cidr" => String.t(),
        "FailureReason" => ipam_pool_cidr_failure_reason(),
        "IpamPoolCidrId" => String.t(),
        "NetmaskLength" => integer(),
        "State" => list(any())
      }
      
  """
  @type ipam_pool_cidr() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_connection_request() :: %{
        optional("CustomerGatewayId") => String.t(),
        optional("DryRun") => boolean(),
        optional("TransitGatewayId") => String.t(),
        optional("VpnGatewayId") => String.t(),
        required("VpnConnectionId") => String.t()
      }
      
  """
  @type modify_vpn_connection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_traffic_mirror_filters_result() :: %{
        "NextToken" => String.t(),
        "TrafficMirrorFilters" => list(traffic_mirror_filter()())
      }
      
  """
  @type describe_traffic_mirror_filters_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_pool_cidr_failure_reason() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type ipam_pool_cidr_failure_reason() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_local_gateway_route_result() :: %{
        "Route" => local_gateway_route()
      }
      
  """
  @type delete_local_gateway_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_image_deregistration_protection_request() :: %{
        optional("DryRun") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type disable_image_deregistration_protection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_external_resource_verification_token_request() :: %{
        optional("DryRun") => boolean(),
        required("IpamExternalResourceVerificationTokenId") => String.t()
      }
      
  """
  @type delete_ipam_external_resource_verification_token_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_spot_datafeed_subscription_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type delete_spot_datafeed_subscription_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_route_table_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("VpcId") => String.t()
      }
      
  """
  @type create_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_scope_result() :: %{
        "IpamScope" => ipam_scope()
      }
      
  """
  @type create_ipam_scope_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_external_resource_verification_token_result() :: %{
        "IpamExternalResourceVerificationToken" => ipam_external_resource_verification_token()
      }
      
  """
  @type delete_ipam_external_resource_verification_token_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deprovision_ipam_byoasn_request() :: %{
        optional("DryRun") => boolean(),
        required("Asn") => String.t(),
        required("IpamId") => String.t()
      }
      
  """
  @type deprovision_ipam_byoasn_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      start_network_insights_access_scope_analysis_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("ClientToken") => String.t(),
        required("NetworkInsightsAccessScopeId") => String.t()
      }
      
  """
  @type start_network_insights_access_scope_analysis_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_fleet_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_fleet_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_verified_access_endpoint_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("VerifiedAccessEndpointId") => String.t()
      }
      
  """
  @type delete_verified_access_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      explanation() :: %{
        "ComponentRegion" => String.t(),
        "TransitGatewayRouteTable" => analysis_component(),
        "LoadBalancerListenerPort" => integer(),
        "LoadBalancerArn" => String.t(),
        "PortRanges" => list(port_range()()),
        "ComponentAccount" => String.t(),
        "Vpc" => analysis_component(),
        "RouteTable" => analysis_component(),
        "LoadBalancerTargetPort" => integer(),
        "ClassicLoadBalancerListener" => analysis_load_balancer_listener(),
        "Component" => analysis_component(),
        "NatGateway" => analysis_component(),
        "PrefixList" => analysis_component(),
        "CustomerGateway" => analysis_component(),
        "Subnet" => analysis_component(),
        "PacketField" => String.t(),
        "Destination" => analysis_component(),
        "SourceVpc" => analysis_component(),
        "AttachedTo" => analysis_component(),
        "Address" => String.t(),
        "IngressRouteTable" => analysis_component(),
        "TransitGateway" => analysis_component(),
        "TransitGatewayRouteTableRoute" => transit_gateway_route_table_route(),
        "AclRule" => analysis_acl_rule(),
        "SecurityGroup" => analysis_component(),
        "VpcEndpoint" => analysis_component(),
        "Direction" => String.t(),
        "ElasticLoadBalancerListener" => analysis_component(),
        "MissingComponent" => String.t(),
        "FirewallStatefulRule" => firewall_stateful_rule(),
        "State" => String.t(),
        "ExplanationCode" => String.t(),
        "LoadBalancerTarget" => analysis_load_balancer_target(),
        "Port" => integer(),
        "AvailabilityZones" => list(String.t()()),
        "SecurityGroupRule" => analysis_security_group_rule(),
        "VpnGateway" => analysis_component(),
        "VpnConnection" => analysis_component(),
        "RouteTableRoute" => analysis_route_table_route(),
        "Protocols" => list(String.t()()),
        "Cidrs" => list(String.t()()),
        "LoadBalancerTargetGroup" => analysis_component(),
        "Addresses" => list(String.t()()),
        "InternetGateway" => analysis_component(),
        "Acl" => analysis_component(),
        "SubnetRouteTable" => analysis_component(),
        "NetworkInterface" => analysis_component(),
        "DestinationVpc" => analysis_component(),
        "VpcPeeringConnection" => analysis_component(),
        "LoadBalancerTargetGroups" => list(analysis_component()()),
        "SecurityGroups" => list(analysis_component()()),
        "FirewallStatelessRule" => firewall_stateless_rule(),
        "TransitGatewayAttachment" => analysis_component()
      }
      
  """
  @type explanation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_nat_gateway_address_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxDrainDurationSeconds") => integer(),
        required("AssociationIds") => list(String.t()()),
        required("NatGatewayId") => String.t()
      }
      
  """
  @type disassociate_nat_gateway_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      placement_group() :: %{
        "GroupArn" => String.t(),
        "GroupId" => String.t(),
        "GroupName" => String.t(),
        "PartitionCount" => integer(),
        "SpreadLevel" => list(any()),
        "State" => list(any()),
        "Strategy" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type placement_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_identity_id_format_request() :: %{
        required("PrincipalArn") => String.t(),
        required("Resource") => String.t(),
        required("UseLongIds") => boolean()
      }
      
  """
  @type modify_identity_id_format_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_reachability_analyzer_organization_sharing_result() :: %{
        "ReturnValue" => boolean()
      }
      
  """
  @type enable_reachability_analyzer_organization_sharing_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_endpoint_connection_notifications_result() :: %{
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type delete_vpc_endpoint_connection_notifications_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_enclave_certificate_iam_role_result() :: %{
        "CertificateS3BucketName" => String.t(),
        "CertificateS3ObjectKey" => String.t(),
        "EncryptionKmsKeyId" => String.t()
      }
      
  """
  @type associate_enclave_certificate_iam_role_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_route_table_result() :: %{
        "TransitGatewayRouteTable" => transit_gateway_route_table()
      }
      
  """
  @type delete_transit_gateway_route_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_snapshot_block_public_access_state_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type get_snapshot_block_public_access_state_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ena_srd_udp_specification() :: %{
        "EnaSrdUdpEnabled" => boolean()
      }
      
  """
  @type ena_srd_udp_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_fleet_success_item() :: %{
        "CurrentFleetState" => list(any()),
        "FleetId" => String.t(),
        "PreviousFleetState" => list(any())
      }
      
  """
  @type delete_fleet_success_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_insights_path_result() :: %{
        "NetworkInsightsPathId" => String.t()
      }
      
  """
  @type delete_network_insights_path_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_traffic_mirror_filter_result() :: %{
        "TrafficMirrorFilterId" => String.t()
      }
      
  """
  @type delete_traffic_mirror_filter_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_instance_status() :: %{
        "Code" => String.t(),
        "Message" => String.t(),
        "UpdateTime" => non_neg_integer()
      }
      
  """
  @type spot_instance_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_placement_groups_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("GroupIds") => list(String.t()()),
        optional("GroupNames") => list(String.t()())
      }
      
  """
  @type describe_placement_groups_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      host_offering() :: %{
        "CurrencyCode" => list(any()),
        "Duration" => integer(),
        "HourlyPrice" => String.t(),
        "InstanceFamily" => String.t(),
        "OfferingId" => String.t(),
        "PaymentOption" => list(any()),
        "UpfrontPrice" => String.t()
      }
      
  """
  @type host_offering() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_insights_access_scope_analyses_result() :: %{
        "NetworkInsightsAccessScopeAnalyses" => list(network_insights_access_scope_analysis()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_network_insights_access_scope_analyses_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_network_interface() :: %{
        "AssociatePublicIpAddress" => boolean(),
        "DeleteOnTermination" => boolean(),
        "Description" => String.t(),
        "DeviceIndex" => integer(),
        "Groups" => list(String.t()()),
        "Ipv6AddressCount" => integer(),
        "Ipv6Addresses" => list(scheduled_instances_ipv6_address()()),
        "NetworkInterfaceId" => String.t(),
        "PrivateIpAddress" => String.t(),
        "PrivateIpAddressConfigs" => list(scheduled_instances_private_ip_address_config()()),
        "SecondaryPrivateIpAddressCount" => integer(),
        "SubnetId" => String.t()
      }
      
  """
  @type scheduled_instances_network_interface() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_ipam_organization_admin_account_result() :: %{
        "Success" => boolean()
      }
      
  """
  @type enable_ipam_organization_admin_account_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_instance_uefi_data_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t()
      }
      
  """
  @type get_instance_uefi_data_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_snapshot_block_public_access_result() :: %{
        "State" => list(any())
      }
      
  """
  @type enable_snapshot_block_public_access_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      certificate_authentication() :: %{
        "ClientRootCertificateChain" => String.t()
      }
      
  """
  @type certificate_authentication() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_conversion_request() :: %{
        optional("DryRun") => boolean(),
        optional("ReasonMessage") => String.t(),
        required("ConversionTaskId") => String.t()
      }
      
  """
  @type cancel_conversion_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_security_group_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("VpcId") => String.t(),
        required("Description") => String.t(),
        required("GroupName") => String.t()
      }
      
  """
  @type create_security_group_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_connections_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_vpc_endpoint_connections_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_fpga_image_attribute_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type reset_fpga_image_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_flow_logs_request() :: %{
        optional("DryRun") => boolean(),
        required("FlowLogIds") => list(String.t()())
      }
      
  """
  @type delete_flow_logs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_aws_network_performance_metric_subscription_request() :: %{
        optional("Destination") => String.t(),
        optional("DryRun") => boolean(),
        optional("Metric") => list(any()),
        optional("Source") => String.t(),
        optional("Statistic") => list(any())
      }
      
  """
  @type disable_aws_network_performance_metric_subscription_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_network_insights_access_scope_analysis_findings_result() :: %{
        "AnalysisFindings" => list(access_scope_analysis_finding()()),
        "AnalysisStatus" => list(any()),
        "NetworkInsightsAccessScopeAnalysisId" => String.t(),
        "NextToken" => String.t()
      }
      
  """
  @type get_network_insights_access_scope_analysis_findings_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_peering_attachments_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayAttachmentIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_peering_attachments_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_security_group_references_result() :: %{
        "SecurityGroupReferenceSet" => list(security_group_reference()())
      }
      
  """
  @type describe_security_group_references_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_login_banner_response_options() :: %{
        "BannerText" => String.t(),
        "Enabled" => boolean()
      }
      
  """
  @type client_login_banner_response_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_group_policy_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("PolicyDocument") => String.t(),
        optional("PolicyEnabled") => boolean(),
        optional("SseSpecification") => verified_access_sse_specification_request(),
        required("VerifiedAccessGroupId") => String.t()
      }
      
  """
  @type modify_verified_access_group_policy_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_capacity_reservation_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type cancel_capacity_reservation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      lock_snapshot_result() :: %{
        "CoolOffPeriod" => integer(),
        "CoolOffPeriodExpiresOn" => non_neg_integer(),
        "LockCreatedOn" => non_neg_integer(),
        "LockDuration" => integer(),
        "LockDurationStartTime" => non_neg_integer(),
        "LockExpiresOn" => non_neg_integer(),
        "LockState" => list(any()),
        "SnapshotId" => String.t()
      }
      
  """
  @type lock_snapshot_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_managed_prefix_list_entries_result() :: %{
        "Entries" => list(prefix_list_entry()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_managed_prefix_list_entries_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_reserved_instances_modifications_request() :: %{
        optional("Filters") => list(filter()()),
        optional("NextToken") => String.t(),
        optional("ReservedInstancesModificationIds") => list(String.t()())
      }
      
  """
  @type describe_reserved_instances_modifications_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_instance_types_from_instance_requirements_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("ArchitectureTypes") => list(list(any())()),
        required("InstanceRequirements") => instance_requirements_request(),
        required("VirtualizationTypes") => list(list(any())())
      }
      
  """
  @type get_instance_types_from_instance_requirements_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_hosts_result() :: %{
        "Hosts" => list(host()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_hosts_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_registered_group_members() :: %{
        "GroupIpAddress" => String.t(),
        "RegisteredNetworkInterfaceIds" => list(String.t()()),
        "TransitGatewayMulticastDomainId" => String.t()
      }
      
  """
  @type transit_gateway_multicast_registered_group_members() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_traffic_mirror_session_result() :: %{
        "ClientToken" => String.t(),
        "TrafficMirrorSession" => traffic_mirror_session()
      }
      
  """
  @type create_traffic_mirror_session_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      connection_tracking_specification_request() :: %{
        "TcpEstablishedTimeout" => integer(),
        "UdpStreamTimeout" => integer(),
        "UdpTimeout" => integer()
      }
      
  """
  @type connection_tracking_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_vpc_cidr_block_request() :: %{
        required("AssociationId") => String.t()
      }
      
  """
  @type disassociate_vpc_cidr_block_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      run_scheduled_instances_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("InstanceCount") => integer(),
        required("LaunchSpecification") => scheduled_instances_launch_specification(),
        required("ScheduledInstanceId") => String.t()
      }
      
  """
  @type run_scheduled_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_trust_provider_condensed() :: %{
        "Description" => String.t(),
        "DeviceTrustProviderType" => list(any()),
        "TrustProviderType" => list(any()),
        "UserTrustProviderType" => list(any()),
        "VerifiedAccessTrustProviderId" => String.t()
      }
      
  """
  @type verified_access_trust_provider_condensed() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      rule_group_type_pair() :: %{
        "RuleGroupArn" => String.t(),
        "RuleGroupType" => String.t()
      }
      
  """
  @type rule_group_type_pair() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv6_range() :: %{
        "CidrIpv6" => String.t(),
        "Description" => String.t()
      }
      
  """
  @type ipv6_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_peering_connection_state_reason() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type vpc_peering_connection_state_reason() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      credit_specification() :: %{
        "CpuCredits" => String.t()
      }
      
  """
  @type credit_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cloud_watch_log_options_specification() :: %{
        "LogEnabled" => boolean(),
        "LogGroupArn" => String.t(),
        "LogOutputFormat" => String.t()
      }
      
  """
  @type cloud_watch_log_options_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_discovery_failure_reason() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type ipam_discovery_failure_reason() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase2_integrity_algorithms_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type phase2_integrity_algorithms_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_reserved_instances_listings_result() :: %{
        "ReservedInstancesListings" => list(reserved_instances_listing()())
      }
      
  """
  @type describe_reserved_instances_listings_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_request() :: %{
        optional("AddRouteTableIds") => list(String.t()()),
        optional("AddSecurityGroupIds") => list(String.t()()),
        optional("AddSubnetIds") => list(String.t()()),
        optional("DnsOptions") => dns_options_specification(),
        optional("DryRun") => boolean(),
        optional("IpAddressType") => list(any()),
        optional("PolicyDocument") => String.t(),
        optional("PrivateDnsEnabled") => boolean(),
        optional("RemoveRouteTableIds") => list(String.t()()),
        optional("RemoveSecurityGroupIds") => list(String.t()()),
        optional("RemoveSubnetIds") => list(String.t()()),
        optional("ResetPolicy") => boolean(),
        optional("SubnetConfigurations") => list(subnet_configuration()()),
        required("VpcEndpointId") => String.t()
      }
      
  """
  @type modify_vpc_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fpga_device_info() :: %{
        "Count" => integer(),
        "Manufacturer" => String.t(),
        "MemoryInfo" => fpga_device_memory_info(),
        "Name" => String.t()
      }
      
  """
  @type fpga_device_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_identity_id_format_request() :: %{
        optional("Resource") => String.t(),
        required("PrincipalArn") => String.t()
      }
      
  """
  @type describe_identity_id_format_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_capacity_reservation_fleet_request() :: %{
        optional("DryRun") => boolean(),
        optional("EndDate") => non_neg_integer(),
        optional("RemoveEndDate") => boolean(),
        optional("TotalTargetCapacity") => integer(),
        required("CapacityReservationFleetId") => String.t()
      }
      
  """
  @type modify_capacity_reservation_fleet_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_fast_snapshot_restore_error_item() :: %{
        "FastSnapshotRestoreStateErrors" => list(disable_fast_snapshot_restore_state_error_item()()),
        "SnapshotId" => String.t()
      }
      
  """
  @type disable_fast_snapshot_restore_error_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_subnet_cidr_reservation_request() :: %{
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("Cidr") => String.t(),
        required("ReservationType") => list(any()),
        required("SubnetId") => String.t()
      }
      
  """
  @type create_subnet_cidr_reservation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_spot_instance_requests_request() :: %{
        optional("DryRun") => boolean(),
        required("SpotInstanceRequestIds") => list(String.t()())
      }
      
  """
  @type cancel_spot_instance_requests_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      access_scope_path_request() :: %{
        "Destination" => path_statement_request(),
        "Source" => path_statement_request(),
        "ThroughResources" => list(through_resources_statement_request()())
      }
      
  """
  @type access_scope_path_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_reserved_instances_modifications_result() :: %{
        "NextToken" => String.t(),
        "ReservedInstancesModifications" => list(reserved_instances_modification()())
      }
      
  """
  @type describe_reserved_instances_modifications_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_route_table() :: %{
        "CreationTime" => non_neg_integer(),
        "DefaultAssociationRouteTable" => boolean(),
        "DefaultPropagationRouteTable" => boolean(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayId" => String.t(),
        "TransitGatewayRouteTableId" => String.t()
      }
      
  """
  @type transit_gateway_route_table() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_coip_pool_usage_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("PoolId") => String.t()
      }
      
  """
  @type get_coip_pool_usage_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      analysis_route_table_route() :: %{
        "CarrierGatewayId" => String.t(),
        "CoreNetworkArn" => String.t(),
        "DestinationCidr" => String.t(),
        "DestinationPrefixListId" => String.t(),
        "EgressOnlyInternetGatewayId" => String.t(),
        "GatewayId" => String.t(),
        "InstanceId" => String.t(),
        "LocalGatewayId" => String.t(),
        "NatGatewayId" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "Origin" => String.t(),
        "State" => String.t(),
        "TransitGatewayId" => String.t(),
        "VpcPeeringConnectionId" => String.t()
      }
      
  """
  @type analysis_route_table_route() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_pool() :: %{
        "AddressFamily" => list(any()),
        "AllocationDefaultNetmaskLength" => integer(),
        "AllocationMaxNetmaskLength" => integer(),
        "AllocationMinNetmaskLength" => integer(),
        "AllocationResourceTags" => list(ipam_resource_tag()()),
        "AutoImport" => boolean(),
        "AwsService" => list(any()),
        "Description" => String.t(),
        "IpamArn" => String.t(),
        "IpamPoolArn" => String.t(),
        "IpamPoolId" => String.t(),
        "IpamRegion" => String.t(),
        "IpamScopeArn" => String.t(),
        "IpamScopeType" => list(any()),
        "Locale" => String.t(),
        "OwnerId" => String.t(),
        "PoolDepth" => integer(),
        "PublicIpSource" => list(any()),
        "PubliclyAdvertisable" => boolean(),
        "SourceIpamPoolId" => String.t(),
        "SourceResource" => ipam_pool_source_resource(),
        "State" => list(any()),
        "StateMessage" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type ipam_pool() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_connection_options_result() :: %{
        "VpnConnection" => vpn_connection()
      }
      
  """
  @type modify_vpn_connection_options_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_address_request() :: %{
        optional("AssociationId") => String.t(),
        optional("DryRun") => boolean(),
        optional("PublicIp") => String.t()
      }
      
  """
  @type disassociate_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_iam_instance_profile_request() :: %{
        required("IamInstanceProfile") => iam_instance_profile_specification(),
        required("InstanceId") => String.t()
      }
      
  """
  @type associate_iam_instance_profile_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      inference_device_memory_info() :: %{
        "SizeInMiB" => integer()
      }
      
  """
  @type inference_device_memory_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_permission() :: %{
        "Group" => list(any()),
        "OrganizationArn" => String.t(),
        "OrganizationalUnitArn" => String.t(),
        "UserId" => String.t()
      }
      
  """
  @type launch_permission() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_stale_security_groups_result() :: %{
        "NextToken" => String.t(),
        "StaleSecurityGroupSet" => list(stale_security_group()())
      }
      
  """
  @type describe_stale_security_groups_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcId") => String.t()
      }
      
  """
  @type delete_vpc_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_detail() :: %{
        "Size" => float()
      }
      
  """
  @type volume_detail() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_local_gateway_route_table_virtual_interface_group_association_request() :: %{
        optional("DryRun") => boolean(),
        required("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId") => String.t()
      }
      
  """
  @type delete_local_gateway_route_table_virtual_interface_group_association_request() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      describe_managed_prefix_lists_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("PrefixListIds") => list(String.t()())
      }
      
  """
  @type describe_managed_prefix_lists_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_verified_access_group_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("VerifiedAccessGroupId") => String.t()
      }
      
  """
  @type delete_verified_access_group_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      classic_link_instance() :: %{
        "Groups" => list(group_identifier()()),
        "InstanceId" => String.t(),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type classic_link_instance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      i_k_e_versions_request_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type i_k_e_versions_request_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_spot_fleet_requests_response() :: %{
        "SuccessfulFleetRequests" => list(cancel_spot_fleet_requests_success_item()()),
        "UnsuccessfulFleetRequests" => list(cancel_spot_fleet_requests_error_item()())
      }
      
  """
  @type cancel_spot_fleet_requests_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fast_launch_launch_template_specification_request() :: %{
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "Version" => String.t()
      }
      
  """
  @type fast_launch_launch_template_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_network_interface_attribute_request() :: %{
        optional("AssociatePublicIpAddress") => boolean(),
        optional("Attachment") => network_interface_attachment_changes(),
        optional("ConnectionTrackingSpecification") => connection_tracking_specification_request(),
        optional("Description") => attribute_value(),
        optional("DryRun") => boolean(),
        optional("EnaSrdSpecification") => ena_srd_specification(),
        optional("EnablePrimaryIpv6") => boolean(),
        optional("Groups") => list(String.t()()),
        optional("SourceDestCheck") => attribute_boolean_value(),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type modify_network_interface_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_nat_gateways_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filter") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NatGatewayIds") => list(String.t()()),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_nat_gateways_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      move_byoip_cidr_to_ipam_result() :: %{
        "ByoipCidr" => byoip_cidr()
      }
      
  """
  @type move_byoip_cidr_to_ipam_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      traffic_mirror_filter() :: %{
        "Description" => String.t(),
        "EgressFilterRules" => list(traffic_mirror_filter_rule()()),
        "IngressFilterRules" => list(traffic_mirror_filter_rule()()),
        "NetworkServices" => list(list(any())()),
        "Tags" => list(tag()()),
        "TrafficMirrorFilterId" => String.t()
      }
      
  """
  @type traffic_mirror_filter() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_security_group_rules_request() :: %{
        optional("DryRun") => boolean(),
        required("GroupId") => String.t(),
        required("SecurityGroupRules") => list(security_group_rule_update()())
      }
      
  """
  @type modify_security_group_rules_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_bundle_tasks_request() :: %{
        optional("BundleIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()())
      }
      
  """
  @type describe_bundle_tasks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ebs_default_kms_key_id_result() :: %{
        "KmsKeyId" => String.t()
      }
      
  """
  @type modify_ebs_default_kms_key_id_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_traffic_mirror_filter_network_services_request() :: %{
        optional("AddNetworkServices") => list(list(any())()),
        optional("DryRun") => boolean(),
        optional("RemoveNetworkServices") => list(list(any())()),
        required("TrafficMirrorFilterId") => String.t()
      }
      
  """
  @type modify_traffic_mirror_filter_network_services_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_credit_specifications_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("InstanceIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_instance_credit_specifications_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_request() :: %{
        optional("AmazonProvidedIpv6CidrBlock") => boolean(),
        optional("CidrBlock") => String.t(),
        optional("DryRun") => boolean(),
        optional("InstanceTenancy") => list(any()),
        optional("Ipv4IpamPoolId") => String.t(),
        optional("Ipv4NetmaskLength") => integer(),
        optional("Ipv6CidrBlock") => String.t(),
        optional("Ipv6CidrBlockNetworkBorderGroup") => String.t(),
        optional("Ipv6IpamPoolId") => String.t(),
        optional("Ipv6NetmaskLength") => integer(),
        optional("Ipv6Pool") => String.t(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_vpc_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_replace_root_volume_tasks_result() :: %{
        "NextToken" => String.t(),
        "ReplaceRootVolumeTasks" => list(replace_root_volume_task()())
      }
      
  """
  @type describe_replace_root_volume_tasks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_specification_response() :: %{
        "CapacityReservationPreference" => list(any()),
        "CapacityReservationTarget" => capacity_reservation_target_response()
      }
      
  """
  @type capacity_reservation_specification_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_discovered_accounts_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("DiscoveryRegion") => String.t(),
        required("IpamResourceDiscoveryId") => String.t()
      }
      
  """
  @type get_ipam_discovered_accounts_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_associated_enclave_certificate_iam_roles_request() :: %{
        optional("DryRun") => boolean(),
        required("CertificateArn") => String.t()
      }
      
  """
  @type get_associated_enclave_certificate_iam_roles_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      run_instances_request() :: %{
        optional("SecurityGroupIds") => list(String.t()()),
        optional("CreditSpecification") => credit_specification_request(),
        optional("MetadataOptions") => instance_metadata_options_request(),
        optional("EnablePrimaryIpv6") => boolean(),
        optional("BlockDeviceMappings") => list(block_device_mapping()()),
        optional("ClientToken") => String.t(),
        optional("InstanceInitiatedShutdownBehavior") => list(any()),
        optional("LicenseSpecifications") => list(license_configuration_request()()),
        optional("Ipv6AddressCount") => integer(),
        optional("PrivateIpAddress") => String.t(),
        optional("Ipv6Addresses") => list(instance_ipv6_address()()),
        optional("Monitoring") => run_instances_monitoring_enabled(),
        optional("KernelId") => String.t(),
        optional("RamdiskId") => String.t(),
        optional("ElasticGpuSpecification") => list(elastic_gpu_specification()()),
        required("MinCount") => integer(),
        optional("HibernationOptions") => hibernation_options_request(),
        optional("MaintenanceOptions") => instance_maintenance_options_request(),
        optional("KeyName") => String.t(),
        optional("InstanceType") => list(any()),
        optional("EbsOptimized") => boolean(),
        optional("CapacityReservationSpecification") => capacity_reservation_specification(),
        optional("AdditionalInfo") => String.t(),
        optional("DisableApiStop") => boolean(),
        optional("UserData") => String.t(),
        optional("DisableApiTermination") => boolean(),
        optional("CpuOptions") => cpu_options_request(),
        optional("DryRun") => boolean(),
        optional("SecurityGroups") => list(String.t()()),
        optional("Placement") => placement(),
        optional("PrivateDnsNameOptions") => private_dns_name_options_request(),
        optional("SubnetId") => String.t(),
        optional("IamInstanceProfile") => iam_instance_profile_specification(),
        optional("EnclaveOptions") => enclave_options_request(),
        optional("ImageId") => String.t(),
        optional("LaunchTemplate") => launch_template_specification(),
        optional("InstanceMarketOptions") => instance_market_options_request(),
        required("MaxCount") => integer(),
        optional("NetworkInterfaces") => list(instance_network_interface_specification()()),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("ElasticInferenceAccelerators") => list(elastic_inference_accelerator()())
      }
      
  """
  @type run_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      elastic_gpus() :: %{
        "AvailabilityZone" => String.t(),
        "ElasticGpuHealth" => elastic_gpu_health(),
        "ElasticGpuId" => String.t(),
        "ElasticGpuState" => list(any()),
        "ElasticGpuType" => String.t(),
        "InstanceId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type elastic_gpus() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_service_configuration_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_vpc_endpoint_service_configuration_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_local_gateway_route_result() :: %{
        "Route" => local_gateway_route()
      }
      
  """
  @type create_local_gateway_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_attachment_ena_srd_specification() :: %{
        "EnaSrdEnabled" => boolean(),
        "EnaSrdUdpSpecification" => instance_attachment_ena_srd_udp_specification()
      }
      
  """
  @type instance_attachment_ena_srd_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_transit_gateway_route_table_propagation_request() :: %{
        optional("DryRun") => boolean(),
        optional("TransitGatewayAttachmentId") => String.t(),
        optional("TransitGatewayRouteTableAnnouncementId") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type disable_transit_gateway_route_table_propagation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      snapshot_task_detail() :: %{
        "Description" => String.t(),
        "DiskImageSize" => float(),
        "Encrypted" => boolean(),
        "Format" => String.t(),
        "KmsKeyId" => String.t(),
        "Progress" => String.t(),
        "SnapshotId" => String.t(),
        "Status" => String.t(),
        "StatusMessage" => String.t(),
        "Url" => String.t(),
        "UserBucket" => user_bucket_details()
      }
      
  """
  @type snapshot_task_detail() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_private_ip_address_config() :: %{
        "Primary" => boolean(),
        "PrivateIpAddress" => String.t()
      }
      
  """
  @type scheduled_instances_private_ip_address_config() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      traffic_mirror_filter_rule() :: %{
        "Description" => String.t(),
        "DestinationCidrBlock" => String.t(),
        "DestinationPortRange" => traffic_mirror_port_range(),
        "Protocol" => integer(),
        "RuleAction" => list(any()),
        "RuleNumber" => integer(),
        "SourceCidrBlock" => String.t(),
        "SourcePortRange" => traffic_mirror_port_range(),
        "Tags" => list(tag()()),
        "TrafficDirection" => list(any()),
        "TrafficMirrorFilterId" => String.t(),
        "TrafficMirrorFilterRuleId" => String.t()
      }
      
  """
  @type traffic_mirror_filter_rule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_spot_fleet_requests_error() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type cancel_spot_fleet_requests_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_capacity_reservations_result() :: %{
        "CapacityReservations" => list(capacity_reservation()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_capacity_reservations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fleet_instances_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("FleetId") => String.t()
      }
      
  """
  @type describe_fleet_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_image_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("ImageId") => String.t()
      }
      
  """
  @type describe_image_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_verified_access_trust_provider_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("VerifiedAccessTrustProviderId") => String.t()
      }
      
  """
  @type delete_verified_access_trust_provider_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_classic_link_dns_support_request() :: %{
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VpcIds") => list(String.t()())
      }
      
  """
  @type describe_vpc_classic_link_dns_support_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_discovered_resource_cidrs_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("IpamResourceDiscoveryId") => String.t(),
        required("ResourceRegion") => String.t()
      }
      
  """
  @type get_ipam_discovered_resource_cidrs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fast_launch_snapshot_configuration_request() :: %{
        "TargetResourceCount" => integer()
      }
      
  """
  @type fast_launch_snapshot_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_local_gateway_route_table_virtual_interface_group_association_result() :: %{
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociation" => local_gateway_route_table_virtual_interface_group_association()
      }
      
  """
  @type delete_local_gateway_route_table_virtual_interface_group_association_result() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      modify_capacity_reservation_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_capacity_reservation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      search_local_gateway_routes_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("LocalGatewayRouteTableId") => String.t()
      }
      
  """
  @type search_local_gateway_routes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_placement_group_result() :: %{
        "PlacementGroup" => placement_group()
      }
      
  """
  @type create_placement_group_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      confirm_product_instance_result() :: %{
        "OwnerId" => String.t(),
        "Return" => boolean()
      }
      
  """
  @type confirm_product_instance_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      history_record_entry() :: %{
        "EventInformation" => event_information(),
        "EventType" => list(any()),
        "Timestamp" => non_neg_integer()
      }
      
  """
  @type history_record_entry() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_topology() :: %{
        "AvailabilityZone" => String.t(),
        "GroupName" => String.t(),
        "InstanceId" => String.t(),
        "InstanceType" => String.t(),
        "NetworkNodes" => list(String.t()()),
        "ZoneId" => String.t()
      }
      
  """
  @type instance_topology() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      filter_port_range() :: %{
        "FromPort" => integer(),
        "ToPort" => integer()
      }
      
  """
  @type filter_port_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      snapshot_info() :: %{
        "Description" => String.t(),
        "Encrypted" => boolean(),
        "OutpostArn" => String.t(),
        "OwnerId" => String.t(),
        "Progress" => String.t(),
        "SnapshotId" => String.t(),
        "SseType" => list(any()),
        "StartTime" => non_neg_integer(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "VolumeId" => String.t(),
        "VolumeSize" => integer()
      }
      
  """
  @type snapshot_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      user_bucket_details() :: %{
        "S3Bucket" => String.t(),
        "S3Key" => String.t()
      }
      
  """
  @type user_bucket_details() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_image_request() :: %{
        optional("DryRun") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type enable_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_endpoint() :: %{
        "ApplicationDomain" => String.t(),
        "AttachmentType" => list(any()),
        "CreationTime" => String.t(),
        "DeletionTime" => String.t(),
        "Description" => String.t(),
        "DeviceValidationDomain" => String.t(),
        "DomainCertificateArn" => String.t(),
        "EndpointDomain" => String.t(),
        "EndpointType" => list(any()),
        "LastUpdatedTime" => String.t(),
        "LoadBalancerOptions" => verified_access_endpoint_load_balancer_options(),
        "NetworkInterfaceOptions" => verified_access_endpoint_eni_options(),
        "SecurityGroupIds" => list(String.t()()),
        "SseSpecification" => verified_access_sse_specification_response(),
        "Status" => verified_access_endpoint_status(),
        "Tags" => list(tag()()),
        "VerifiedAccessEndpointId" => String.t(),
        "VerifiedAccessGroupId" => String.t(),
        "VerifiedAccessInstanceId" => String.t()
      }
      
  """
  @type verified_access_endpoint() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_address_history_request() :: %{
        optional("DryRun") => boolean(),
        optional("EndTime") => non_neg_integer(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("StartTime") => non_neg_integer(),
        optional("VpcId") => String.t(),
        required("Cidr") => String.t(),
        required("IpamScopeId") => String.t()
      }
      
  """
  @type get_ipam_address_history_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_image_deprecation_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type enable_image_deprecation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_instance_logging_configurations_result() :: %{
        "LoggingConfigurations" => list(verified_access_instance_logging_configuration()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_verified_access_instance_logging_configurations_result() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      describe_scheduled_instance_availability_result() :: %{
        "NextToken" => String.t(),
        "ScheduledInstanceAvailabilitySet" => list(scheduled_instance_availability()())
      }
      
  """
  @type describe_scheduled_instance_availability_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_snapshot_from_recycle_bin_result() :: %{
        "Description" => String.t(),
        "Encrypted" => boolean(),
        "OutpostArn" => String.t(),
        "OwnerId" => String.t(),
        "Progress" => String.t(),
        "SnapshotId" => String.t(),
        "SseType" => list(any()),
        "StartTime" => non_neg_integer(),
        "State" => list(any()),
        "VolumeId" => String.t(),
        "VolumeSize" => integer()
      }
      
  """
  @type restore_snapshot_from_recycle_bin_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_route_request() :: %{
        optional("CarrierGatewayId") => String.t(),
        optional("CoreNetworkArn") => String.t(),
        optional("DestinationCidrBlock") => String.t(),
        optional("DestinationIpv6CidrBlock") => String.t(),
        optional("DestinationPrefixListId") => String.t(),
        optional("DryRun") => boolean(),
        optional("EgressOnlyInternetGatewayId") => String.t(),
        optional("GatewayId") => String.t(),
        optional("InstanceId") => String.t(),
        optional("LocalGatewayId") => String.t(),
        optional("LocalTarget") => boolean(),
        optional("NatGatewayId") => String.t(),
        optional("NetworkInterfaceId") => String.t(),
        optional("TransitGatewayId") => String.t(),
        optional("VpcEndpointId") => String.t(),
        optional("VpcPeeringConnectionId") => String.t(),
        required("RouteTableId") => String.t()
      }
      
  """
  @type replace_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      connection_tracking_specification_response() :: %{
        "TcpEstablishedTimeout" => integer(),
        "UdpStreamTimeout" => integer(),
        "UdpTimeout" => integer()
      }
      
  """
  @type connection_tracking_specification_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      move_byoip_cidr_to_ipam_request() :: %{
        optional("DryRun") => boolean(),
        required("Cidr") => String.t(),
        required("IpamPoolId") => String.t(),
        required("IpamPoolOwner") => String.t()
      }
      
  """
  @type move_byoip_cidr_to_ipam_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_connect_peer() :: %{
        "ConnectPeerConfiguration" => transit_gateway_connect_peer_configuration(),
        "CreationTime" => non_neg_integer(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayConnectPeerId" => String.t()
      }
      
  """
  @type transit_gateway_connect_peer() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_serial_console_access_status_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type get_serial_console_access_status_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_status_result() :: %{
        "InstanceStatuses" => list(instance_status()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_instance_status_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_endpoint_eni_options() :: %{
        "NetworkInterfaceId" => String.t(),
        "Port" => integer(),
        "Protocol" => list(any())
      }
      
  """
  @type create_verified_access_endpoint_eni_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam() :: %{
        "DefaultResourceDiscoveryAssociationId" => String.t(),
        "DefaultResourceDiscoveryId" => String.t(),
        "Description" => String.t(),
        "IpamArn" => String.t(),
        "IpamId" => String.t(),
        "IpamRegion" => String.t(),
        "OperatingRegions" => list(ipam_operating_region()()),
        "OwnerId" => String.t(),
        "PrivateDefaultScopeId" => String.t(),
        "PublicDefaultScopeId" => String.t(),
        "ResourceDiscoveryAssociationCount" => integer(),
        "ScopeCount" => integer(),
        "State" => list(any()),
        "StateMessage" => String.t(),
        "Tags" => list(tag()()),
        "Tier" => list(any())
      }
      
  """
  @type ipam() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_egress_only_internet_gateways_result() :: %{
        "EgressOnlyInternetGateways" => list(egress_only_internet_gateway()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_egress_only_internet_gateways_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_peering_connection_vpc_info() :: %{
        "CidrBlock" => String.t(),
        "CidrBlockSet" => list(cidr_block()()),
        "Ipv6CidrBlockSet" => list(ipv6_cidr_block()()),
        "OwnerId" => String.t(),
        "PeeringOptions" => vpc_peering_connection_options_description(),
        "Region" => String.t(),
        "VpcId" => String.t()
      }
      
  """
  @type vpc_peering_connection_vpc_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_image_result() :: %{
        "Architecture" => String.t(),
        "Description" => String.t(),
        "Encrypted" => boolean(),
        "Hypervisor" => String.t(),
        "ImageId" => String.t(),
        "ImportTaskId" => String.t(),
        "KmsKeyId" => String.t(),
        "LicenseSpecifications" => list(import_image_license_configuration_response()()),
        "LicenseType" => String.t(),
        "Platform" => String.t(),
        "Progress" => String.t(),
        "SnapshotDetails" => list(snapshot_detail()()),
        "Status" => String.t(),
        "StatusMessage" => String.t(),
        "Tags" => list(tag()()),
        "UsageOperation" => String.t()
      }
      
  """
  @type import_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_tenancy_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceTenancy") => list(any()),
        required("VpcId") => String.t()
      }
      
  """
  @type modify_vpc_tenancy_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_replace_root_volume_task_result() :: %{
        "ReplaceRootVolumeTask" => replace_root_volume_task()
      }
      
  """
  @type create_replace_root_volume_task_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_import_task_result() :: %{
        "ImportTaskId" => String.t(),
        "PreviousState" => String.t(),
        "State" => String.t()
      }
      
  """
  @type cancel_import_task_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_ipv6_address_request() :: %{
        "Ipv6Address" => String.t()
      }
      
  """
  @type instance_ipv6_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      group_identifier() :: %{
        "GroupId" => String.t(),
        "GroupName" => String.t()
      }
      
  """
  @type group_identifier() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_transit_gateway_multicast_domain_associations_result() :: %{
        "Associations" => transit_gateway_multicast_domain_associations()
      }
      
  """
  @type accept_transit_gateway_multicast_domain_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_hosts_request() :: %{
        optional("Filter") => list(filter()()),
        optional("HostIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_hosts_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_traffic_mirror_target_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("GatewayLoadBalancerEndpointId") => String.t(),
        optional("NetworkInterfaceId") => String.t(),
        optional("NetworkLoadBalancerArn") => String.t(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_traffic_mirror_target_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_capacity_block_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("CapacityBlockOfferingId") => String.t(),
        required("InstancePlatform") => list(any())
      }
      
  """
  @type purchase_capacity_block_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_event_window_request() :: %{
        optional("CronExpression") => String.t(),
        optional("DryRun") => boolean(),
        optional("Name") => String.t(),
        optional("TimeRanges") => list(instance_event_window_time_range_request()()),
        required("InstanceEventWindowId") => String.t()
      }
      
  """
  @type modify_instance_event_window_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      certificate_authentication_request() :: %{
        "ClientRootCertificateChainArn" => String.t()
      }
      
  """
  @type certificate_authentication_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_image_deregistration_protection_result() :: %{
        "Return" => String.t()
      }
      
  """
  @type disable_image_deregistration_protection_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      neuron_info() :: %{
        "NeuronDevices" => list(neuron_device_info()()),
        "TotalNeuronDeviceMemoryInMiB" => integer()
      }
      
  """
  @type neuron_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_operating_region() :: %{
        "RegionName" => String.t()
      }
      
  """
  @type ipam_operating_region() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_snapshot_tier_result() :: %{
        "SnapshotId" => String.t(),
        "TieringStartTime" => non_neg_integer()
      }
      
  """
  @type modify_snapshot_tier_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_fleet_tag_specification() :: %{
        "ResourceType" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type spot_fleet_tag_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_hosts_result() :: %{
        "Successful" => list(String.t()()),
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type modify_hosts_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_transit_gateway_route_table_propagation_result() :: %{
        "Propagation" => transit_gateway_propagation()
      }
      
  """
  @type enable_transit_gateway_route_table_propagation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_vpn_connection_device_types_result() :: %{
        "NextToken" => String.t(),
        "VpnConnectionDeviceTypes" => list(vpn_connection_device_type()())
      }
      
  """
  @type get_vpn_connection_device_types_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_capacity_reservation_fleets_result() :: %{
        "FailedFleetCancellations" => list(failed_capacity_reservation_fleet_cancellation_result()()),
        "SuccessfulFleetCancellations" => list(capacity_reservation_fleet_cancellation_state()())
      }
      
  """
  @type cancel_capacity_reservation_fleets_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      analysis_packet_header() :: %{
        "DestinationAddresses" => list(String.t()()),
        "DestinationPortRanges" => list(port_range()()),
        "Protocol" => String.t(),
        "SourceAddresses" => list(String.t()()),
        "SourcePortRanges" => list(port_range()())
      }
      
  """
  @type analysis_packet_header() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      directory_service_authentication_request() :: %{
        "DirectoryId" => String.t()
      }
      
  """
  @type directory_service_authentication_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_key_pair_request() :: %{
        optional("DryRun") => boolean(),
        optional("KeyName") => String.t(),
        optional("KeyPairId") => String.t()
      }
      
  """
  @type delete_key_pair_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_snapshots_request() :: %{
        optional("CopyTagsFromSource") => list(any()),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("OutpostArn") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("InstanceSpecification") => instance_specification()
      }
      
  """
  @type create_snapshots_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      assign_private_ip_addresses_request() :: %{
        optional("AllowReassignment") => boolean(),
        optional("Ipv4PrefixCount") => integer(),
        optional("Ipv4Prefixes") => list(String.t()()),
        optional("PrivateIpAddresses") => list(String.t()()),
        optional("SecondaryPrivateIpAddressCount") => integer(),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type assign_private_ip_addresses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_classic_link_instances_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("InstanceIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_classic_link_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_vpn_connection_device_types_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type get_vpn_connection_device_types_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_discovered_public_addresses_result() :: %{
        "IpamDiscoveredPublicAddresses" => list(ipam_discovered_public_address()()),
        "NextToken" => String.t(),
        "OldestSampleTime" => non_neg_integer()
      }
      
  """
  @type get_ipam_discovered_public_addresses_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_to_s3_task_specification() :: %{
        "ContainerFormat" => list(any()),
        "DiskImageFormat" => list(any()),
        "S3Bucket" => String.t(),
        "S3Prefix" => String.t()
      }
      
  """
  @type export_to_s3_task_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      assign_private_nat_gateway_address_result() :: %{
        "NatGatewayAddresses" => list(nat_gateway_address()()),
        "NatGatewayId" => String.t()
      }
      
  """
  @type assign_private_nat_gateway_address_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_id_format_request() :: %{
        optional("Resource") => String.t()
      }
      
  """
  @type describe_id_format_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_route_table_announcements_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayRouteTableAnnouncementIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_route_table_announcements_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_image_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("RoleName") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("DiskImageFormat") => list(any()),
        required("ImageId") => String.t(),
        required("S3ExportLocation") => export_task_s3_location_request()
      }
      
  """
  @type export_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_identity_id_format_result() :: %{
        "Statuses" => list(id_format()())
      }
      
  """
  @type describe_identity_id_format_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_attachment_ena_srd_udp_specification() :: %{
        "EnaSrdUdpEnabled" => boolean()
      }
      
  """
  @type instance_attachment_ena_srd_udp_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_endpoint_load_balancer_options() :: %{
        "Port" => integer(),
        "Protocol" => list(any()),
        "SubnetIds" => list(String.t()())
      }
      
  """
  @type modify_verified_access_endpoint_load_balancer_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_managed_prefix_list_request() :: %{
        optional("AddEntries") => list(add_prefix_list_entry()()),
        optional("CurrentVersion") => float(),
        optional("DryRun") => boolean(),
        optional("MaxEntries") => integer(),
        optional("PrefixListName") => String.t(),
        optional("RemoveEntries") => list(remove_prefix_list_entry()()),
        required("PrefixListId") => String.t()
      }
      
  """
  @type modify_managed_prefix_list_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_cpu_options() :: %{
        "AmdSevSnp" => list(any()),
        "CoreCount" => integer(),
        "ThreadsPerCore" => integer()
      }
      
  """
  @type launch_template_cpu_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attachment_ena_srd_specification() :: %{
        "EnaSrdEnabled" => boolean(),
        "EnaSrdUdpSpecification" => attachment_ena_srd_udp_specification()
      }
      
  """
  @type attachment_ena_srd_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_byoip_cidrs_request() :: %{
        optional("DryRun") => boolean(),
        optional("NextToken") => String.t(),
        required("MaxResults") => integer()
      }
      
  """
  @type describe_byoip_cidrs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_insights_access_scope_content() :: %{
        "ExcludePaths" => list(access_scope_path()()),
        "MatchPaths" => list(access_scope_path()()),
        "NetworkInsightsAccessScopeId" => String.t()
      }
      
  """
  @type network_insights_access_scope_content() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_insights_path_result() :: %{
        "NetworkInsightsPath" => network_insights_path()
      }
      
  """
  @type create_network_insights_path_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_transit_gateway_vpc_attachment_result() :: %{
        "TransitGatewayVpcAttachment" => transit_gateway_vpc_attachment()
      }
      
  """
  @type reject_transit_gateway_vpc_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_attribute_request() :: %{
        optional("Attribute") => list(any()),
        optional("BlockDeviceMappings") => list(instance_block_device_mapping_specification()()),
        optional("DisableApiStop") => attribute_boolean_value(),
        optional("DisableApiTermination") => attribute_boolean_value(),
        optional("DryRun") => boolean(),
        optional("EbsOptimized") => attribute_boolean_value(),
        optional("EnaSupport") => attribute_boolean_value(),
        optional("Groups") => list(String.t()()),
        optional("InstanceInitiatedShutdownBehavior") => attribute_value(),
        optional("InstanceType") => attribute_value(),
        optional("Kernel") => attribute_value(),
        optional("Ramdisk") => attribute_value(),
        optional("SourceDestCheck") => attribute_boolean_value(),
        optional("SriovNetSupport") => attribute_value(),
        optional("UserData") => blob_attribute_value(),
        optional("Value") => String.t(),
        required("InstanceId") => String.t()
      }
      
  """
  @type modify_instance_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_import_snapshot_tasks_result() :: %{
        "ImportSnapshotTasks" => list(import_snapshot_task()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_import_snapshot_tasks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_ipam_resource_discovery_result() :: %{
        "IpamResourceDiscoveryAssociation" => ipam_resource_discovery_association()
      }
      
  """
  @type associate_ipam_resource_discovery_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_group_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("VerifiedAccessInstanceId") => String.t(),
        required("VerifiedAccessGroupId") => String.t()
      }
      
  """
  @type modify_verified_access_group_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_instance_logging_configurations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VerifiedAccessInstanceIds") => list(String.t()())
      }
      
  """
  @type describe_verified_access_instance_logging_configurations_request() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      ipv6_prefix_specification_request() :: %{
        "Ipv6Prefix" => String.t()
      }
      
  """
  @type ipv6_prefix_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_acl_entry_request() :: %{
        optional("DryRun") => boolean(),
        required("Egress") => boolean(),
        required("NetworkAclId") => String.t(),
        required("RuleNumber") => integer()
      }
      
  """
  @type delete_network_acl_entry_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_route_table_propagation() :: %{
        "ResourceId" => String.t(),
        "ResourceType" => list(any()),
        "State" => list(any()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayRouteTableAnnouncementId" => String.t()
      }
      
  """
  @type transit_gateway_route_table_propagation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_launch_template_specification_request() :: %{
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "Version" => String.t()
      }
      
  """
  @type fleet_launch_template_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_flow_logs_result() :: %{
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type delete_flow_logs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_address_history_record() :: %{
        "ResourceCidr" => String.t(),
        "ResourceComplianceStatus" => list(any()),
        "ResourceId" => String.t(),
        "ResourceName" => String.t(),
        "ResourceOverlapStatus" => list(any()),
        "ResourceOwnerId" => String.t(),
        "ResourceRegion" => String.t(),
        "ResourceType" => list(any()),
        "SampledEndTime" => non_neg_integer(),
        "SampledStartTime" => non_neg_integer(),
        "VpcId" => String.t()
      }
      
  """
  @type ipam_address_history_record() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_security_group_rules_result() :: %{
        "NextToken" => String.t(),
        "SecurityGroupRules" => list(security_group_rule()())
      }
      
  """
  @type describe_security_group_rules_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_moving_addresses_result() :: %{
        "MovingAddressStatuses" => list(moving_address_status()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_moving_addresses_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_instance_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        required("VerifiedAccessInstanceId") => String.t()
      }
      
  """
  @type modify_verified_access_instance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enclave_options_request() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type enclave_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_group() :: %{
        "GroupArn" => String.t(),
        "OwnerId" => String.t()
      }
      
  """
  @type capacity_reservation_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_subnet_cidr_reservations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("SubnetId") => String.t()
      }
      
  """
  @type get_subnet_cidr_reservations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_coip_pools_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("PoolIds") => list(String.t()())
      }
      
  """
  @type describe_coip_pools_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_route_tables_result() :: %{
        "NextToken" => String.t(),
        "RouteTables" => list(route_table()())
      }
      
  """
  @type describe_route_tables_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_volume_result() :: %{
        "ConversionTask" => conversion_task()
      }
      
  """
  @type import_volume_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_coip_cidr_request() :: %{
        optional("DryRun") => boolean(),
        required("Cidr") => String.t(),
        required("CoipPoolId") => String.t()
      }
      
  """
  @type create_coip_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_security_groups_for_vpc_result() :: %{
        "NextToken" => String.t(),
        "SecurityGroupForVpcs" => list(security_group_for_vpc()())
      }
      
  """
  @type get_security_groups_for_vpc_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_traffic_mirror_filter_rule_result() :: %{
        "ClientToken" => String.t(),
        "TrafficMirrorFilterRule" => traffic_mirror_filter_rule()
      }
      
  """
  @type create_traffic_mirror_filter_rule_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_elastic_inference_accelerator() :: %{
        "Count" => integer(),
        "Type" => String.t()
      }
      
  """
  @type launch_template_elastic_inference_accelerator() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_instance_network_interface_specification() :: %{
        "AssociateCarrierIpAddress" => boolean(),
        "AssociatePublicIpAddress" => boolean(),
        "ConnectionTrackingSpecification" => connection_tracking_specification(),
        "DeleteOnTermination" => boolean(),
        "Description" => String.t(),
        "DeviceIndex" => integer(),
        "EnaSrdSpecification" => launch_template_ena_srd_specification(),
        "Groups" => list(String.t()()),
        "InterfaceType" => String.t(),
        "Ipv4PrefixCount" => integer(),
        "Ipv4Prefixes" => list(ipv4_prefix_specification_response()()),
        "Ipv6AddressCount" => integer(),
        "Ipv6Addresses" => list(instance_ipv6_address()()),
        "Ipv6PrefixCount" => integer(),
        "Ipv6Prefixes" => list(ipv6_prefix_specification_response()()),
        "NetworkCardIndex" => integer(),
        "NetworkInterfaceId" => String.t(),
        "PrimaryIpv6" => boolean(),
        "PrivateIpAddress" => String.t(),
        "PrivateIpAddresses" => list(private_ip_address_specification()()),
        "SecondaryPrivateIpAddressCount" => integer(),
        "SubnetId" => String.t()
      }
      
  """
  @type launch_template_instance_network_interface_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associated_role() :: %{
        "AssociatedRoleArn" => String.t(),
        "CertificateS3BucketName" => String.t(),
        "CertificateS3ObjectKey" => String.t(),
        "EncryptionKmsKeyId" => String.t()
      }
      
  """
  @type associated_role() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_iam_instance_profile_specification() :: %{
        "Arn" => String.t(),
        "Name" => String.t()
      }
      
  """
  @type launch_template_iam_instance_profile_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      elastic_gpu_health() :: %{
        "Status" => list(any())
      }
      
  """
  @type elastic_gpu_health() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_transit_gateway_policy_table_result() :: %{
        "Association" => transit_gateway_policy_table_association()
      }
      
  """
  @type disassociate_transit_gateway_policy_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_route_request() :: %{
        optional("DryRun") => boolean(),
        required("DestinationCidrBlock") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type delete_transit_gateway_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_reserved_instances_exchange_quote_request() :: %{
        optional("DryRun") => boolean(),
        optional("TargetConfigurations") => list(target_configuration_request()()),
        required("ReservedInstanceIds") => list(String.t()())
      }
      
  """
  @type get_reserved_instances_exchange_quote_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_resource_discovery() :: %{
        "Description" => String.t(),
        "IpamResourceDiscoveryArn" => String.t(),
        "IpamResourceDiscoveryId" => String.t(),
        "IpamResourceDiscoveryRegion" => String.t(),
        "IsDefault" => boolean(),
        "OperatingRegions" => list(ipam_operating_region()()),
        "OwnerId" => String.t(),
        "State" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type ipam_resource_discovery() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_fast_snapshot_restores_request() :: %{
        optional("DryRun") => boolean(),
        required("AvailabilityZones") => list(String.t()()),
        required("SourceSnapshotIds") => list(String.t()())
      }
      
  """
  @type enable_fast_snapshot_restores_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_endpoints_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcEndpointIds") => list(String.t()())
      }
      
  """
  @type delete_vpc_endpoints_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateways_result() :: %{
        "NextToken" => String.t(),
        "TransitGateways" => list(transit_gateway()())
      }
      
  """
  @type describe_transit_gateways_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_vpc_cidr_block_result() :: %{
        "CidrBlockAssociation" => vpc_cidr_block_association(),
        "Ipv6CidrBlockAssociation" => vpc_ipv6_cidr_block_association(),
        "VpcId" => String.t()
      }
      
  """
  @type associate_vpc_cidr_block_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_managed_prefix_list_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("PrefixListId") => String.t()
      }
      
  """
  @type get_managed_prefix_list_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_principal_id_format_result() :: %{
        "NextToken" => String.t(),
        "Principals" => list(principal_id_format()())
      }
      
  """
  @type describe_principal_id_format_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_maintenance_options_request() :: %{
        optional("AutoRecovery") => list(any()),
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t()
      }
      
  """
  @type modify_instance_maintenance_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      placement_group_info() :: %{
        "SupportedStrategies" => list(list(any())())
      }
      
  """
  @type placement_group_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_capacity_reservation_fleet_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_capacity_reservation_fleet_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_price_history_result() :: %{
        "NextToken" => String.t(),
        "SpotPriceHistory" => list(spot_price()())
      }
      
  """
  @type describe_spot_price_history_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_volume_result() :: %{
        "VolumeModification" => volume_modification()
      }
      
  """
  @type modify_volume_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_virtual_interfaces_result() :: %{
        "LocalGatewayVirtualInterfaces" => list(local_gateway_virtual_interface()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_local_gateway_virtual_interfaces_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_addresses_request() :: %{
        optional("AllocationIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("PublicIps") => list(String.t()())
      }
      
  """
  @type describe_addresses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_connection() :: %{
        "Category" => String.t(),
        "CoreNetworkArn" => String.t(),
        "CoreNetworkAttachmentArn" => String.t(),
        "CustomerGatewayConfiguration" => String.t(),
        "CustomerGatewayId" => String.t(),
        "GatewayAssociationState" => list(any()),
        "Options" => vpn_connection_options(),
        "Routes" => list(vpn_static_route()()),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayId" => String.t(),
        "Type" => list(any()),
        "VgwTelemetry" => list(vgw_telemetry()()),
        "VpnConnectionId" => String.t(),
        "VpnGatewayId" => String.t()
      }
      
  """
  @type vpn_connection() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      user_data() :: %{
        "Data" => String.t()
      }
      
  """
  @type user_data() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      available_capacity() :: %{
        "AvailableInstanceCapacity" => list(instance_capacity()()),
        "AvailableVCpus" => integer()
      }
      
  """
  @type available_capacity() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_pool_cidrs_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("IpamPoolId") => String.t()
      }
      
  """
  @type get_ipam_pool_cidrs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_instance_requests_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("SpotInstanceRequestIds") => list(String.t()())
      }
      
  """
  @type describe_spot_instance_requests_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_default_vpc_result() :: %{
        "Vpc" => vpc()
      }
      
  """
  @type create_default_vpc_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_tag_specification_request() :: %{
        "ResourceType" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type launch_template_tag_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_local_gateway_route_table_virtual_interface_group_association_result() :: %{
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociation" => local_gateway_route_table_virtual_interface_group_association()
      }
      
  """
  @type create_local_gateway_route_table_virtual_interface_group_association_result() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      create_vpc_result() :: %{
        "Vpc" => vpc()
      }
      
  """
  @type create_vpc_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deprovision_ipam_pool_cidr_result() :: %{
        "IpamPoolCidr" => ipam_pool_cidr()
      }
      
  """
  @type deprovision_ipam_pool_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_root_volume_task() :: %{
        "CompleteTime" => String.t(),
        "DeleteReplacedRootVolume" => boolean(),
        "ImageId" => String.t(),
        "InstanceId" => String.t(),
        "ReplaceRootVolumeTaskId" => String.t(),
        "SnapshotId" => String.t(),
        "StartTime" => String.t(),
        "Tags" => list(tag()()),
        "TaskState" => list(any())
      }
      
  """
  @type replace_root_volume_task() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      target_network() :: %{
        "AssociationId" => String.t(),
        "ClientVpnEndpointId" => String.t(),
        "SecurityGroups" => list(String.t()()),
        "Status" => association_status(),
        "TargetNetworkId" => String.t(),
        "VpcId" => String.t()
      }
      
  """
  @type target_network() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_local_gateway_route_table_vpc_association_result() :: %{
        "LocalGatewayRouteTableVpcAssociation" => local_gateway_route_table_vpc_association()
      }
      
  """
  @type delete_local_gateway_route_table_vpc_association_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      byoasn() :: %{
        "Asn" => String.t(),
        "IpamId" => String.t(),
        "State" => list(any()),
        "StatusMessage" => String.t()
      }
      
  """
  @type byoasn() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_endpoint_eni_options() :: %{
        "Port" => integer(),
        "Protocol" => list(any())
      }
      
  """
  @type modify_verified_access_endpoint_eni_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_verified_access_trust_provider_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("VerifiedAccessInstanceId") => String.t(),
        required("VerifiedAccessTrustProviderId") => String.t()
      }
      
  """
  @type attach_verified_access_trust_provider_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_connect_peer_result() :: %{
        "TransitGatewayConnectPeer" => transit_gateway_connect_peer()
      }
      
  """
  @type delete_transit_gateway_connect_peer_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      search_transit_gateway_multicast_groups_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type search_transit_gateway_multicast_groups_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cidr_block() :: %{
        "CidrBlock" => String.t()
      }
      
  """
  @type cidr_block() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_domain_association() :: %{
        "ResourceId" => String.t(),
        "ResourceOwnerId" => String.t(),
        "ResourceType" => list(any()),
        "Subnet" => subnet_association(),
        "TransitGatewayAttachmentId" => String.t()
      }
      
  """
  @type transit_gateway_multicast_domain_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_trunk_interface_associations_result() :: %{
        "InterfaceAssociations" => list(trunk_interface_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_trunk_interface_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_internet_gateway_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_internet_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_reserved_instances_result() :: %{
        "ReservedInstances" => list(reserved_instances()())
      }
      
  """
  @type describe_reserved_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      credit_specification_request() :: %{
        "CpuCredits" => String.t()
      }
      
  """
  @type credit_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_fleet_launch_specification() :: %{
        "AddressingType" => String.t(),
        "BlockDeviceMappings" => list(block_device_mapping()()),
        "EbsOptimized" => boolean(),
        "IamInstanceProfile" => iam_instance_profile_specification(),
        "ImageId" => String.t(),
        "InstanceRequirements" => instance_requirements(),
        "InstanceType" => list(any()),
        "KernelId" => String.t(),
        "KeyName" => String.t(),
        "Monitoring" => spot_fleet_monitoring(),
        "NetworkInterfaces" => list(instance_network_interface_specification()()),
        "Placement" => spot_placement(),
        "RamdiskId" => String.t(),
        "SecurityGroups" => list(group_identifier()()),
        "SpotPrice" => String.t(),
        "SubnetId" => String.t(),
        "TagSpecifications" => list(spot_fleet_tag_specification()()),
        "UserData" => String.t(),
        "WeightedCapacity" => float()
      }
      
  """
  @type spot_fleet_launch_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_connect_options() :: %{
        "Protocol" => list(any())
      }
      
  """
  @type transit_gateway_connect_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_authorization_rules_result() :: %{
        "AuthorizationRules" => list(authorization_rule()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_client_vpn_authorization_rules_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_reserved_instances_exchange_quote_result() :: %{
        "ExchangeId" => String.t()
      }
      
  """
  @type accept_reserved_instances_exchange_quote_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_placement_score() :: %{
        "AvailabilityZoneId" => String.t(),
        "Region" => String.t(),
        "Score" => integer()
      }
      
  """
  @type spot_placement_score() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fleet_instances_result() :: %{
        "ActiveInstances" => list(active_instance()()),
        "FleetId" => String.t(),
        "NextToken" => String.t()
      }
      
  """
  @type describe_fleet_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_endpoint_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("LoadBalancerOptions") => modify_verified_access_endpoint_load_balancer_options(),
        optional("NetworkInterfaceOptions") => modify_verified_access_endpoint_eni_options(),
        optional("VerifiedAccessGroupId") => String.t(),
        required("VerifiedAccessEndpointId") => String.t()
      }
      
  """
  @type modify_verified_access_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ena_srd_udp_specification_request() :: %{
        "EnaSrdUdpEnabled" => boolean()
      }
      
  """
  @type ena_srd_udp_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_connect_endpoints_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("InstanceConnectEndpointIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_instance_connect_endpoints_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_tags_request() :: %{
        optional("DryRun") => boolean(),
        required("Resources") => list(String.t()()),
        required("Tags") => list(tag()())
      }
      
  """
  @type create_tags_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_insights_access_scope_result() :: %{
        "NetworkInsightsAccessScope" => network_insights_access_scope(),
        "NetworkInsightsAccessScopeContent" => network_insights_access_scope_content()
      }
      
  """
  @type create_network_insights_access_scope_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_peering_attachment() :: %{
        "AccepterTgwInfo" => peering_tgw_info(),
        "AccepterTransitGatewayAttachmentId" => String.t(),
        "CreationTime" => non_neg_integer(),
        "Options" => transit_gateway_peering_attachment_options(),
        "RequesterTgwInfo" => peering_tgw_info(),
        "State" => list(any()),
        "Status" => peering_attachment_status(),
        "Tags" => list(tag()()),
        "TransitGatewayAttachmentId" => String.t()
      }
      
  """
  @type transit_gateway_peering_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      update_security_group_rule_descriptions_ingress_request() :: %{
        optional("DryRun") => boolean(),
        optional("GroupId") => String.t(),
        optional("GroupName") => String.t(),
        optional("IpPermissions") => list(ip_permission()()),
        optional("SecurityGroupRuleDescriptions") => list(security_group_rule_description()())
      }
      
  """
  @type update_security_group_rule_descriptions_ingress_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_endpoint_eni_options() :: %{
        "NetworkInterfaceId" => String.t(),
        "Port" => integer(),
        "Protocol" => list(any())
      }
      
  """
  @type verified_access_endpoint_eni_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_network_acl_association_request() :: %{
        optional("DryRun") => boolean(),
        required("AssociationId") => String.t(),
        required("NetworkAclId") => String.t()
      }
      
  """
  @type replace_network_acl_association_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_connection_device_type() :: %{
        "Platform" => String.t(),
        "Software" => String.t(),
        "Vendor" => String.t(),
        "VpnConnectionDeviceTypeId" => String.t()
      }
      
  """
  @type vpn_connection_device_type() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_request() :: %{
        optional("Cascade") => boolean(),
        optional("DryRun") => boolean(),
        required("IpamId") => String.t()
      }
      
  """
  @type delete_ipam_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_resource_discovery_result() :: %{
        "IpamResourceDiscovery" => ipam_resource_discovery()
      }
      
  """
  @type create_ipam_resource_discovery_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_regions_request() :: %{
        optional("AllRegions") => boolean(),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("RegionNames") => list(String.t()())
      }
      
  """
  @type describe_regions_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deregister_instance_event_notification_attributes_result() :: %{
        "InstanceTagAttribute" => instance_tag_notification_attribute()
      }
      
  """
  @type deregister_instance_event_notification_attributes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      run_scheduled_instances_result() :: %{
        "InstanceIdSet" => list(String.t()())
      }
      
  """
  @type run_scheduled_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      request_spot_launch_specification() :: %{
        "AddressingType" => String.t(),
        "BlockDeviceMappings" => list(block_device_mapping()()),
        "EbsOptimized" => boolean(),
        "IamInstanceProfile" => iam_instance_profile_specification(),
        "ImageId" => String.t(),
        "InstanceType" => list(any()),
        "KernelId" => String.t(),
        "KeyName" => String.t(),
        "Monitoring" => run_instances_monitoring_enabled(),
        "NetworkInterfaces" => list(instance_network_interface_specification()()),
        "Placement" => spot_placement(),
        "RamdiskId" => String.t(),
        "SecurityGroupIds" => list(String.t()()),
        "SecurityGroups" => list(String.t()()),
        "SubnetId" => String.t(),
        "UserData" => String.t()
      }
      
  """
  @type request_spot_launch_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_endpoints_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VerifiedAccessEndpointIds") => list(String.t()()),
        optional("VerifiedAccessGroupId") => String.t(),
        optional("VerifiedAccessInstanceId") => String.t()
      }
      
  """
  @type describe_verified_access_endpoints_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      region() :: %{
        "Endpoint" => String.t(),
        "OptInStatus" => String.t(),
        "RegionName" => String.t()
      }
      
  """
  @type region() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_policy_tables_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayPolicyTableIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_policy_tables_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      classic_load_balancer() :: %{
        "Name" => String.t()
      }
      
  """
  @type classic_load_balancer() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_attribute() :: %{
        "BlockDeviceMappings" => list(instance_block_device_mapping()()),
        "DisableApiStop" => attribute_boolean_value(),
        "DisableApiTermination" => attribute_boolean_value(),
        "EbsOptimized" => attribute_boolean_value(),
        "EnaSupport" => attribute_boolean_value(),
        "EnclaveOptions" => enclave_options(),
        "Groups" => list(group_identifier()()),
        "InstanceId" => String.t(),
        "InstanceInitiatedShutdownBehavior" => attribute_value(),
        "InstanceType" => attribute_value(),
        "KernelId" => attribute_value(),
        "ProductCodes" => list(product_code()()),
        "RamdiskId" => attribute_value(),
        "RootDeviceName" => attribute_value(),
        "SourceDestCheck" => attribute_boolean_value(),
        "SriovNetSupport" => attribute_value(),
        "UserData" => attribute_value()
      }
      
  """
  @type instance_attribute() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_credit_specifications_result() :: %{
        "InstanceCreditSpecifications" => list(instance_credit_specification()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_instance_credit_specifications_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_capacity_reservation_result() :: %{
        "CapacityReservation" => capacity_reservation()
      }
      
  """
  @type create_capacity_reservation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deregister_image_request() :: %{
        optional("DryRun") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type deregister_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_classic_link_vpc_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type attach_classic_link_vpc_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase2_d_h_group_numbers_list_value() :: %{
        "Value" => integer()
      }
      
  """
  @type phase2_d_h_group_numbers_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_acl_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("VpcId") => String.t()
      }
      
  """
  @type create_network_acl_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_connection_notifications_result() :: %{
        "ConnectionNotificationSet" => list(connection_notification()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_vpc_endpoint_connection_notifications_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_pools_result() :: %{
        "IpamPools" => list(ipam_pool()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_ipam_pools_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_authentication_request() :: %{
        "ActiveDirectory" => directory_service_authentication_request(),
        "FederatedAuthentication" => federated_authentication_request(),
        "MutualAuthentication" => certificate_authentication_request(),
        "Type" => list(any())
      }
      
  """
  @type client_vpn_authentication_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_internet_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("InternetGatewayId") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type attach_internet_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provision_ipam_pool_cidr_result() :: %{
        "IpamPoolCidr" => ipam_pool_cidr()
      }
      
  """
  @type provision_ipam_pool_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_cidr_authorization_context() :: %{
        "Message" => String.t(),
        "Signature" => String.t()
      }
      
  """
  @type ipam_cidr_authorization_context() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_traffic_mirror_filter_rule_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DestinationPortRange") => traffic_mirror_port_range_request(),
        optional("DryRun") => boolean(),
        optional("Protocol") => integer(),
        optional("SourcePortRange") => traffic_mirror_port_range_request(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("DestinationCidrBlock") => String.t(),
        required("RuleAction") => list(any()),
        required("RuleNumber") => integer(),
        required("SourceCidrBlock") => String.t(),
        required("TrafficDirection") => list(any()),
        required("TrafficMirrorFilterId") => String.t()
      }
      
  """
  @type create_traffic_mirror_filter_rule_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_interfaces_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NetworkInterfaceIds") => list(String.t()()),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_network_interfaces_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_trust_provider_device_options() :: %{
        "PublicSigningKeyUrl" => String.t(),
        "TenantId" => String.t()
      }
      
  """
  @type create_verified_access_trust_provider_device_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_launch_template_versions_response_success_item() :: %{
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "VersionNumber" => float()
      }
      
  """
  @type delete_launch_template_versions_response_success_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_interface_attribute_result() :: %{
        "AssociatePublicIpAddress" => boolean(),
        "Attachment" => network_interface_attachment(),
        "Description" => attribute_value(),
        "Groups" => list(group_identifier()()),
        "NetworkInterfaceId" => String.t(),
        "SourceDestCheck" => attribute_boolean_value()
      }
      
  """
  @type describe_network_interface_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_attachment_bgp_configuration() :: %{
        "BgpStatus" => list(any()),
        "PeerAddress" => String.t(),
        "PeerAsn" => float(),
        "TransitGatewayAddress" => String.t(),
        "TransitGatewayAsn" => float()
      }
      
  """
  @type transit_gateway_attachment_bgp_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_reserved_instances_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("OfferingClass") => list(any()),
        optional("OfferingType") => list(any()),
        optional("ReservedInstancesIds") => list(String.t()())
      }
      
  """
  @type describe_reserved_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_bundle_tasks_result() :: %{
        "BundleTasks" => list(bundle_task()())
      }
      
  """
  @type describe_bundle_tasks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_vpn_connection_device_sample_configuration_request() :: %{
        optional("DryRun") => boolean(),
        optional("InternetKeyExchangeVersion") => String.t(),
        required("VpnConnectionDeviceTypeId") => String.t(),
        required("VpnConnectionId") => String.t()
      }
      
  """
  @type get_vpn_connection_device_sample_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface_association() :: %{
        "AllocationId" => String.t(),
        "AssociationId" => String.t(),
        "CarrierIp" => String.t(),
        "CustomerOwnedIp" => String.t(),
        "IpOwnerId" => String.t(),
        "PublicDnsName" => String.t(),
        "PublicIp" => String.t()
      }
      
  """
  @type network_interface_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instances_id() :: %{
        "ReservedInstancesId" => String.t()
      }
      
  """
  @type reserved_instances_id() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_instance_result() :: %{
        "ConversionTask" => conversion_task()
      }
      
  """
  @type import_instance_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_route_request() :: %{
        optional("Blackhole") => boolean(),
        optional("DryRun") => boolean(),
        optional("TransitGatewayAttachmentId") => String.t(),
        required("DestinationCidrBlock") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type create_transit_gateway_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpn_connections_result() :: %{
        "VpnConnections" => list(vpn_connection()())
      }
      
  """
  @type describe_vpn_connections_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      terminate_client_vpn_connections_result() :: %{
        "ClientVpnEndpointId" => String.t(),
        "ConnectionStatuses" => list(terminate_connection_status()()),
        "Username" => String.t()
      }
      
  """
  @type terminate_client_vpn_connections_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_instance_tpm_ek_pub_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t(),
        required("KeyFormat") => list(any()),
        required("KeyType") => list(any())
      }
      
  """
  @type get_instance_tpm_ek_pub_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_replace_root_volume_tasks_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("ReplaceRootVolumeTaskIds") => list(String.t()())
      }
      
  """
  @type describe_replace_root_volume_tasks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_aws_network_performance_metric_subscription_result() :: %{
        "Output" => boolean()
      }
      
  """
  @type enable_aws_network_performance_metric_subscription_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_security_group_request() :: %{
        optional("DryRun") => boolean(),
        optional("GroupId") => String.t(),
        optional("GroupName") => String.t()
      }
      
  """
  @type delete_security_group_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_classic_link() :: %{
        "ClassicLinkEnabled" => boolean(),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type vpc_classic_link() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_egress_only_internet_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("EgressOnlyInternetGatewayId") => String.t()
      }
      
  """
  @type delete_egress_only_internet_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_public_ipv4_pools_result() :: %{
        "NextToken" => String.t(),
        "PublicIpv4Pools" => list(public_ipv4_pool()())
      }
      
  """
  @type describe_public_ipv4_pools_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_ipv6_cidr_block_association() :: %{
        "AssociationId" => String.t(),
        "Ipv6CidrBlock" => String.t(),
        "Ipv6CidrBlockState" => vpc_cidr_block_state(),
        "Ipv6Pool" => String.t(),
        "NetworkBorderGroup" => String.t()
      }
      
  """
  @type vpc_ipv6_cidr_block_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_queued_reserved_instances_request() :: %{
        optional("DryRun") => boolean(),
        required("ReservedInstancesIds") => list(String.t()())
      }
      
  """
  @type delete_queued_reserved_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_image_block_public_access_result() :: %{
        "ImageBlockPublicAccessState" => list(any())
      }
      
  """
  @type disable_image_block_public_access_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      private_dns_name_configuration() :: %{
        "Name" => String.t(),
        "State" => list(any()),
        "Type" => String.t(),
        "Value" => String.t()
      }
      
  """
  @type private_dns_name_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_peering_connection_result() :: %{
        "VpcPeeringConnection" => vpc_peering_connection()
      }
      
  """
  @type create_vpc_peering_connection_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_launch_template_version_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("LaunchTemplateId") => String.t(),
        optional("LaunchTemplateName") => String.t(),
        optional("ResolveAlias") => boolean(),
        optional("SourceVersion") => String.t(),
        optional("VersionDescription") => String.t(),
        required("LaunchTemplateData") => request_launch_template_data()
      }
      
  """
  @type create_launch_template_version_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_client_vpn_endpoint_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_client_vpn_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_external_resource_verification_token_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("IpamId") => String.t()
      }
      
  """
  @type create_ipam_external_resource_verification_token_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_transit_gateway_multicast_domain_result() :: %{
        "Associations" => transit_gateway_multicast_domain_associations()
      }
      
  """
  @type disassociate_transit_gateway_multicast_domain_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_spot_fleet_request_request() :: %{
        optional("Context") => String.t(),
        optional("ExcessCapacityTerminationPolicy") => list(any()),
        optional("LaunchTemplateConfigs") => list(launch_template_config()()),
        optional("OnDemandTargetCapacity") => integer(),
        optional("TargetCapacity") => integer(),
        required("SpotFleetRequestId") => String.t()
      }
      
  """
  @type modify_spot_fleet_request_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_subnet_request() :: %{
        optional("DryRun") => boolean(),
        required("SubnetId") => String.t()
      }
      
  """
  @type delete_subnet_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_capacity_reservation_request() :: %{
        optional("AvailabilityZone") => String.t(),
        optional("AvailabilityZoneId") => String.t(),
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("EbsOptimized") => boolean(),
        optional("EndDate") => non_neg_integer(),
        optional("EndDateType") => list(any()),
        optional("EphemeralStorage") => boolean(),
        optional("InstanceMatchCriteria") => list(any()),
        optional("OutpostArn") => String.t(),
        optional("PlacementGroupArn") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("Tenancy") => list(any()),
        required("InstanceCount") => integer(),
        required("InstancePlatform") => list(any()),
        required("InstanceType") => String.t()
      }
      
  """
  @type create_capacity_reservation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_insights_analyses_result() :: %{
        "NetworkInsightsAnalyses" => list(network_insights_analysis()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_network_insights_analyses_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_fast_launch_result() :: %{
        "ImageId" => String.t(),
        "LaunchTemplate" => fast_launch_launch_template_specification_response(),
        "MaxParallelLaunches" => integer(),
        "OwnerId" => String.t(),
        "ResourceType" => list(any()),
        "SnapshotConfiguration" => fast_launch_snapshot_configuration_response(),
        "State" => list(any()),
        "StateTransitionReason" => String.t(),
        "StateTransitionTime" => non_neg_integer()
      }
      
  """
  @type disable_fast_launch_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_traffic_mirror_sessions_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TrafficMirrorSessionIds") => list(String.t()())
      }
      
  """
  @type describe_traffic_mirror_sessions_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_carrier_gateway_result() :: %{
        "CarrierGateway" => carrier_gateway()
      }
      
  """
  @type delete_carrier_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("InstanceId") => String.t()
      }
      
  """
  @type describe_instance_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_client_vpn_route_result() :: %{
        "Status" => client_vpn_route_status()
      }
      
  """
  @type create_client_vpn_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_options_request() :: %{
        "AllocationStrategy" => list(any()),
        "InstanceInterruptionBehavior" => list(any()),
        "InstancePoolsToUseCount" => integer(),
        "MaintenanceStrategies" => fleet_spot_maintenance_strategies_request(),
        "MaxTotalPrice" => String.t(),
        "MinTargetCapacity" => integer(),
        "SingleAvailabilityZone" => boolean(),
        "SingleInstanceType" => boolean()
      }
      
  """
  @type spot_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fleets_instances() :: %{
        "InstanceIds" => list(String.t()()),
        "InstanceType" => list(any()),
        "LaunchTemplateAndOverrides" => launch_template_and_overrides_response(),
        "Lifecycle" => list(any()),
        "Platform" => list(any())
      }
      
  """
  @type describe_fleets_instances() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_address_transfer_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("Address") => String.t()
      }
      
  """
  @type accept_address_transfer_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      start_network_insights_access_scope_analysis_result() :: %{
        "NetworkInsightsAccessScopeAnalysis" => network_insights_access_scope_analysis()
      }
      
  """
  @type start_network_insights_access_scope_analysis_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_instance_maintenance_options_request() :: %{
        "AutoRecovery" => list(any())
      }
      
  """
  @type launch_template_instance_maintenance_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_security_groups_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("GroupIds") => list(String.t()()),
        optional("GroupNames") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_security_groups_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_import_task_request() :: %{
        optional("CancelReason") => String.t(),
        optional("DryRun") => boolean(),
        optional("ImportTaskId") => String.t()
      }
      
  """
  @type cancel_import_task_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_client_vpn_route_request() :: %{
        optional("DryRun") => boolean(),
        optional("TargetVpcSubnetId") => String.t(),
        required("ClientVpnEndpointId") => String.t(),
        required("DestinationCidrBlock") => String.t()
      }
      
  """
  @type delete_client_vpn_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_tunnel_options_result() :: %{
        "VpnConnection" => vpn_connection()
      }
      
  """
  @type modify_vpn_tunnel_options_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_card_info() :: %{
        "BaselineBandwidthInGbps" => float(),
        "MaximumNetworkInterfaces" => integer(),
        "NetworkCardIndex" => integer(),
        "NetworkPerformance" => String.t(),
        "PeakBandwidthInGbps" => float()
      }
      
  """
  @type network_card_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      id_format() :: %{
        "Deadline" => non_neg_integer(),
        "Resource" => String.t(),
        "UseLongIds" => boolean()
      }
      
  """
  @type id_format() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_capacity_reservations_request() :: %{
        optional("CapacityReservationIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_capacity_reservations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      host_properties() :: %{
        "Cores" => integer(),
        "InstanceFamily" => String.t(),
        "InstanceType" => String.t(),
        "Sockets" => integer(),
        "TotalVCpus" => integer()
      }
      
  """
  @type host_properties() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_launch_template_overrides() :: %{
        "AvailabilityZone" => String.t(),
        "ImageId" => String.t(),
        "InstanceRequirements" => instance_requirements(),
        "InstanceType" => list(any()),
        "MaxPrice" => String.t(),
        "Placement" => placement_response(),
        "Priority" => float(),
        "SubnetId" => String.t(),
        "WeightedCapacity" => float()
      }
      
  """
  @type fleet_launch_template_overrides() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_fleet_request_history_response() :: %{
        "HistoryRecords" => list(history_record()()),
        "LastEvaluatedTime" => non_neg_integer(),
        "NextToken" => String.t(),
        "SpotFleetRequestId" => String.t(),
        "StartTime" => non_neg_integer()
      }
      
  """
  @type describe_spot_fleet_request_history_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_route_table_announcements_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayRouteTableAnnouncements" => list(transit_gateway_route_table_announcement()())
      }
      
  """
  @type describe_transit_gateway_route_table_announcements_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      detach_classic_link_vpc_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type detach_classic_link_vpc_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_export_tasks_result() :: %{
        "ExportTasks" => list(export_task()())
      }
      
  """
  @type describe_export_tasks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_transit_gateway_route_table_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type disassociate_transit_gateway_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_classic_link_dns_support_result() :: %{
        "NextToken" => String.t(),
        "Vpcs" => list(classic_link_dns_support()())
      }
      
  """
  @type describe_vpc_classic_link_dns_support_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_carrier_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("CarrierGatewayId") => String.t()
      }
      
  """
  @type delete_carrier_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_dhcp_options_result() :: %{
        "DhcpOptions" => list(dhcp_options()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_dhcp_options_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_placement_group_request() :: %{
        optional("DryRun") => boolean(),
        optional("GroupName") => String.t(),
        optional("PartitionCount") => integer(),
        optional("SpreadLevel") => list(any()),
        optional("Strategy") => list(any()),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_placement_group_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_transit_gateway_options() :: %{
        "AddTransitGatewayCidrBlocks" => list(String.t()()),
        "AmazonSideAsn" => float(),
        "AssociationDefaultRouteTableId" => String.t(),
        "AutoAcceptSharedAttachments" => list(any()),
        "DefaultRouteTableAssociation" => list(any()),
        "DefaultRouteTablePropagation" => list(any()),
        "DnsSupport" => list(any()),
        "PropagationDefaultRouteTableId" => String.t(),
        "RemoveTransitGatewayCidrBlocks" => list(String.t()()),
        "SecurityGroupReferencingSupport" => list(any()),
        "VpnEcmpSupport" => list(any())
      }
      
  """
  @type modify_transit_gateway_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_fast_snapshot_restore_state_error() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type enable_fast_snapshot_restore_state_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      nitro_tpm_info() :: %{
        "SupportedVersions" => list(String.t()())
      }
      
  """
  @type nitro_tpm_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      propagating_vgw() :: %{
        "GatewayId" => String.t()
      }
      
  """
  @type propagating_vgw() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_nat_gateway_request() :: %{
        optional("AllocationId") => String.t(),
        optional("ClientToken") => String.t(),
        optional("ConnectivityType") => list(any()),
        optional("DryRun") => boolean(),
        optional("PrivateIpAddress") => String.t(),
        optional("SecondaryAllocationIds") => list(String.t()()),
        optional("SecondaryPrivateIpAddressCount") => integer(),
        optional("SecondaryPrivateIpAddresses") => list(String.t()()),
        optional("TagSpecifications") => list(tag_specification()()),
        required("SubnetId") => String.t()
      }
      
  """
  @type create_nat_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      tag() :: %{
        "Key" => String.t(),
        "Value" => String.t()
      }
      
  """
  @type tag() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      advertise_byoip_cidr_request() :: %{
        optional("Asn") => String.t(),
        optional("DryRun") => boolean(),
        optional("NetworkBorderGroup") => String.t(),
        required("Cidr") => String.t()
      }
      
  """
  @type advertise_byoip_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_export_tasks_request() :: %{
        optional("ExportTaskIds") => list(String.t()()),
        optional("Filters") => list(filter()())
      }
      
  """
  @type describe_export_tasks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_vpc_attachment_result() :: %{
        "TransitGatewayVpcAttachment" => transit_gateway_vpc_attachment()
      }
      
  """
  @type delete_transit_gateway_vpc_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_subnet_cidr_reservation_request() :: %{
        optional("DryRun") => boolean(),
        required("SubnetCidrReservationId") => String.t()
      }
      
  """
  @type delete_subnet_cidr_reservation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      access_scope_path() :: %{
        "Destination" => path_statement(),
        "Source" => path_statement(),
        "ThroughResources" => list(through_resources_statement()())
      }
      
  """
  @type access_scope_path() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_result() :: %{
        "TransitGateway" => transit_gateway()
      }
      
  """
  @type create_transit_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      request_filter_port_range() :: %{
        "FromPort" => integer(),
        "ToPort" => integer()
      }
      
  """
  @type request_filter_port_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      elastic_inference_accelerator() :: %{
        "Count" => integer(),
        "Type" => String.t()
      }
      
  """
  @type elastic_inference_accelerator() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      allocate_ipam_pool_cidr_request() :: %{
        optional("AllowedCidrs") => list(String.t()()),
        optional("Cidr") => String.t(),
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DisallowedCidrs") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("NetmaskLength") => integer(),
        optional("PreviewNextCidr") => boolean(),
        required("IpamPoolId") => String.t()
      }
      
  """
  @type allocate_ipam_pool_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_locked_snapshots_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("SnapshotIds") => list(String.t()())
      }
      
  """
  @type describe_locked_snapshots_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_mac_hosts_result() :: %{
        "MacHosts" => list(mac_host()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_mac_hosts_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_reserved_instances_listing_result() :: %{
        "ReservedInstancesListings" => list(reserved_instances_listing()())
      }
      
  """
  @type create_reserved_instances_listing_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_launch_templates_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LaunchTemplateIds") => list(String.t()()),
        optional("LaunchTemplateNames") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_launch_templates_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_transit_gateway_peering_attachment_result() :: %{
        "TransitGatewayPeeringAttachment" => transit_gateway_peering_attachment()
      }
      
  """
  @type accept_transit_gateway_peering_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      successful_instance_credit_specification_item() :: %{
        "InstanceId" => String.t()
      }
      
  """
  @type successful_instance_credit_specification_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      icmp_type_code() :: %{
        "Code" => integer(),
        "Type" => integer()
      }
      
  """
  @type icmp_type_code() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_transit_gateway_multicast_domain_request() :: %{
        optional("DryRun") => boolean(),
        required("SubnetIds") => list(String.t()()),
        required("TransitGatewayAttachmentId") => String.t(),
        required("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type associate_transit_gateway_multicast_domain_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_cidr_block_association() :: %{
        "AssociationId" => String.t(),
        "CidrBlock" => String.t(),
        "CidrBlockState" => vpc_cidr_block_state()
      }
      
  """
  @type vpc_cidr_block_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      path_request_filter() :: %{
        "DestinationAddress" => String.t(),
        "DestinationPortRange" => request_filter_port_range(),
        "SourceAddress" => String.t(),
        "SourcePortRange" => request_filter_port_range()
      }
      
  """
  @type path_request_filter() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_hibernation_options() :: %{
        "Configured" => boolean()
      }
      
  """
  @type launch_template_hibernation_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_traffic_mirror_target_result() :: %{
        "ClientToken" => String.t(),
        "TrafficMirrorTarget" => traffic_mirror_target()
      }
      
  """
  @type create_traffic_mirror_target_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unassign_ipv6_addresses_request() :: %{
        optional("Ipv6Addresses") => list(String.t()()),
        optional("Ipv6Prefixes") => list(String.t()()),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type unassign_ipv6_addresses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_connect_peers_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayConnectPeerIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_connect_peers_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_host_reservation_offerings_request() :: %{
        optional("Filter") => list(filter()()),
        optional("MaxDuration") => integer(),
        optional("MaxResults") => integer(),
        optional("MinDuration") => integer(),
        optional("NextToken") => String.t(),
        optional("OfferingId") => String.t()
      }
      
  """
  @type describe_host_reservation_offerings_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_discovered_public_addresses_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("AddressRegion") => String.t(),
        required("IpamResourceDiscoveryId") => String.t()
      }
      
  """
  @type get_ipam_discovered_public_addresses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unassign_private_nat_gateway_address_result() :: %{
        "NatGatewayAddresses" => list(nat_gateway_address()()),
        "NatGatewayId" => String.t()
      }
      
  """
  @type unassign_private_nat_gateway_address_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv4_prefix_specification_request() :: %{
        "Ipv4Prefix" => String.t()
      }
      
  """
  @type ipv4_prefix_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_carrier_gateway_result() :: %{
        "CarrierGateway" => carrier_gateway()
      }
      
  """
  @type create_carrier_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_credit_specification() :: %{
        "CpuCredits" => String.t(),
        "InstanceId" => String.t()
      }
      
  """
  @type instance_credit_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      allocate_address_request() :: %{
        optional("Address") => String.t(),
        optional("CustomerOwnedIpv4Pool") => String.t(),
        optional("Domain") => list(any()),
        optional("DryRun") => boolean(),
        optional("NetworkBorderGroup") => String.t(),
        optional("PublicIpv4Pool") => String.t(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type allocate_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("VpcId") => String.t()
      }
      
  """
  @type describe_vpc_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_image_request() :: %{
        optional("BlockDeviceMappings") => list(block_device_mapping()()),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("NoReboot") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("InstanceId") => String.t(),
        required("Name") => String.t()
      }
      
  """
  @type create_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_instance_event_window_request() :: %{
        optional("DryRun") => boolean(),
        required("AssociationTarget") => instance_event_window_association_request(),
        required("InstanceEventWindowId") => String.t()
      }
      
  """
  @type associate_instance_event_window_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      private_ip_address_specification() :: %{
        "Primary" => boolean(),
        "PrivateIpAddress" => String.t()
      }
      
  """
  @type private_ip_address_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_volumes_modifications_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VolumeIds") => list(String.t()())
      }
      
  """
  @type describe_volumes_modifications_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_enclave_options_request() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type launch_template_enclave_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_security_group_rules_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("SecurityGroupRuleIds") => list(String.t()())
      }
      
  """
  @type describe_security_group_rules_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      hibernation_options_request() :: %{
        "Configured" => boolean()
      }
      
  """
  @type hibernation_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_public_address_tags() :: %{
        "EipTags" => list(ipam_public_address_tag()())
      }
      
  """
  @type ipam_public_address_tags() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_launch_template_config() :: %{
        "LaunchTemplateSpecification" => fleet_launch_template_specification(),
        "Overrides" => list(fleet_launch_template_overrides()())
      }
      
  """
  @type fleet_launch_template_config() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_event_window_result() :: %{
        "InstanceEventWindow" => instance_event_window()
      }
      
  """
  @type modify_instance_event_window_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_availability_zone_group_request() :: %{
        optional("DryRun") => boolean(),
        required("GroupName") => String.t(),
        required("OptInStatus") => list(any())
      }
      
  """
  @type modify_availability_zone_group_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      price_schedule() :: %{
        "Active" => boolean(),
        "CurrencyCode" => list(any()),
        "Price" => float(),
        "Term" => float()
      }
      
  """
  @type price_schedule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      allocate_hosts_request() :: %{
        optional("AssetIds") => list(String.t()()),
        optional("AutoPlacement") => list(any()),
        optional("ClientToken") => String.t(),
        optional("HostMaintenance") => list(any()),
        optional("HostRecovery") => list(any()),
        optional("InstanceFamily") => String.t(),
        optional("InstanceType") => String.t(),
        optional("OutpostArn") => String.t(),
        optional("Quantity") => integer(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("AvailabilityZone") => String.t()
      }
      
  """
  @type allocate_hosts_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_default_credit_specification_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceFamily") => list(any())
      }
      
  """
  @type get_default_credit_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_trust_provider() :: %{
        "CreationTime" => String.t(),
        "Description" => String.t(),
        "DeviceOptions" => device_options(),
        "DeviceTrustProviderType" => list(any()),
        "LastUpdatedTime" => String.t(),
        "OidcOptions" => oidc_options(),
        "PolicyReferenceName" => String.t(),
        "SseSpecification" => verified_access_sse_specification_response(),
        "Tags" => list(tag()()),
        "TrustProviderType" => list(any()),
        "UserTrustProviderType" => list(any()),
        "VerifiedAccessTrustProviderId" => String.t()
      }
      
  """
  @type verified_access_trust_provider() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      response_error() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type response_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateways_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LocalGatewayIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_local_gateways_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_pools_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IpamPoolIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_ipam_pools_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_spot_maintenance_strategies() :: %{
        "CapacityRebalance" => fleet_spot_capacity_rebalance()
      }
      
  """
  @type fleet_spot_maintenance_strategies() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_datafeed_subscription() :: %{
        "Bucket" => String.t(),
        "Fault" => spot_instance_state_fault(),
        "OwnerId" => String.t(),
        "Prefix" => String.t(),
        "State" => list(any())
      }
      
  """
  @type spot_datafeed_subscription() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_to_s3_task() :: %{
        "ContainerFormat" => list(any()),
        "DiskImageFormat" => list(any()),
        "S3Bucket" => String.t(),
        "S3Key" => String.t()
      }
      
  """
  @type export_to_s3_task() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      snapshot_tier_status() :: %{
        "ArchivalCompleteTime" => non_neg_integer(),
        "LastTieringOperationStatus" => list(any()),
        "LastTieringOperationStatusDetail" => String.t(),
        "LastTieringProgress" => integer(),
        "LastTieringStartTime" => non_neg_integer(),
        "OwnerId" => String.t(),
        "RestoreExpiryTime" => non_neg_integer(),
        "SnapshotId" => String.t(),
        "Status" => list(any()),
        "StorageTier" => list(any()),
        "Tags" => list(tag()()),
        "VolumeId" => String.t()
      }
      
  """
  @type snapshot_tier_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      dhcp_options() :: %{
        "DhcpConfigurations" => list(dhcp_configuration()()),
        "DhcpOptionsId" => String.t(),
        "OwnerId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type dhcp_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_policy_tables_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayPolicyTables" => list(transit_gateway_policy_table()())
      }
      
  """
  @type describe_transit_gateway_policy_tables_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_route_table_association() :: %{
        "ResourceId" => String.t(),
        "ResourceType" => list(any()),
        "State" => list(any()),
        "TransitGatewayAttachmentId" => String.t()
      }
      
  """
  @type transit_gateway_route_table_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_datafeed_subscription_result() :: %{
        "SpotDatafeedSubscription" => spot_datafeed_subscription()
      }
      
  """
  @type describe_spot_datafeed_subscription_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accelerator_count_request() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type accelerator_count_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_fast_snapshot_restore_success_item() :: %{
        "AvailabilityZone" => String.t(),
        "DisabledTime" => non_neg_integer(),
        "DisablingTime" => non_neg_integer(),
        "EnabledTime" => non_neg_integer(),
        "EnablingTime" => non_neg_integer(),
        "OptimizingTime" => non_neg_integer(),
        "OwnerAlias" => String.t(),
        "OwnerId" => String.t(),
        "SnapshotId" => String.t(),
        "State" => list(any()),
        "StateTransitionReason" => String.t()
      }
      
  """
  @type enable_fast_snapshot_restore_success_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      hibernation_options() :: %{
        "Configured" => boolean()
      }
      
  """
  @type hibernation_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_traffic_mirror_targets_result() :: %{
        "NextToken" => String.t(),
        "TrafficMirrorTargets" => list(traffic_mirror_target()())
      }
      
  """
  @type describe_traffic_mirror_targets_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fast_launch_snapshot_configuration_response() :: %{
        "TargetResourceCount" => integer()
      }
      
  """
  @type fast_launch_snapshot_configuration_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      bundle_instance_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t(),
        required("Storage") => storage()
      }
      
  """
  @type bundle_instance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_transit_gateway_route_result() :: %{
        "Route" => transit_gateway_route()
      }
      
  """
  @type replace_transit_gateway_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      iam_instance_profile_association() :: %{
        "AssociationId" => String.t(),
        "IamInstanceProfile" => iam_instance_profile(),
        "InstanceId" => String.t(),
        "State" => list(any()),
        "Timestamp" => non_neg_integer()
      }
      
  """
  @type iam_instance_profile_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_snapshot_result() :: %{
        "Description" => String.t(),
        "ImportTaskId" => String.t(),
        "SnapshotTaskDetail" => snapshot_task_detail(),
        "Tags" => list(tag()())
      }
      
  """
  @type import_snapshot_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_instance_metadata_defaults_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type get_instance_metadata_defaults_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      lock_snapshot_request() :: %{
        optional("CoolOffPeriod") => integer(),
        optional("DryRun") => boolean(),
        optional("ExpirationDate") => non_neg_integer(),
        optional("LockDuration") => integer(),
        required("LockMode") => list(any()),
        required("SnapshotId") => String.t()
      }
      
  """
  @type lock_snapshot_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_default_vpc_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type create_default_vpc_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_endpoint_connection_notifications_request() :: %{
        optional("DryRun") => boolean(),
        required("ConnectionNotificationIds") => list(String.t()())
      }
      
  """
  @type delete_vpc_endpoint_connection_notifications_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      private_dns_name_options_request() :: %{
        "EnableResourceNameDnsAAAARecord" => boolean(),
        "EnableResourceNameDnsARecord" => boolean(),
        "HostnameType" => list(any())
      }
      
  """
  @type private_dns_name_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_requirements_with_metadata_request() :: %{
        "ArchitectureTypes" => list(list(any())()),
        "InstanceRequirements" => instance_requirements_request(),
        "VirtualizationTypes" => list(list(any())())
      }
      
  """
  @type instance_requirements_with_metadata_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_spot_capacity_rebalance_request() :: %{
        "ReplacementStrategy" => list(any()),
        "TerminationDelay" => integer()
      }
      
  """
  @type fleet_spot_capacity_rebalance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_credit_specification_request() :: %{
        "CpuCredits" => String.t(),
        "InstanceId" => String.t()
      }
      
  """
  @type instance_credit_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      state_reason() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type state_reason() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_trust_provider_device_options() :: %{
        "PublicSigningKeyUrl" => String.t()
      }
      
  """
  @type modify_verified_access_trust_provider_device_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_endpoint_result() :: %{
        "VerifiedAccessEndpoint" => verified_access_endpoint()
      }
      
  """
  @type create_verified_access_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_target_response() :: %{
        "CapacityReservationId" => String.t(),
        "CapacityReservationResourceGroupArn" => String.t()
      }
      
  """
  @type capacity_reservation_target_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      tag_description() :: %{
        "Key" => String.t(),
        "ResourceId" => String.t(),
        "ResourceType" => list(any()),
        "Value" => String.t()
      }
      
  """
  @type tag_description() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_service_payer_responsibility_result() :: %{
        "ReturnValue" => boolean()
      }
      
  """
  @type modify_vpc_endpoint_service_payer_responsibility_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_ebs_encryption_by_default_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type enable_ebs_encryption_by_default_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_default_credit_specification_result() :: %{
        "InstanceFamilyCreditSpecification" => instance_family_credit_specification()
      }
      
  """
  @type modify_default_credit_specification_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_policy_table_result() :: %{
        "TransitGatewayPolicyTable" => transit_gateway_policy_table()
      }
      
  """
  @type delete_transit_gateway_policy_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_block_device_mapping() :: %{
        "DeviceName" => String.t(),
        "Ebs" => scheduled_instances_ebs(),
        "NoDevice" => String.t(),
        "VirtualName" => String.t()
      }
      
  """
  @type scheduled_instances_block_device_mapping() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      confirm_product_instance_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t(),
        required("ProductCode") => String.t()
      }
      
  """
  @type confirm_product_instance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      resource_statement_request() :: %{
        "ResourceTypes" => list(String.t()()),
        "Resources" => list(String.t()())
      }
      
  """
  @type resource_statement_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ip_range() :: %{
        "CidrIp" => String.t(),
        "Description" => String.t()
      }
      
  """
  @type ip_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_monitoring() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type scheduled_instances_monitoring() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_managed_prefix_list_version_result() :: %{
        "PrefixList" => managed_prefix_list()
      }
      
  """
  @type restore_managed_prefix_list_version_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_transit_gateway_vpc_attachment_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type reject_transit_gateway_vpc_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_traffic_mirror_target_result() :: %{
        "TrafficMirrorTargetId" => String.t()
      }
      
  """
  @type delete_traffic_mirror_target_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_ebs_encryption_by_default_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type disable_ebs_encryption_by_default_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_subnet_cidr_block_result() :: %{
        "Ipv6CidrBlockAssociation" => subnet_ipv6_cidr_block_association(),
        "SubnetId" => String.t()
      }
      
  """
  @type associate_subnet_cidr_block_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_image_block_public_access_state_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type get_image_block_public_access_state_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      on_demand_options() :: %{
        "AllocationStrategy" => list(any()),
        "CapacityReservationOptions" => capacity_reservation_options(),
        "MaxTotalPrice" => String.t(),
        "MinTargetCapacity" => integer(),
        "SingleAvailabilityZone" => boolean(),
        "SingleInstanceType" => boolean()
      }
      
  """
  @type on_demand_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_resource_discovery_associations_result() :: %{
        "IpamResourceDiscoveryAssociations" => list(ipam_resource_discovery_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_ipam_resource_discovery_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface_attachment() :: %{
        "AttachTime" => non_neg_integer(),
        "AttachmentId" => String.t(),
        "DeleteOnTermination" => boolean(),
        "DeviceIndex" => integer(),
        "EnaSrdSpecification" => attachment_ena_srd_specification(),
        "InstanceId" => String.t(),
        "InstanceOwnerId" => String.t(),
        "NetworkCardIndex" => integer(),
        "Status" => list(any())
      }
      
  """
  @type network_interface_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instances_modification_result() :: %{
        "ReservedInstancesId" => String.t(),
        "TargetConfiguration" => reserved_instances_configuration()
      }
      
  """
  @type reserved_instances_modification_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_connect_request_bgp_options() :: %{
        "PeerAsn" => float()
      }
      
  """
  @type transit_gateway_connect_request_bgp_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_connection_result() :: %{
        "VpnConnection" => vpn_connection()
      }
      
  """
  @type modify_vpn_connection_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase1_integrity_algorithms_request_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type phase1_integrity_algorithms_request_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      image_disk_container() :: %{
        "Description" => String.t(),
        "DeviceName" => String.t(),
        "Format" => String.t(),
        "SnapshotId" => String.t(),
        "Url" => String.t(),
        "UserBucket" => user_bucket()
      }
      
  """
  @type image_disk_container() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_client_vpn_endpoint_result() :: %{
        "ClientVpnEndpointId" => String.t(),
        "DnsName" => String.t(),
        "Status" => client_vpn_endpoint_status()
      }
      
  """
  @type create_client_vpn_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      coip_pool() :: %{
        "LocalGatewayRouteTableId" => String.t(),
        "PoolArn" => String.t(),
        "PoolCidrs" => list(String.t()()),
        "PoolId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type coip_pool() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_state_change() :: %{
        "CurrentState" => instance_state(),
        "InstanceId" => String.t(),
        "PreviousState" => instance_state()
      }
      
  """
  @type instance_state_change() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      remove_prefix_list_entry() :: %{
        "Cidr" => String.t()
      }
      
  """
  @type remove_prefix_list_entry() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_fleets_result() :: %{
        "SuccessfulFleetDeletions" => list(delete_fleet_success_item()()),
        "UnsuccessfulFleetDeletions" => list(delete_fleet_error_item()())
      }
      
  """
  @type delete_fleets_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_fpga_image_attribute_result() :: %{
        "FpgaImageAttribute" => fpga_image_attribute()
      }
      
  """
  @type modify_fpga_image_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_event_window_time_range_request() :: %{
        "EndHour" => integer(),
        "EndWeekDay" => list(any()),
        "StartHour" => integer(),
        "StartWeekDay" => list(any())
      }
      
  """
  @type instance_event_window_time_range_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_capacity_rebalance() :: %{
        "ReplacementStrategy" => list(any()),
        "TerminationDelay" => integer()
      }
      
  """
  @type spot_capacity_rebalance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpn_connection_route_request() :: %{
        required("DestinationCidrBlock") => String.t(),
        required("VpnConnectionId") => String.t()
      }
      
  """
  @type delete_vpn_connection_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_maintenance_options_result() :: %{
        "AutoRecovery" => list(any()),
        "InstanceId" => String.t()
      }
      
  """
  @type modify_instance_maintenance_options_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_iam_instance_profile_association_request() :: %{
        required("AssociationId") => String.t(),
        required("IamInstanceProfile") => iam_instance_profile_specification()
      }
      
  """
  @type replace_iam_instance_profile_association_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_classic_link_result() :: %{
        "Vpcs" => list(vpc_classic_link()())
      }
      
  """
  @type describe_vpc_classic_link_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      target_capacity_specification() :: %{
        "DefaultTargetCapacityType" => list(any()),
        "OnDemandTargetCapacity" => integer(),
        "SpotTargetCapacity" => integer(),
        "TargetCapacityUnitType" => list(any()),
        "TotalTargetCapacity" => integer()
      }
      
  """
  @type target_capacity_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_family_credit_specification() :: %{
        "CpuCredits" => String.t(),
        "InstanceFamily" => list(any())
      }
      
  """
  @type instance_family_credit_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      route_table_association() :: %{
        "AssociationState" => route_table_association_state(),
        "GatewayId" => String.t(),
        "Main" => boolean(),
        "RouteTableAssociationId" => String.t(),
        "RouteTableId" => String.t(),
        "SubnetId" => String.t()
      }
      
  """
  @type route_table_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_fpga_image_result() :: %{
        "FpgaImageGlobalId" => String.t(),
        "FpgaImageId" => String.t()
      }
      
  """
  @type create_fpga_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_address_result() :: %{
        "AssociationId" => String.t()
      }
      
  """
  @type associate_address_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      copy_fpga_image_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("Name") => String.t(),
        required("SourceFpgaImageId") => String.t(),
        required("SourceRegion") => String.t()
      }
      
  """
  @type copy_fpga_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_instance_event_window_request() :: %{
        optional("CronExpression") => String.t(),
        optional("DryRun") => boolean(),
        optional("Name") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("TimeRanges") => list(instance_event_window_time_range_request()())
      }
      
  """
  @type create_instance_event_window_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cpu_options() :: %{
        "AmdSevSnp" => list(any()),
        "CoreCount" => integer(),
        "ThreadsPerCore" => integer()
      }
      
  """
  @type cpu_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_dhcp_options_request() :: %{
        optional("DryRun") => boolean(),
        required("DhcpOptionsId") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type associate_dhcp_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateways_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateways_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_fast_launch_request() :: %{
        optional("DryRun") => boolean(),
        optional("Force") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type disable_fast_launch_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_metadata_options_request() :: %{
        optional("DryRun") => boolean(),
        optional("HttpEndpoint") => list(any()),
        optional("HttpProtocolIpv6") => list(any()),
        optional("HttpPutResponseHopLimit") => integer(),
        optional("HttpTokens") => list(any()),
        optional("InstanceMetadataTags") => list(any()),
        required("InstanceId") => String.t()
      }
      
  """
  @type modify_instance_metadata_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      analysis_acl_rule() :: %{
        "Cidr" => String.t(),
        "Egress" => boolean(),
        "PortRange" => port_range(),
        "Protocol" => String.t(),
        "RuleAction" => String.t(),
        "RuleNumber" => integer()
      }
      
  """
  @type analysis_acl_rule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_service_configuration_request() :: %{
        optional("AcceptanceRequired") => boolean(),
        optional("AddGatewayLoadBalancerArns") => list(String.t()()),
        optional("AddNetworkLoadBalancerArns") => list(String.t()()),
        optional("AddSupportedIpAddressTypes") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("PrivateDnsName") => String.t(),
        optional("RemoveGatewayLoadBalancerArns") => list(String.t()()),
        optional("RemoveNetworkLoadBalancerArns") => list(String.t()()),
        optional("RemovePrivateDnsName") => boolean(),
        optional("RemoveSupportedIpAddressTypes") => list(String.t()()),
        required("ServiceId") => String.t()
      }
      
  """
  @type modify_vpc_endpoint_service_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_pool_source_resource() :: %{
        "ResourceId" => String.t(),
        "ResourceOwner" => String.t(),
        "ResourceRegion" => String.t(),
        "ResourceType" => list(any())
      }
      
  """
  @type ipam_pool_source_resource() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_block_offering() :: %{
        "AvailabilityZone" => String.t(),
        "CapacityBlockDurationHours" => integer(),
        "CapacityBlockOfferingId" => String.t(),
        "CurrencyCode" => String.t(),
        "EndDate" => non_neg_integer(),
        "InstanceCount" => integer(),
        "InstanceType" => String.t(),
        "StartDate" => non_neg_integer(),
        "Tenancy" => list(any()),
        "UpfrontFee" => String.t()
      }
      
  """
  @type capacity_block_offering() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instances() :: %{
        "AvailabilityZone" => String.t(),
        "CurrencyCode" => list(any()),
        "Duration" => float(),
        "End" => non_neg_integer(),
        "FixedPrice" => float(),
        "InstanceCount" => integer(),
        "InstanceTenancy" => list(any()),
        "InstanceType" => list(any()),
        "OfferingClass" => list(any()),
        "OfferingType" => list(any()),
        "ProductDescription" => list(any()),
        "RecurringCharges" => list(recurring_charge()()),
        "ReservedInstancesId" => String.t(),
        "Scope" => list(any()),
        "Start" => non_neg_integer(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "UsagePrice" => float()
      }
      
  """
  @type reserved_instances() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_ipam_resource_discovery_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("IpamId") => String.t(),
        required("IpamResourceDiscoveryId") => String.t()
      }
      
  """
  @type associate_ipam_resource_discovery_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_endpoint_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type client_vpn_endpoint_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_ebs_block_device() :: %{
        "DeleteOnTermination" => boolean(),
        "Encrypted" => boolean(),
        "Iops" => integer(),
        "KmsKeyId" => String.t(),
        "SnapshotId" => String.t(),
        "Throughput" => integer(),
        "VolumeSize" => integer(),
        "VolumeType" => list(any())
      }
      
  """
  @type launch_template_ebs_block_device() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      route() :: %{
        "CarrierGatewayId" => String.t(),
        "CoreNetworkArn" => String.t(),
        "DestinationCidrBlock" => String.t(),
        "DestinationIpv6CidrBlock" => String.t(),
        "DestinationPrefixListId" => String.t(),
        "EgressOnlyInternetGatewayId" => String.t(),
        "GatewayId" => String.t(),
        "InstanceId" => String.t(),
        "InstanceOwnerId" => String.t(),
        "LocalGatewayId" => String.t(),
        "NatGatewayId" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "Origin" => list(any()),
        "State" => list(any()),
        "TransitGatewayId" => String.t(),
        "VpcPeeringConnectionId" => String.t()
      }
      
  """
  @type route() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      mac_host() :: %{
        "HostId" => String.t(),
        "MacOSLatestSupportedVersions" => list(String.t()())
      }
      
  """
  @type mac_host() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_volumes_modifications_result() :: %{
        "NextToken" => String.t(),
        "VolumesModifications" => list(volume_modification()())
      }
      
  """
  @type describe_volumes_modifications_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_restore_image_task_request() :: %{
        optional("DryRun") => boolean(),
        optional("Name") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("Bucket") => String.t(),
        required("ObjectKey") => String.t()
      }
      
  """
  @type create_restore_image_task_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_instance_event_window_request() :: %{
        optional("DryRun") => boolean(),
        required("AssociationTarget") => instance_event_window_disassociation_request(),
        required("InstanceEventWindowId") => String.t()
      }
      
  """
  @type disassociate_instance_event_window_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_private_dns_name_options() :: %{
        "EnableResourceNameDnsAAAARecord" => boolean(),
        "EnableResourceNameDnsARecord" => boolean(),
        "HostnameType" => list(any())
      }
      
  """
  @type launch_template_private_dns_name_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ip_permission() :: %{
        "FromPort" => integer(),
        "IpProtocol" => String.t(),
        "IpRanges" => list(ip_range()()),
        "Ipv6Ranges" => list(ipv6_range()()),
        "PrefixListIds" => list(prefix_list_id()()),
        "ToPort" => integer(),
        "UserIdGroupPairs" => list(user_id_group_pair()())
      }
      
  """
  @type ip_permission() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_classic_link_instances_result() :: %{
        "Instances" => list(classic_link_instance()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_classic_link_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_placement_request() :: %{
        "Affinity" => String.t(),
        "AvailabilityZone" => String.t(),
        "GroupId" => String.t(),
        "GroupName" => String.t(),
        "HostId" => String.t(),
        "HostResourceGroupArn" => String.t(),
        "PartitionNumber" => integer(),
        "SpreadDomain" => String.t(),
        "Tenancy" => list(any())
      }
      
  """
  @type launch_template_placement_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_insights_access_scopes_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NetworkInsightsAccessScopeIds") => list(String.t()()),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_network_insights_access_scopes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_connect_response_options() :: %{
        "Enabled" => boolean(),
        "LambdaFunctionArn" => String.t(),
        "Status" => client_vpn_endpoint_attribute_status()
      }
      
  """
  @type client_connect_response_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_resource_discoveries_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IpamResourceDiscoveryIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_ipam_resource_discoveries_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_group_result() :: %{
        "VerifiedAccessGroup" => verified_access_group()
      }
      
  """
  @type create_verified_access_group_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fast_snapshot_restore_success_item() :: %{
        "AvailabilityZone" => String.t(),
        "DisabledTime" => non_neg_integer(),
        "DisablingTime" => non_neg_integer(),
        "EnabledTime" => non_neg_integer(),
        "EnablingTime" => non_neg_integer(),
        "OptimizingTime" => non_neg_integer(),
        "OwnerAlias" => String.t(),
        "OwnerId" => String.t(),
        "SnapshotId" => String.t(),
        "State" => list(any()),
        "StateTransitionReason" => String.t()
      }
      
  """
  @type describe_fast_snapshot_restore_success_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_spot_fleet_request_response() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_spot_fleet_request_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      maintenance_details() :: %{
        "LastMaintenanceApplied" => non_neg_integer(),
        "MaintenanceAutoAppliedAfter" => non_neg_integer(),
        "PendingMaintenance" => String.t()
      }
      
  """
  @type maintenance_details() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_volume_request() :: %{
        optional("DryRun") => boolean(),
        required("Device") => String.t(),
        required("InstanceId") => String.t(),
        required("VolumeId") => String.t()
      }
      
  """
  @type attach_volume_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_egress_only_internet_gateway_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("VpcId") => String.t()
      }
      
  """
  @type create_egress_only_internet_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_transit_gateway_multicast_domain_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("SubnetIds") => list(String.t()()),
        optional("TransitGatewayAttachmentId") => String.t(),
        optional("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type accept_transit_gateway_multicast_domain_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_fleet_requests_response() :: %{
        "NextToken" => String.t(),
        "SpotFleetRequestConfigs" => list(spot_fleet_request_config()())
      }
      
  """
  @type describe_spot_fleet_requests_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_acl_association() :: %{
        "NetworkAclAssociationId" => String.t(),
        "NetworkAclId" => String.t(),
        "SubnetId" => String.t()
      }
      
  """
  @type network_acl_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_image_result() :: %{
        "ImageId" => String.t()
      }
      
  """
  @type register_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_traffic_mirror_sessions_result() :: %{
        "NextToken" => String.t(),
        "TrafficMirrorSessions" => list(traffic_mirror_session()())
      }
      
  """
  @type describe_traffic_mirror_sessions_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      media_accelerator_info() :: %{
        "Accelerators" => list(media_device_info()()),
        "TotalMediaMemoryInMiB" => integer()
      }
      
  """
  @type media_accelerator_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_instance_metadata_options() :: %{
        "HttpEndpoint" => list(any()),
        "HttpProtocolIpv6" => list(any()),
        "HttpPutResponseHopLimit" => integer(),
        "HttpTokens" => list(any()),
        "InstanceMetadataTags" => list(any()),
        "State" => list(any())
      }
      
  """
  @type launch_template_instance_metadata_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_route_table_result() :: %{
        "TransitGatewayRouteTable" => transit_gateway_route_table()
      }
      
  """
  @type create_transit_gateway_route_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_metadata_defaults_request() :: %{
        optional("DryRun") => boolean(),
        optional("HttpEndpoint") => list(any()),
        optional("HttpPutResponseHopLimit") => integer(),
        optional("HttpTokens") => list(any()),
        optional("InstanceMetadataTags") => list(any())
      }
      
  """
  @type modify_instance_metadata_defaults_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_network_acl_entry_request() :: %{
        optional("CidrBlock") => String.t(),
        optional("DryRun") => boolean(),
        optional("IcmpTypeCode") => icmp_type_code(),
        optional("Ipv6CidrBlock") => String.t(),
        optional("PortRange") => port_range(),
        required("Egress") => boolean(),
        required("NetworkAclId") => String.t(),
        required("Protocol") => String.t(),
        required("RuleAction") => list(any()),
        required("RuleNumber") => integer()
      }
      
  """
  @type replace_network_acl_entry_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_private_ip_address() :: %{
        "Association" => instance_network_interface_association(),
        "Primary" => boolean(),
        "PrivateDnsName" => String.t(),
        "PrivateIpAddress" => String.t()
      }
      
  """
  @type instance_private_ip_address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      egress_only_internet_gateway() :: %{
        "Attachments" => list(internet_gateway_attachment()()),
        "EgressOnlyInternetGatewayId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type egress_only_internet_gateway() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_host_reservations_result() :: %{
        "HostReservationSet" => list(host_reservation()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_host_reservations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      rule_group_rule_options_pair() :: %{
        "RuleGroupArn" => String.t(),
        "RuleOptions" => list(rule_option()())
      }
      
  """
  @type rule_group_rule_options_pair() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_virtual_interface_groups_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LocalGatewayVirtualInterfaceGroupIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_local_gateway_virtual_interface_groups_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_transit_gateway_vpc_attachment_result() :: %{
        "TransitGatewayVpcAttachment" => transit_gateway_vpc_attachment()
      }
      
  """
  @type accept_transit_gateway_vpc_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpn_connection_result() :: %{
        "VpnConnection" => vpn_connection()
      }
      
  """
  @type create_vpn_connection_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_addresses_attribute_result() :: %{
        "Addresses" => list(address_attribute()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_addresses_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_instance_logging_configuration_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("AccessLogs") => verified_access_log_options(),
        required("VerifiedAccessInstanceId") => String.t()
      }
      
  """
  @type modify_verified_access_instance_logging_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      last_error() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type last_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_transit_gateway_route_table_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type associate_transit_gateway_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_scope_result() :: %{
        "IpamScope" => ipam_scope()
      }
      
  """
  @type delete_ipam_scope_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_transit_gateway_routes_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        required("S3Bucket") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type export_transit_gateway_routes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      resource_statement() :: %{
        "ResourceTypes" => list(String.t()()),
        "Resources" => list(String.t()())
      }
      
  """
  @type resource_statement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instances_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("InstanceIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_public_ipv4_pool_request() :: %{
        optional("DryRun") => boolean(),
        optional("NetworkBorderGroup") => String.t(),
        required("PoolId") => String.t()
      }
      
  """
  @type delete_public_ipv4_pool_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_peering_connection_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcPeeringConnectionId") => String.t()
      }
      
  """
  @type delete_vpc_peering_connection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      packet_header_statement() :: %{
        "DestinationAddresses" => list(String.t()()),
        "DestinationPorts" => list(String.t()()),
        "DestinationPrefixLists" => list(String.t()()),
        "Protocols" => list(list(any())()),
        "SourceAddresses" => list(String.t()()),
        "SourcePorts" => list(String.t()()),
        "SourcePrefixLists" => list(String.t()())
      }
      
  """
  @type packet_header_statement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_availability_zone_group_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_availability_zone_group_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_policy_table_entry() :: %{
        "PolicyRule" => transit_gateway_policy_rule(),
        "PolicyRuleNumber" => String.t(),
        "TargetRouteTableId" => String.t()
      }
      
  """
  @type transit_gateway_policy_table_entry() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      local_gateway() :: %{
        "LocalGatewayId" => String.t(),
        "OutpostArn" => String.t(),
        "OwnerId" => String.t(),
        "State" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type local_gateway() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpn_gateways_result() :: %{
        "VpnGateways" => list(vpn_gateway()())
      }
      
  """
  @type describe_vpn_gateways_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      traffic_mirror_port_range_request() :: %{
        "FromPort" => integer(),
        "ToPort" => integer()
      }
      
  """
  @type traffic_mirror_port_range_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_insights_access_scope() :: %{
        "CreatedDate" => non_neg_integer(),
        "NetworkInsightsAccessScopeArn" => String.t(),
        "NetworkInsightsAccessScopeId" => String.t(),
        "Tags" => list(tag()()),
        "UpdatedDate" => non_neg_integer()
      }
      
  """
  @type network_insights_access_scope() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_nat_gateway_result() :: %{
        "NatGatewayId" => String.t()
      }
      
  """
  @type delete_nat_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      validation_error() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type validation_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_routes_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type describe_client_vpn_routes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_traffic_mirror_filter_rule_result() :: %{
        "TrafficMirrorFilterRuleId" => String.t()
      }
      
  """
  @type delete_traffic_mirror_filter_rule_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_capacity_reservation_request() :: %{
        optional("Accept") => boolean(),
        optional("AdditionalInfo") => String.t(),
        optional("DryRun") => boolean(),
        optional("EndDate") => non_neg_integer(),
        optional("EndDateType") => list(any()),
        optional("InstanceCount") => integer(),
        required("CapacityReservationId") => String.t()
      }
      
  """
  @type modify_capacity_reservation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_version() :: %{
        "CreateTime" => non_neg_integer(),
        "CreatedBy" => String.t(),
        "DefaultVersion" => boolean(),
        "LaunchTemplateData" => response_launch_template_data(),
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "VersionDescription" => String.t(),
        "VersionNumber" => float()
      }
      
  """
  @type launch_template_version() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_image_block_public_access_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type disable_image_block_public_access_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_route_table_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("TransitGatewayId") => String.t()
      }
      
  """
  @type create_transit_gateway_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      media_device_info() :: %{
        "Count" => integer(),
        "Manufacturer" => String.t(),
        "MemoryInfo" => media_device_memory_info(),
        "Name" => String.t()
      }
      
  """
  @type media_device_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_attribute_request() :: %{
        optional("EnableDnsHostnames") => attribute_boolean_value(),
        optional("EnableDnsSupport") => attribute_boolean_value(),
        optional("EnableNetworkAddressUsageMetrics") => attribute_boolean_value(),
        required("VpcId") => String.t()
      }
      
  """
  @type modify_vpc_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_insights_path() :: %{
        "CreatedDate" => non_neg_integer(),
        "Destination" => String.t(),
        "DestinationArn" => String.t(),
        "DestinationIp" => String.t(),
        "DestinationPort" => integer(),
        "FilterAtDestination" => path_filter(),
        "FilterAtSource" => path_filter(),
        "NetworkInsightsPathArn" => String.t(),
        "NetworkInsightsPathId" => String.t(),
        "Protocol" => list(any()),
        "Source" => String.t(),
        "SourceArn" => String.t(),
        "SourceIp" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type network_insights_path() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_iam_instance_profile_association_result() :: %{
        "IamInstanceProfileAssociation" => iam_instance_profile_association()
      }
      
  """
  @type replace_iam_instance_profile_association_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_route() :: %{
        "DestinationCidrBlock" => String.t(),
        "PrefixListId" => String.t(),
        "State" => list(any()),
        "TransitGatewayAttachments" => list(transit_gateway_route_attachment()()),
        "TransitGatewayRouteTableAnnouncementId" => String.t(),
        "Type" => list(any())
      }
      
  """
  @type transit_gateway_route() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_local_gateway_route_table_request() :: %{
        optional("DryRun") => boolean(),
        required("LocalGatewayRouteTableId") => String.t()
      }
      
  """
  @type delete_local_gateway_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_endpoints_result() :: %{
        "NextToken" => String.t(),
        "VerifiedAccessEndpoints" => list(verified_access_endpoint()())
      }
      
  """
  @type describe_verified_access_endpoints_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_addresses_result() :: %{
        "Addresses" => list(address()())
      }
      
  """
  @type describe_addresses_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      locked_snapshots_info() :: %{
        "CoolOffPeriod" => integer(),
        "CoolOffPeriodExpiresOn" => non_neg_integer(),
        "LockCreatedOn" => non_neg_integer(),
        "LockDuration" => integer(),
        "LockDurationStartTime" => non_neg_integer(),
        "LockExpiresOn" => non_neg_integer(),
        "LockState" => list(any()),
        "OwnerId" => String.t(),
        "SnapshotId" => String.t()
      }
      
  """
  @type locked_snapshots_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_result() :: %{
        "Ipam" => ipam()
      }
      
  """
  @type modify_ipam_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_console_output_result() :: %{
        "InstanceId" => String.t(),
        "Output" => String.t(),
        "Timestamp" => non_neg_integer()
      }
      
  """
  @type get_console_output_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_multicast_domains_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayMulticastDomainIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_multicast_domains_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_client_vpn_client_configuration_result() :: %{
        "ClientConfiguration" => String.t()
      }
      
  """
  @type export_client_vpn_client_configuration_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_route_table_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type delete_transit_gateway_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      connection_tracking_specification() :: %{
        "TcpEstablishedTimeout" => integer(),
        "UdpStreamTimeout" => integer(),
        "UdpTimeout" => integer()
      }
      
  """
  @type connection_tracking_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_enclave_options() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type launch_template_enclave_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_capacity_reservation_fleet_error() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type cancel_capacity_reservation_fleet_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ebs_default_kms_key_id_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type get_ebs_default_kms_key_id_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_trunk_interface_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("AssociationId") => String.t()
      }
      
  """
  @type disassociate_trunk_interface_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_nat_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("NatGatewayId") => String.t()
      }
      
  """
  @type delete_nat_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_transit_gateway_route_table_result() :: %{
        "Association" => transit_gateway_association()
      }
      
  """
  @type associate_transit_gateway_route_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_export_details() :: %{
        "InstanceId" => String.t(),
        "TargetEnvironment" => list(any())
      }
      
  """
  @type instance_export_details() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reservation() :: %{
        "Groups" => list(group_identifier()()),
        "Instances" => list(instance()()),
        "OwnerId" => String.t(),
        "RequesterId" => String.t(),
        "ReservationId" => String.t()
      }
      
  """
  @type reservation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_endpoint() :: %{
        "CreationTimestamp" => non_neg_integer(),
        "DnsEntries" => list(dns_entry()()),
        "DnsOptions" => dns_options(),
        "Groups" => list(security_group_identifier()()),
        "IpAddressType" => list(any()),
        "LastError" => last_error(),
        "NetworkInterfaceIds" => list(String.t()()),
        "OwnerId" => String.t(),
        "PolicyDocument" => String.t(),
        "PrivateDnsEnabled" => boolean(),
        "RequesterManaged" => boolean(),
        "RouteTableIds" => list(String.t()()),
        "ServiceName" => String.t(),
        "State" => list(any()),
        "SubnetIds" => list(String.t()()),
        "Tags" => list(tag()()),
        "VpcEndpointId" => String.t(),
        "VpcEndpointType" => list(any()),
        "VpcId" => String.t()
      }
      
  """
  @type vpc_endpoint() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deprovision_ipam_byoasn_result() :: %{
        "Byoasn" => byoasn()
      }
      
  """
  @type deprovision_ipam_byoasn_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_options() :: %{
        "AllocationStrategy" => list(any()),
        "InstanceInterruptionBehavior" => list(any()),
        "InstancePoolsToUseCount" => integer(),
        "MaintenanceStrategies" => fleet_spot_maintenance_strategies(),
        "MaxTotalPrice" => String.t(),
        "MinTargetCapacity" => integer(),
        "SingleAvailabilityZone" => boolean(),
        "SingleInstanceType" => boolean()
      }
      
  """
  @type spot_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_event_window_time_range() :: %{
        "EndHour" => integer(),
        "EndWeekDay" => list(any()),
        "StartHour" => integer(),
        "StartWeekDay" => list(any())
      }
      
  """
  @type instance_event_window_time_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      response_launch_template_data() :: %{
        "BlockDeviceMappings" => list(launch_template_block_device_mapping()()),
        "CapacityReservationSpecification" => launch_template_capacity_reservation_specification_response(),
        "CpuOptions" => launch_template_cpu_options(),
        "CreditSpecification" => credit_specification(),
        "DisableApiStop" => boolean(),
        "DisableApiTermination" => boolean(),
        "EbsOptimized" => boolean(),
        "ElasticGpuSpecifications" => list(elastic_gpu_specification_response()()),
        "ElasticInferenceAccelerators" => list(launch_template_elastic_inference_accelerator_response()()),
        "EnclaveOptions" => launch_template_enclave_options(),
        "HibernationOptions" => launch_template_hibernation_options(),
        "IamInstanceProfile" => launch_template_iam_instance_profile_specification(),
        "ImageId" => String.t(),
        "InstanceInitiatedShutdownBehavior" => list(any()),
        "InstanceMarketOptions" => launch_template_instance_market_options(),
        "InstanceRequirements" => instance_requirements(),
        "InstanceType" => list(any()),
        "KernelId" => String.t(),
        "KeyName" => String.t(),
        "LicenseSpecifications" => list(launch_template_license_configuration()()),
        "MaintenanceOptions" => launch_template_instance_maintenance_options(),
        "MetadataOptions" => launch_template_instance_metadata_options(),
        "Monitoring" => launch_templates_monitoring(),
        "NetworkInterfaces" => list(launch_template_instance_network_interface_specification()()),
        "Placement" => launch_template_placement(),
        "PrivateDnsNameOptions" => launch_template_private_dns_name_options(),
        "RamDiskId" => String.t(),
        "SecurityGroupIds" => list(String.t()()),
        "SecurityGroups" => list(String.t()()),
        "TagSpecifications" => list(launch_template_tag_specification()()),
        "UserData" => String.t()
      }
      
  """
  @type response_launch_template_data() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_service_configurations_result() :: %{
        "NextToken" => String.t(),
        "ServiceConfigurations" => list(service_configuration()())
      }
      
  """
  @type describe_vpc_endpoint_service_configurations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_snapshot_block_public_access_state_result() :: %{
        "State" => list(any())
      }
      
  """
  @type get_snapshot_block_public_access_state_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_aws_network_performance_metric_subscription_request() :: %{
        optional("Destination") => String.t(),
        optional("DryRun") => boolean(),
        optional("Metric") => list(any()),
        optional("Source") => String.t(),
        optional("Statistic") => list(any())
      }
      
  """
  @type enable_aws_network_performance_metric_subscription_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_vpc_endpoint_connections_request() :: %{
        optional("DryRun") => boolean(),
        required("ServiceId") => String.t(),
        required("VpcEndpointIds") => list(String.t()())
      }
      
  """
  @type reject_vpc_endpoint_connections_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_volume_task_details() :: %{
        "AvailabilityZone" => String.t(),
        "BytesConverted" => float(),
        "Description" => String.t(),
        "Image" => disk_image_description(),
        "Volume" => disk_image_volume_description()
      }
      
  """
  @type import_volume_task_details() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      flow_log() :: %{
        "CreationTime" => non_neg_integer(),
        "DeliverCrossAccountRole" => String.t(),
        "DeliverLogsErrorMessage" => String.t(),
        "DeliverLogsPermissionArn" => String.t(),
        "DeliverLogsStatus" => String.t(),
        "DestinationOptions" => destination_options_response(),
        "FlowLogId" => String.t(),
        "FlowLogStatus" => String.t(),
        "LogDestination" => String.t(),
        "LogDestinationType" => list(any()),
        "LogFormat" => String.t(),
        "LogGroupName" => String.t(),
        "MaxAggregationInterval" => integer(),
        "ResourceId" => String.t(),
        "Tags" => list(tag()()),
        "TrafficType" => list(any())
      }
      
  """
  @type flow_log() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_vpc_attachments_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayAttachmentIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_vpc_attachments_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_instances_result() :: %{
        "NextToken" => String.t(),
        "VerifiedAccessInstances" => list(verified_access_instance()())
      }
      
  """
  @type describe_verified_access_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface_private_ip_address() :: %{
        "Association" => network_interface_association(),
        "Primary" => boolean(),
        "PrivateDnsName" => String.t(),
        "PrivateIpAddress" => String.t()
      }
      
  """
  @type network_interface_private_ip_address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_snapshots_result() :: %{
        "NextToken" => String.t(),
        "Snapshots" => list(snapshot()())
      }
      
  """
  @type describe_snapshots_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_event_window_association_target() :: %{
        "DedicatedHostIds" => list(String.t()()),
        "InstanceIds" => list(String.t()()),
        "Tags" => list(tag()())
      }
      
  """
  @type instance_event_window_association_target() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_instance_launch_specification() :: %{
        "AdditionalInfo" => String.t(),
        "Architecture" => list(any()),
        "GroupIds" => list(String.t()()),
        "GroupNames" => list(String.t()()),
        "InstanceInitiatedShutdownBehavior" => list(any()),
        "InstanceType" => list(any()),
        "Monitoring" => boolean(),
        "Placement" => placement(),
        "PrivateIpAddress" => String.t(),
        "SubnetId" => String.t(),
        "UserData" => user_data()
      }
      
  """
  @type import_instance_launch_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_ipam_organization_admin_account_result() :: %{
        "Success" => boolean()
      }
      
  """
  @type disable_ipam_organization_admin_account_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_config() :: %{
        "LaunchTemplateSpecification" => fleet_launch_template_specification(),
        "Overrides" => list(launch_template_overrides()())
      }
      
  """
  @type launch_template_config() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instances_offering() :: %{
        "AvailabilityZone" => String.t(),
        "CurrencyCode" => list(any()),
        "Duration" => float(),
        "FixedPrice" => float(),
        "InstanceTenancy" => list(any()),
        "InstanceType" => list(any()),
        "Marketplace" => boolean(),
        "OfferingClass" => list(any()),
        "OfferingType" => list(any()),
        "PricingDetails" => list(pricing_detail()()),
        "ProductDescription" => list(any()),
        "RecurringCharges" => list(recurring_charge()()),
        "ReservedInstancesOfferingId" => String.t(),
        "Scope" => list(any()),
        "UsagePrice" => float()
      }
      
  """
  @type reserved_instances_offering() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provision_ipam_byoasn_result() :: %{
        "Byoasn" => byoasn()
      }
      
  """
  @type provision_ipam_byoasn_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_local_gateway_route_table_request() :: %{
        optional("DryRun") => boolean(),
        optional("Mode") => list(any()),
        optional("TagSpecifications") => list(tag_specification()()),
        required("LocalGatewayId") => String.t()
      }
      
  """
  @type create_local_gateway_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      traffic_mirror_port_range() :: %{
        "FromPort" => integer(),
        "ToPort" => integer()
      }
      
  """
  @type traffic_mirror_port_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      security_group() :: %{
        "Description" => String.t(),
        "GroupId" => String.t(),
        "GroupName" => String.t(),
        "IpPermissions" => list(ip_permission()()),
        "IpPermissionsEgress" => list(ip_permission()()),
        "OwnerId" => String.t(),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type security_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attribute_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type attribute_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_launch_specification() :: %{
        "BlockDeviceMappings" => list(scheduled_instances_block_device_mapping()()),
        "EbsOptimized" => boolean(),
        "IamInstanceProfile" => scheduled_instances_iam_instance_profile(),
        "ImageId" => String.t(),
        "InstanceType" => String.t(),
        "KernelId" => String.t(),
        "KeyName" => String.t(),
        "Monitoring" => scheduled_instances_monitoring(),
        "NetworkInterfaces" => list(scheduled_instances_network_interface()()),
        "Placement" => scheduled_instances_placement(),
        "RamdiskId" => String.t(),
        "SecurityGroupIds" => list(String.t()()),
        "SubnetId" => String.t(),
        "UserData" => String.t()
      }
      
  """
  @type scheduled_instances_launch_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_instance_logging_configuration() :: %{
        "AccessLogs" => verified_access_logs(),
        "VerifiedAccessInstanceId" => String.t()
      }
      
  """
  @type verified_access_instance_logging_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      gpu_device_info() :: %{
        "Count" => integer(),
        "Manufacturer" => String.t(),
        "MemoryInfo" => gpu_device_memory_info(),
        "Name" => String.t()
      }
      
  """
  @type gpu_device_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_internet_gateways_result() :: %{
        "InternetGateways" => list(internet_gateway()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_internet_gateways_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_security_group_rules_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_security_group_rules_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_network_interface_attribute_request() :: %{
        optional("DryRun") => boolean(),
        optional("SourceDestCheck") => String.t(),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type reset_network_interface_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      analysis_component() :: %{
        "Arn" => String.t(),
        "Id" => String.t(),
        "Name" => String.t()
      }
      
  """
  @type analysis_component() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      analysis_load_balancer_target() :: %{
        "Address" => String.t(),
        "AvailabilityZone" => String.t(),
        "Instance" => analysis_component(),
        "Port" => integer()
      }
      
  """
  @type analysis_load_balancer_target() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_transit_gateway_vpc_attachment_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type accept_transit_gateway_vpc_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv6_cidr_block() :: %{
        "Ipv6CidrBlock" => String.t()
      }
      
  """
  @type ipv6_cidr_block() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      local_gateway_virtual_interface() :: %{
        "LocalAddress" => String.t(),
        "LocalBgpAsn" => integer(),
        "LocalGatewayId" => String.t(),
        "LocalGatewayVirtualInterfaceId" => String.t(),
        "OwnerId" => String.t(),
        "PeerAddress" => String.t(),
        "PeerBgpAsn" => integer(),
        "Tags" => list(tag()()),
        "Vlan" => integer()
      }
      
  """
  @type local_gateway_virtual_interface() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_byoip_cidrs_result() :: %{
        "ByoipCidrs" => list(byoip_cidr()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_byoip_cidrs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_traffic_mirror_session_result() :: %{
        "TrafficMirrorSession" => traffic_mirror_session()
      }
      
  """
  @type modify_traffic_mirror_session_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_status_summary() :: %{
        "Details" => list(instance_status_details()()),
        "Status" => list(any())
      }
      
  """
  @type instance_status_summary() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      copy_fpga_image_result() :: %{
        "FpgaImageId" => String.t()
      }
      
  """
  @type copy_fpga_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase2_encryption_algorithms_request_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type phase2_encryption_algorithms_request_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fast_snapshot_restores_result() :: %{
        "FastSnapshotRestores" => list(describe_fast_snapshot_restore_success_item()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_fast_snapshot_restores_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_local_gateway_route_table_vpc_association_request() :: %{
        optional("DryRun") => boolean(),
        required("LocalGatewayRouteTableVpcAssociationId") => String.t()
      }
      
  """
  @type delete_local_gateway_route_table_vpc_association_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ebs_block_device() :: %{
        "DeleteOnTermination" => boolean(),
        "Encrypted" => boolean(),
        "Iops" => integer(),
        "KmsKeyId" => String.t(),
        "OutpostArn" => String.t(),
        "SnapshotId" => String.t(),
        "Throughput" => integer(),
        "VolumeSize" => integer(),
        "VolumeType" => list(any())
      }
      
  """
  @type ebs_block_device() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_specification() :: %{
        "CapacityReservationPreference" => list(any()),
        "CapacityReservationTarget" => capacity_reservation_target()
      }
      
  """
  @type capacity_reservation_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      path_statement_request() :: %{
        "PacketHeaderStatement" => packet_header_statement_request(),
        "ResourceStatement" => resource_statement_request()
      }
      
  """
  @type path_statement_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_capacity_reservation_specification_request() :: %{
        "CapacityReservationPreference" => list(any()),
        "CapacityReservationTarget" => capacity_reservation_target()
      }
      
  """
  @type launch_template_capacity_reservation_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      list_snapshots_in_recycle_bin_result() :: %{
        "NextToken" => String.t(),
        "Snapshots" => list(snapshot_recycle_bin_info()())
      }
      
  """
  @type list_snapshots_in_recycle_bin_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_volume_status_result() :: %{
        "NextToken" => String.t(),
        "VolumeStatuses" => list(volume_status_item()())
      }
      
  """
  @type describe_volume_status_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instance() :: %{
        "AvailabilityZone" => String.t(),
        "CreateDate" => non_neg_integer(),
        "HourlyPrice" => String.t(),
        "InstanceCount" => integer(),
        "InstanceType" => String.t(),
        "NetworkPlatform" => String.t(),
        "NextSlotStartTime" => non_neg_integer(),
        "Platform" => String.t(),
        "PreviousSlotEndTime" => non_neg_integer(),
        "Recurrence" => scheduled_instance_recurrence(),
        "ScheduledInstanceId" => String.t(),
        "SlotDurationInHours" => integer(),
        "TermEndDate" => non_neg_integer(),
        "TermStartDate" => non_neg_integer(),
        "TotalScheduledInstanceHours" => integer()
      }
      
  """
  @type scheduled_instance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_stale_security_groups_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type describe_stale_security_groups_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_trunk_interface_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("GreKey") => integer(),
        optional("VlanId") => integer(),
        required("BranchInterfaceId") => String.t(),
        required("TrunkInterfaceId") => String.t()
      }
      
  """
  @type associate_trunk_interface_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      nat_gateway() :: %{
        "ConnectivityType" => list(any()),
        "CreateTime" => non_neg_integer(),
        "DeleteTime" => non_neg_integer(),
        "FailureCode" => String.t(),
        "FailureMessage" => String.t(),
        "NatGatewayAddresses" => list(nat_gateway_address()()),
        "NatGatewayId" => String.t(),
        "ProvisionedBandwidth" => provisioned_bandwidth(),
        "State" => list(any()),
        "SubnetId" => String.t(),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type nat_gateway() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_image_launch_permission_request() :: %{
        optional("DryRun") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type cancel_image_launch_permission_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_private_dns_name_options_request() :: %{
        "EnableResourceNameDnsAAAARecord" => boolean(),
        "EnableResourceNameDnsARecord" => boolean(),
        "HostnameType" => list(any())
      }
      
  """
  @type launch_template_private_dns_name_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unsuccessful_item() :: %{
        "Error" => unsuccessful_item_error(),
        "ResourceId" => String.t()
      }
      
  """
  @type unsuccessful_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_endpoint_service_configuration_result() :: %{
        "ClientToken" => String.t(),
        "ServiceConfiguration" => service_configuration()
      }
      
  """
  @type create_vpc_endpoint_service_configuration_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_route_table_propagations_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayRouteTablePropagations" => list(transit_gateway_route_table_propagation()())
      }
      
  """
  @type get_transit_gateway_route_table_propagations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      pool_cidr_block() :: %{
        "Cidr" => String.t()
      }
      
  """
  @type pool_cidr_block() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_image_deregistration_protection_request() :: %{
        optional("DryRun") => boolean(),
        optional("WithCooldown") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type enable_image_deregistration_protection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_scope_result() :: %{
        "IpamScope" => ipam_scope()
      }
      
  """
  @type modify_ipam_scope_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      snapshot_disk_container() :: %{
        "Description" => String.t(),
        "Format" => String.t(),
        "Url" => String.t(),
        "UserBucket" => user_bucket()
      }
      
  """
  @type snapshot_disk_container() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_type_offerings_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LocationType") => list(any()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_instance_type_offerings_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      data_query() :: %{
        "Destination" => String.t(),
        "Id" => String.t(),
        "Metric" => list(any()),
        "Period" => list(any()),
        "Source" => String.t(),
        "Statistic" => list(any())
      }
      
  """
  @type data_query() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_trust_providers_result() :: %{
        "NextToken" => String.t(),
        "VerifiedAccessTrustProviders" => list(verified_access_trust_provider()())
      }
      
  """
  @type describe_verified_access_trust_providers_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_connection_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type client_vpn_connection_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_prefix_list_references_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayPrefixListReferences" => list(transit_gateway_prefix_list_reference()())
      }
      
  """
  @type get_transit_gateway_prefix_list_references_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disk_image_description() :: %{
        "Checksum" => String.t(),
        "Format" => list(any()),
        "ImportManifestUrl" => String.t(),
        "Size" => float()
      }
      
  """
  @type disk_image_description() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_traffic_mirror_session_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("PacketLength") => integer(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("VirtualNetworkId") => integer(),
        required("NetworkInterfaceId") => String.t(),
        required("SessionNumber") => integer(),
        required("TrafficMirrorFilterId") => String.t(),
        required("TrafficMirrorTargetId") => String.t()
      }
      
  """
  @type create_traffic_mirror_session_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpn_connection_route_request() :: %{
        required("DestinationCidrBlock") => String.t(),
        required("VpnConnectionId") => String.t()
      }
      
  """
  @type create_vpn_connection_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      carrier_gateway() :: %{
        "CarrierGatewayId" => String.t(),
        "OwnerId" => String.t(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type carrier_gateway() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      authorize_client_vpn_ingress_result() :: %{
        "Status" => client_vpn_authorization_rule_status()
      }
      
  """
  @type authorize_client_vpn_ingress_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_vpc_endpoint_connections_result() :: %{
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type reject_vpc_endpoint_connections_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_scheduled_instances_result() :: %{
        "NextToken" => String.t(),
        "ScheduledInstanceSet" => list(scheduled_instance()())
      }
      
  """
  @type describe_scheduled_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_overrides() :: %{
        "AvailabilityZone" => String.t(),
        "InstanceRequirements" => instance_requirements(),
        "InstanceType" => list(any()),
        "Priority" => float(),
        "SpotPrice" => String.t(),
        "SubnetId" => String.t(),
        "WeightedCapacity" => float()
      }
      
  """
  @type launch_template_overrides() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_discovered_public_address() :: %{
        "Address" => String.t(),
        "AddressAllocationId" => String.t(),
        "AddressOwnerId" => String.t(),
        "AddressRegion" => String.t(),
        "AddressType" => list(any()),
        "AssociationStatus" => list(any()),
        "InstanceId" => String.t(),
        "IpamResourceDiscoveryId" => String.t(),
        "NetworkBorderGroup" => String.t(),
        "NetworkInterfaceDescription" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "PublicIpv4PoolId" => String.t(),
        "SampleTime" => non_neg_integer(),
        "SecurityGroups" => list(ipam_public_address_security_group()()),
        "Service" => list(any()),
        "ServiceResource" => String.t(),
        "SubnetId" => String.t(),
        "Tags" => ipam_public_address_tags(),
        "VpcId" => String.t()
      }
      
  """
  @type ipam_discovered_public_address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      key_pair() :: %{
        "KeyFingerprint" => String.t(),
        "KeyMaterial" => String.t(),
        "KeyName" => String.t(),
        "KeyPairId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type key_pair() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_external_resource_verification_tokens_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IpamExternalResourceVerificationTokenIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_ipam_external_resource_verification_tokens_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_peering_connections_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VpcPeeringConnectionIds") => list(String.t()())
      }
      
  """
  @type describe_vpc_peering_connections_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_vpc_attachments_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayVpcAttachments" => list(transit_gateway_vpc_attachment()())
      }
      
  """
  @type describe_transit_gateway_vpc_attachments_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_attachment_propagations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type get_transit_gateway_attachment_propagations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      product_code() :: %{
        "ProductCodeId" => String.t(),
        "ProductCodeType" => list(any())
      }
      
  """
  @type product_code() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_options_request() :: %{
        "UsageStrategy" => list(any())
      }
      
  """
  @type capacity_reservation_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpc_endpoint_service_configurations_result() :: %{
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type delete_vpc_endpoint_service_configurations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_address_transfer_result() :: %{
        "AddressTransfer" => address_transfer()
      }
      
  """
  @type accept_address_transfer_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_peering_connection_options_request() :: %{
        optional("AccepterPeeringConnectionOptions") => peering_connection_options_request(),
        optional("DryRun") => boolean(),
        optional("RequesterPeeringConnectionOptions") => peering_connection_options_request(),
        required("VpcPeeringConnectionId") => String.t()
      }
      
  """
  @type modify_vpc_peering_connection_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      filter() :: %{
        "Name" => String.t(),
        "Values" => list(String.t()())
      }
      
  """
  @type filter() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      local_gateway_route_table_virtual_interface_group_association() :: %{
        "LocalGatewayId" => String.t(),
        "LocalGatewayRouteTableArn" => String.t(),
        "LocalGatewayRouteTableId" => String.t(),
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId" => String.t(),
        "LocalGatewayVirtualInterfaceGroupId" => String.t(),
        "OwnerId" => String.t(),
        "State" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type local_gateway_route_table_virtual_interface_group_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      service_type_detail() :: %{
        "ServiceType" => list(any())
      }
      
  """
  @type service_type_detail() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_prefix_list_reference_result() :: %{
        "TransitGatewayPrefixListReference" => transit_gateway_prefix_list_reference()
      }
      
  """
  @type create_transit_gateway_prefix_list_reference_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      placement() :: %{
        "Affinity" => String.t(),
        "AvailabilityZone" => String.t(),
        "GroupId" => String.t(),
        "GroupName" => String.t(),
        "HostId" => String.t(),
        "HostResourceGroupArn" => String.t(),
        "PartitionNumber" => integer(),
        "SpreadDomain" => String.t(),
        "Tenancy" => list(any())
      }
      
  """
  @type placement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deprovision_ipam_pool_cidr_request() :: %{
        optional("Cidr") => String.t(),
        optional("DryRun") => boolean(),
        required("IpamPoolId") => String.t()
      }
      
  """
  @type deprovision_ipam_pool_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_connect_peers_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayConnectPeers" => list(transit_gateway_connect_peer()())
      }
      
  """
  @type describe_transit_gateway_connect_peers_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_state() :: %{
        "Code" => integer(),
        "Name" => list(any())
      }
      
  """
  @type instance_state() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_connect_peer_request() :: %{
        optional("BgpOptions") => transit_gateway_connect_request_bgp_options(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("TransitGatewayAddress") => String.t(),
        required("InsideCidrBlocks") => list(String.t()()),
        required("PeerAddress") => String.t(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type create_transit_gateway_connect_peer_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_event_notification_attributes_result() :: %{
        "InstanceTagAttribute" => instance_tag_notification_attribute()
      }
      
  """
  @type describe_instance_event_notification_attributes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_connect_peer_configuration() :: %{
        "BgpConfigurations" => list(transit_gateway_attachment_bgp_configuration()()),
        "InsideCidrBlocks" => list(String.t()()),
        "PeerAddress" => String.t(),
        "Protocol" => list(any()),
        "TransitGatewayAddress" => String.t()
      }
      
  """
  @type transit_gateway_connect_peer_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_ena_srd_udp_specification() :: %{
        "EnaSrdUdpEnabled" => boolean()
      }
      
  """
  @type launch_template_ena_srd_udp_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      authorize_security_group_egress_request() :: %{
        optional("CidrIp") => String.t(),
        optional("DryRun") => boolean(),
        optional("FromPort") => integer(),
        optional("IpPermissions") => list(ip_permission()()),
        optional("IpProtocol") => String.t(),
        optional("SourceSecurityGroupName") => String.t(),
        optional("SourceSecurityGroupOwnerId") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("ToPort") => integer(),
        required("GroupId") => String.t()
      }
      
  """
  @type authorize_security_group_egress_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_connections_result() :: %{
        "NextToken" => String.t(),
        "VpcEndpointConnections" => list(vpc_endpoint_connection()())
      }
      
  """
  @type describe_vpc_endpoint_connections_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      revoke_security_group_ingress_request() :: %{
        optional("CidrIp") => String.t(),
        optional("DryRun") => boolean(),
        optional("FromPort") => integer(),
        optional("GroupId") => String.t(),
        optional("GroupName") => String.t(),
        optional("IpPermissions") => list(ip_permission()()),
        optional("IpProtocol") => String.t(),
        optional("SecurityGroupRuleIds") => list(String.t()()),
        optional("SourceSecurityGroupName") => String.t(),
        optional("SourceSecurityGroupOwnerId") => String.t(),
        optional("ToPort") => integer()
      }
      
  """
  @type revoke_security_group_ingress_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_address_transfer_result() :: %{
        "AddressTransfer" => address_transfer()
      }
      
  """
  @type enable_address_transfer_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_insights_access_scope_analyses_request() :: %{
        optional("AnalysisStartTimeBegin") => non_neg_integer(),
        optional("AnalysisStartTimeEnd") => non_neg_integer(),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NetworkInsightsAccessScopeAnalysisIds") => list(String.t()()),
        optional("NetworkInsightsAccessScopeId") => String.t(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_network_insights_access_scope_analyses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      service_detail() :: %{
        "AcceptanceRequired" => boolean(),
        "AvailabilityZones" => list(String.t()()),
        "BaseEndpointDnsNames" => list(String.t()()),
        "ManagesVpcEndpoints" => boolean(),
        "Owner" => String.t(),
        "PayerResponsibility" => list(any()),
        "PrivateDnsName" => String.t(),
        "PrivateDnsNameVerificationState" => list(any()),
        "PrivateDnsNames" => list(private_dns_details()()),
        "ServiceId" => String.t(),
        "ServiceName" => String.t(),
        "ServiceType" => list(service_type_detail()()),
        "SupportedIpAddressTypes" => list(list(any())()),
        "Tags" => list(tag()()),
        "VpcEndpointPolicySupported" => boolean()
      }
      
  """
  @type service_detail() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_launch_template_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DefaultVersion") => String.t(),
        optional("DryRun") => boolean(),
        optional("LaunchTemplateId") => String.t(),
        optional("LaunchTemplateName") => String.t()
      }
      
  """
  @type modify_launch_template_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_connects_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayConnects" => list(transit_gateway_connect()())
      }
      
  """
  @type describe_transit_gateway_connects_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      start_vpc_endpoint_service_private_dns_verification_result() :: %{
        "ReturnValue" => boolean()
      }
      
  """
  @type start_vpc_endpoint_service_private_dns_verification_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_snapshot_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("SnapshotId") => String.t()
      }
      
  """
  @type describe_snapshot_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_allocation() :: %{
        "AllocationType" => list(any()),
        "Count" => integer()
      }
      
  """
  @type capacity_allocation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_subnets_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("SubnetIds") => list(String.t()())
      }
      
  """
  @type describe_subnets_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_image_result() :: %{
        "ImageId" => String.t()
      }
      
  """
  @type create_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      peering_connection_options_request() :: %{
        "AllowDnsResolutionFromRemoteVpc" => boolean(),
        "AllowEgressFromLocalClassicLinkToRemoteVpc" => boolean(),
        "AllowEgressFromLocalVpcToRemoteClassicLink" => boolean()
      }
      
  """
  @type peering_connection_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_bandwidth_gbps_request() :: %{
        "Max" => float(),
        "Min" => float()
      }
      
  """
  @type network_bandwidth_gbps_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_capacity_reservation_fleets_request() :: %{
        optional("CapacityReservationFleetIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_capacity_reservation_fleets_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      assign_ipv6_addresses_result() :: %{
        "AssignedIpv6Addresses" => list(String.t()()),
        "AssignedIpv6Prefixes" => list(String.t()()),
        "NetworkInterfaceId" => String.t()
      }
      
  """
  @type assign_ipv6_addresses_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_coip_pool_usage_result() :: %{
        "CoipAddressUsages" => list(coip_address_usage()()),
        "CoipPoolId" => String.t(),
        "LocalGatewayRouteTableId" => String.t(),
        "NextToken" => String.t()
      }
      
  """
  @type get_coip_pool_usage_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_trust_provider_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DeviceOptions") => modify_verified_access_trust_provider_device_options(),
        optional("DryRun") => boolean(),
        optional("OidcOptions") => modify_verified_access_trust_provider_oidc_options(),
        optional("SseSpecification") => verified_access_sse_specification_request(),
        required("VerifiedAccessTrustProviderId") => String.t()
      }
      
  """
  @type modify_verified_access_trust_provider_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_route_table_propagations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type get_transit_gateway_route_table_propagations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_public_ipv4_pool_result() :: %{
        "ReturnValue" => boolean()
      }
      
  """
  @type delete_public_ipv4_pool_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_launch_template_data_result() :: %{
        "LaunchTemplateData" => response_launch_template_data()
      }
      
  """
  @type get_launch_template_data_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      image_recycle_bin_info() :: %{
        "Description" => String.t(),
        "ImageId" => String.t(),
        "Name" => String.t(),
        "RecycleBinEnterTime" => non_neg_integer(),
        "RecycleBinExitTime" => non_neg_integer()
      }
      
  """
  @type image_recycle_bin_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_route_table_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type get_transit_gateway_route_table_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_client_vpn_client_certificate_revocation_list_result() :: %{
        "CertificateRevocationList" => String.t(),
        "Status" => client_certificate_revocation_list_status()
      }
      
  """
  @type export_client_vpn_client_certificate_revocation_list_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_local_gateway_route_table_virtual_interface_group_association_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("LocalGatewayRouteTableId") => String.t(),
        required("LocalGatewayVirtualInterfaceGroupId") => String.t()
      }
      
  """
  @type create_local_gateway_route_table_virtual_interface_group_association_request() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      network_info() :: %{
        "DefaultNetworkCardIndex" => integer(),
        "EfaInfo" => efa_info(),
        "EfaSupported" => boolean(),
        "EnaSrdSupported" => boolean(),
        "EnaSupport" => list(any()),
        "EncryptionInTransitSupported" => boolean(),
        "Ipv4AddressesPerInterface" => integer(),
        "Ipv6AddressesPerInterface" => integer(),
        "Ipv6Supported" => boolean(),
        "MaximumNetworkCards" => integer(),
        "MaximumNetworkInterfaces" => integer(),
        "NetworkCards" => list(network_card_info()()),
        "NetworkPerformance" => String.t()
      }
      
  """
  @type network_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_connect_result() :: %{
        "TransitGatewayConnect" => transit_gateway_connect()
      }
      
  """
  @type create_transit_gateway_connect_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      host() :: %{
        "AllocationTime" => non_neg_integer(),
        "AllowsMultipleInstanceTypes" => list(any()),
        "AssetId" => String.t(),
        "AutoPlacement" => list(any()),
        "AvailabilityZone" => String.t(),
        "AvailabilityZoneId" => String.t(),
        "AvailableCapacity" => available_capacity(),
        "ClientToken" => String.t(),
        "HostId" => String.t(),
        "HostMaintenance" => list(any()),
        "HostProperties" => host_properties(),
        "HostRecovery" => list(any()),
        "HostReservationId" => String.t(),
        "Instances" => list(host_instance()()),
        "MemberOfServiceLinkedResourceGroup" => boolean(),
        "OutpostArn" => String.t(),
        "OwnerId" => String.t(),
        "ReleaseTime" => non_neg_integer(),
        "State" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type host() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_reserved_instances_offerings_request() :: %{
        optional("AvailabilityZone") => String.t(),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IncludeMarketplace") => boolean(),
        optional("InstanceTenancy") => list(any()),
        optional("InstanceType") => list(any()),
        optional("MaxDuration") => float(),
        optional("MaxInstanceCount") => integer(),
        optional("MaxResults") => integer(),
        optional("MinDuration") => float(),
        optional("NextToken") => String.t(),
        optional("OfferingClass") => list(any()),
        optional("OfferingType") => list(any()),
        optional("ProductDescription") => list(any()),
        optional("ReservedInstancesOfferingIds") => list(String.t()())
      }
      
  """
  @type describe_reserved_instances_offerings_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_target_networks_result() :: %{
        "ClientVpnTargetNetworks" => list(target_network()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_client_vpn_target_networks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_tunnel_options_specification() :: %{
        "DPDTimeoutAction" => String.t(),
        "DPDTimeoutSeconds" => integer(),
        "EnableTunnelLifecycleControl" => boolean(),
        "IKEVersions" => list(i_k_e_versions_request_list_value()()),
        "LogOptions" => vpn_tunnel_log_options_specification(),
        "Phase1DHGroupNumbers" => list(phase1_d_h_group_numbers_request_list_value()()),
        "Phase1EncryptionAlgorithms" => list(phase1_encryption_algorithms_request_list_value()()),
        "Phase1IntegrityAlgorithms" => list(phase1_integrity_algorithms_request_list_value()()),
        "Phase1LifetimeSeconds" => integer(),
        "Phase2DHGroupNumbers" => list(phase2_d_h_group_numbers_request_list_value()()),
        "Phase2EncryptionAlgorithms" => list(phase2_encryption_algorithms_request_list_value()()),
        "Phase2IntegrityAlgorithms" => list(phase2_integrity_algorithms_request_list_value()()),
        "Phase2LifetimeSeconds" => integer(),
        "PreSharedKey" => String.t(),
        "RekeyFuzzPercentage" => integer(),
        "RekeyMarginTimeSeconds" => integer(),
        "ReplayWindowSize" => integer(),
        "StartupAction" => String.t(),
        "TunnelInsideCidr" => String.t(),
        "TunnelInsideIpv6Cidr" => String.t()
      }
      
  """
  @type vpn_tunnel_options_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_transit_gateway_policy_table_result() :: %{
        "Association" => transit_gateway_policy_table_association()
      }
      
  """
  @type associate_transit_gateway_policy_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      allocate_hosts_result() :: %{
        "HostIds" => list(String.t()())
      }
      
  """
  @type allocate_hosts_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_instances_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VerifiedAccessInstanceIds") => list(String.t()())
      }
      
  """
  @type describe_verified_access_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_image_deprecation_request() :: %{
        optional("DryRun") => boolean(),
        required("DeprecateAt") => non_neg_integer(),
        required("ImageId") => String.t()
      }
      
  """
  @type enable_image_deprecation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_queued_reserved_instances_error() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type delete_queued_reserved_instances_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_acls_result() :: %{
        "NetworkAcls" => list(network_acl()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_network_acls_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_logs() :: %{
        "CloudWatchLogs" => verified_access_log_cloud_watch_logs_destination(),
        "IncludeTrustContext" => boolean(),
        "KinesisDataFirehose" => verified_access_log_kinesis_data_firehose_destination(),
        "LogVersion" => String.t(),
        "S3" => verified_access_log_s3_destination()
      }
      
  """
  @type verified_access_logs() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_bundle_task_result() :: %{
        "BundleTask" => bundle_task()
      }
      
  """
  @type cancel_bundle_task_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_route_table_vpc_associations_result() :: %{
        "LocalGatewayRouteTableVpcAssociations" => list(local_gateway_route_table_vpc_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_local_gateway_route_table_vpc_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_scope_request() :: %{
        optional("DryRun") => boolean(),
        required("IpamScopeId") => String.t()
      }
      
  """
  @type delete_ipam_scope_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_vpc_endpoint_connections_result() :: %{
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type accept_vpc_endpoint_connections_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_trust_provider_oidc_options() :: %{
        "AuthorizationEndpoint" => String.t(),
        "ClientId" => String.t(),
        "ClientSecret" => String.t(),
        "Issuer" => String.t(),
        "Scope" => String.t(),
        "TokenEndpoint" => String.t(),
        "UserInfoEndpoint" => String.t()
      }
      
  """
  @type modify_verified_access_trust_provider_oidc_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_policy_table_association() :: %{
        "ResourceId" => String.t(),
        "ResourceType" => list(any()),
        "State" => list(any()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayPolicyTableId" => String.t()
      }
      
  """
  @type transit_gateway_policy_table_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_client_vpn_client_certificate_revocation_list_request() :: %{
        optional("DryRun") => boolean(),
        required("CertificateRevocationList") => String.t(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type import_client_vpn_client_certificate_revocation_list_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_vpn_gateway_result() :: %{
        "VpcAttachment" => vpc_attachment()
      }
      
  """
  @type attach_vpn_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attachment_ena_srd_udp_specification() :: %{
        "EnaSrdUdpEnabled" => boolean()
      }
      
  """
  @type attachment_ena_srd_udp_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_fast_launch_result() :: %{
        "ImageId" => String.t(),
        "LaunchTemplate" => fast_launch_launch_template_specification_response(),
        "MaxParallelLaunches" => integer(),
        "OwnerId" => String.t(),
        "ResourceType" => list(any()),
        "SnapshotConfiguration" => fast_launch_snapshot_configuration_response(),
        "State" => list(any()),
        "StateTransitionReason" => String.t(),
        "StateTransitionTime" => non_neg_integer()
      }
      
  """
  @type enable_fast_launch_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_capacity() :: %{
        "AvailableCapacity" => integer(),
        "InstanceType" => String.t(),
        "TotalCapacity" => integer()
      }
      
  """
  @type instance_capacity() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_local_gateway_route_request() :: %{
        optional("DestinationCidrBlock") => String.t(),
        optional("DestinationPrefixListId") => String.t(),
        optional("DryRun") => boolean(),
        required("LocalGatewayRouteTableId") => String.t()
      }
      
  """
  @type delete_local_gateway_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_connect_request_options() :: %{
        "Protocol" => list(any())
      }
      
  """
  @type create_transit_gateway_connect_request_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      copy_snapshot_result() :: %{
        "SnapshotId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type copy_snapshot_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_local_gateway_route_result() :: %{
        "Route" => local_gateway_route()
      }
      
  """
  @type modify_local_gateway_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_services_result() :: %{
        "NextToken" => String.t(),
        "ServiceDetails" => list(service_detail()()),
        "ServiceNames" => list(String.t()())
      }
      
  """
  @type describe_vpc_endpoint_services_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_ipam_organization_admin_account_request() :: %{
        optional("DryRun") => boolean(),
        required("DelegatedAdminAccountId") => String.t()
      }
      
  """
  @type enable_ipam_organization_admin_account_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_vpc_classic_link_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcId") => String.t()
      }
      
  """
  @type enable_vpc_classic_link_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_customer_gateway_request() :: %{
        optional("BgpAsn") => integer(),
        optional("BgpAsnExtended") => float(),
        optional("CertificateArn") => String.t(),
        optional("DeviceName") => String.t(),
        optional("DryRun") => boolean(),
        optional("IpAddress") => String.t(),
        optional("PublicIp") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("Type") => list(any())
      }
      
  """
  @type create_customer_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_mac_hosts_request() :: %{
        optional("Filters") => list(filter()()),
        optional("HostIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_mac_hosts_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      user_id_group_pair() :: %{
        "Description" => String.t(),
        "GroupId" => String.t(),
        "GroupName" => String.t(),
        "PeeringStatus" => String.t(),
        "UserId" => String.t(),
        "VpcId" => String.t(),
        "VpcPeeringConnectionId" => String.t()
      }
      
  """
  @type user_id_group_pair() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_task() :: %{
        "Description" => String.t(),
        "ExportTaskId" => String.t(),
        "ExportToS3Task" => export_to_s3_task(),
        "InstanceExportDetails" => instance_export_details(),
        "State" => list(any()),
        "StatusMessage" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type export_task() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("OperatingRegions") => list(add_ipam_operating_region()()),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("Tier") => list(any())
      }
      
  """
  @type create_ipam_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_insights_path_request() :: %{
        optional("DryRun") => boolean(),
        required("NetworkInsightsPathId") => String.t()
      }
      
  """
  @type delete_network_insights_path_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_group() :: %{
        "GroupIpAddress" => String.t(),
        "GroupMember" => boolean(),
        "GroupSource" => boolean(),
        "MemberType" => list(any()),
        "NetworkInterfaceId" => String.t(),
        "ResourceId" => String.t(),
        "ResourceOwnerId" => String.t(),
        "ResourceType" => list(any()),
        "SourceType" => list(any()),
        "SubnetId" => String.t(),
        "TransitGatewayAttachmentId" => String.t()
      }
      
  """
  @type transit_gateway_multicast_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deregister_transit_gateway_multicast_group_sources_request() :: %{
        optional("DryRun") => boolean(),
        optional("GroupIpAddress") => String.t(),
        optional("NetworkInterfaceIds") => list(String.t()()),
        optional("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type deregister_transit_gateway_multicast_group_sources_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_options() :: %{
        "UsageStrategy" => list(any())
      }
      
  """
  @type capacity_reservation_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_acls_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NetworkAclIds") => list(String.t()()),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_network_acls_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_private_dns_name_options_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_private_dns_name_options_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_log_s3_destination() :: %{
        "BucketName" => String.t(),
        "BucketOwner" => String.t(),
        "DeliveryStatus" => verified_access_log_delivery_status(),
        "Enabled" => boolean(),
        "Prefix" => String.t()
      }
      
  """
  @type verified_access_log_s3_destination() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_security_group_result() :: %{
        "GroupId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type create_security_group_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_vpc_attachment_request() :: %{
        optional("DryRun") => boolean(),
        optional("Options") => create_transit_gateway_vpc_attachment_request_options(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("SubnetIds") => list(String.t()()),
        required("TransitGatewayId") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type create_transit_gateway_vpc_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_verified_access_group_policy_request() :: %{
        optional("DryRun") => boolean(),
        required("VerifiedAccessGroupId") => String.t()
      }
      
  """
  @type get_verified_access_group_policy_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_transit_gateway_result() :: %{
        "TransitGateway" => transit_gateway()
      }
      
  """
  @type modify_transit_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipams_result() :: %{
        "Ipams" => list(ipam()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_ipams_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      federated_authentication() :: %{
        "SamlProviderArn" => String.t(),
        "SelfServiceSamlProviderArn" => String.t()
      }
      
  """
  @type federated_authentication() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_placement() :: %{
        "AvailabilityZone" => String.t(),
        "GroupName" => String.t(),
        "Tenancy" => list(any())
      }
      
  """
  @type spot_placement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_flow_logs_result() :: %{
        "FlowLogs" => list(flow_log()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_flow_logs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      tunnel_option() :: %{
        "DpdTimeoutAction" => String.t(),
        "DpdTimeoutSeconds" => integer(),
        "EnableTunnelLifecycleControl" => boolean(),
        "IkeVersions" => list(i_k_e_versions_list_value()()),
        "LogOptions" => vpn_tunnel_log_options(),
        "OutsideIpAddress" => String.t(),
        "Phase1DHGroupNumbers" => list(phase1_d_h_group_numbers_list_value()()),
        "Phase1EncryptionAlgorithms" => list(phase1_encryption_algorithms_list_value()()),
        "Phase1IntegrityAlgorithms" => list(phase1_integrity_algorithms_list_value()()),
        "Phase1LifetimeSeconds" => integer(),
        "Phase2DHGroupNumbers" => list(phase2_d_h_group_numbers_list_value()()),
        "Phase2EncryptionAlgorithms" => list(phase2_encryption_algorithms_list_value()()),
        "Phase2IntegrityAlgorithms" => list(phase2_integrity_algorithms_list_value()()),
        "Phase2LifetimeSeconds" => integer(),
        "PreSharedKey" => String.t(),
        "RekeyFuzzPercentage" => integer(),
        "RekeyMarginTimeSeconds" => integer(),
        "ReplayWindowSize" => integer(),
        "StartupAction" => String.t(),
        "TunnelInsideCidr" => String.t(),
        "TunnelInsideIpv6Cidr" => String.t()
      }
      
  """
  @type tunnel_option() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      update_security_group_rule_descriptions_egress_request() :: %{
        optional("DryRun") => boolean(),
        optional("GroupId") => String.t(),
        optional("GroupName") => String.t(),
        optional("IpPermissions") => list(ip_permission()()),
        optional("SecurityGroupRuleDescriptions") => list(security_group_rule_description()())
      }
      
  """
  @type update_security_group_rule_descriptions_egress_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      apply_security_groups_to_client_vpn_target_network_request() :: %{
        optional("DryRun") => boolean(),
        required("ClientVpnEndpointId") => String.t(),
        required("SecurityGroupIds") => list(String.t()()),
        required("VpcId") => String.t()
      }
      
  """
  @type apply_security_groups_to_client_vpn_target_network_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_verified_access_group_policy_result() :: %{
        "PolicyDocument" => String.t(),
        "PolicyEnabled" => boolean()
      }
      
  """
  @type get_verified_access_group_policy_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_service_permissions_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("ServiceId") => String.t()
      }
      
  """
  @type describe_vpc_endpoint_service_permissions_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_default_credit_specification_result() :: %{
        "InstanceFamilyCreditSpecification" => instance_family_credit_specification()
      }
      
  """
  @type get_default_credit_specification_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase1_d_h_group_numbers_list_value() :: %{
        "Value" => integer()
      }
      
  """
  @type phase1_d_h_group_numbers_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_snapshot_tier_result() :: %{
        "IsPermanentRestore" => boolean(),
        "RestoreDuration" => integer(),
        "RestoreStartTime" => non_neg_integer(),
        "SnapshotId" => String.t()
      }
      
  """
  @type restore_snapshot_tier_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_address_request() :: %{
        optional("AllocationId") => String.t(),
        optional("AllowReassociation") => boolean(),
        optional("DryRun") => boolean(),
        optional("InstanceId") => String.t(),
        optional("NetworkInterfaceId") => String.t(),
        optional("PrivateIpAddress") => String.t(),
        optional("PublicIp") => String.t()
      }
      
  """
  @type associate_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_transit_gateway_policy_table_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t(),
        required("TransitGatewayPolicyTableId") => String.t()
      }
      
  """
  @type disassociate_transit_gateway_policy_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      slot_start_time_range_request() :: %{
        "EarliestTime" => non_neg_integer(),
        "LatestTime" => non_neg_integer()
      }
      
  """
  @type slot_start_time_range_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpn_gateway_request() :: %{
        optional("AmazonSideAsn") => float(),
        optional("AvailabilityZone") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("Type") => list(any())
      }
      
  """
  @type create_vpn_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      advertise_byoip_cidr_result() :: %{
        "ByoipCidr" => byoip_cidr()
      }
      
  """
  @type advertise_byoip_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_insights_access_scope_analysis() :: %{
        "AnalyzedEniCount" => integer(),
        "EndDate" => non_neg_integer(),
        "FindingsFound" => list(any()),
        "NetworkInsightsAccessScopeAnalysisArn" => String.t(),
        "NetworkInsightsAccessScopeAnalysisId" => String.t(),
        "NetworkInsightsAccessScopeId" => String.t(),
        "StartDate" => non_neg_integer(),
        "Status" => list(any()),
        "StatusMessage" => String.t(),
        "Tags" => list(tag()()),
        "WarningMessage" => String.t()
      }
      
  """
  @type network_insights_access_scope_analysis() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_endpoint_connection_notification_result() :: %{
        "ClientToken" => String.t(),
        "ConnectionNotification" => connection_notification()
      }
      
  """
  @type create_vpc_endpoint_connection_notification_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_launch_template_versions_result() :: %{
        "SuccessfullyDeletedLaunchTemplateVersions" => list(delete_launch_template_versions_response_success_item()()),
        "UnsuccessfullyDeletedLaunchTemplateVersions" => list(delete_launch_template_versions_response_error_item()())
      }
      
  """
  @type delete_launch_template_versions_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_metadata_options_response() :: %{
        "HttpEndpoint" => list(any()),
        "HttpProtocolIpv6" => list(any()),
        "HttpPutResponseHopLimit" => integer(),
        "HttpTokens" => list(any()),
        "InstanceMetadataTags" => list(any()),
        "State" => list(any())
      }
      
  """
  @type instance_metadata_options_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_volume_attribute_result() :: %{
        "AutoEnableIO" => attribute_boolean_value(),
        "ProductCodes" => list(product_code()()),
        "VolumeId" => String.t()
      }
      
  """
  @type describe_volume_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_topology_result() :: %{
        "Instances" => list(instance_topology()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_instance_topology_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      device_options() :: %{
        "PublicSigningKeyUrl" => String.t(),
        "TenantId" => String.t()
      }
      
  """
  @type device_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fast_launch_images_result() :: %{
        "FastLaunchImages" => list(describe_fast_launch_images_success_item()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_fast_launch_images_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fpga_info() :: %{
        "Fpgas" => list(fpga_device_info()()),
        "TotalFpgaMemoryInMiB" => integer()
      }
      
  """
  @type fpga_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_volume_permission_modifications() :: %{
        "Add" => list(create_volume_permission()()),
        "Remove" => list(create_volume_permission()())
      }
      
  """
  @type create_volume_permission_modifications() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_login_banner_options() :: %{
        "BannerText" => String.t(),
        "Enabled" => boolean()
      }
      
  """
  @type client_login_banner_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      path_statement() :: %{
        "PacketHeaderStatement" => packet_header_statement(),
        "ResourceStatement" => resource_statement()
      }
      
  """
  @type path_statement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_endpoint_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DnsOptions") => dns_options_specification(),
        optional("DryRun") => boolean(),
        optional("IpAddressType") => list(any()),
        optional("PolicyDocument") => String.t(),
        optional("PrivateDnsEnabled") => boolean(),
        optional("RouteTableIds") => list(String.t()()),
        optional("SecurityGroupIds") => list(String.t()()),
        optional("SubnetConfigurations") => list(subnet_configuration()()),
        optional("SubnetIds") => list(String.t()()),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("VpcEndpointType") => list(any()),
        required("ServiceName") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type create_vpc_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_transit_gateway_route_table_propagation_result() :: %{
        "Propagation" => transit_gateway_propagation()
      }
      
  """
  @type disable_transit_gateway_route_table_propagation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      traffic_mirror_target() :: %{
        "Description" => String.t(),
        "GatewayLoadBalancerEndpointId" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "NetworkLoadBalancerArn" => String.t(),
        "OwnerId" => String.t(),
        "Tags" => list(tag()()),
        "TrafficMirrorTargetId" => String.t(),
        "Type" => list(any())
      }
      
  """
  @type traffic_mirror_target() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_transit_gateway_peering_attachment_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type accept_transit_gateway_peering_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_capacity_reservation_request() :: %{
        optional("DryRun") => boolean(),
        required("CapacityReservationId") => String.t()
      }
      
  """
  @type cancel_capacity_reservation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_image_result() :: %{
        "Description" => String.t(),
        "DiskImageFormat" => list(any()),
        "ExportImageTaskId" => String.t(),
        "ImageId" => String.t(),
        "Progress" => String.t(),
        "RoleName" => String.t(),
        "S3ExportLocation" => export_task_s3_location(),
        "Status" => String.t(),
        "StatusMessage" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type export_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accelerator_total_memory_mi_b_request() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type accelerator_total_memory_mi_b_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      load_permission() :: %{
        "Group" => list(any()),
        "UserId" => String.t()
      }
      
  """
  @type load_permission() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      port_range() :: %{
        "From" => integer(),
        "To" => integer()
      }
      
  """
  @type port_range() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_endpoint_connection() :: %{
        "CreationTimestamp" => non_neg_integer(),
        "DnsEntries" => list(dns_entry()()),
        "GatewayLoadBalancerArns" => list(String.t()()),
        "IpAddressType" => list(any()),
        "NetworkLoadBalancerArns" => list(String.t()()),
        "ServiceId" => String.t(),
        "Tags" => list(tag()()),
        "VpcEndpointConnectionId" => String.t(),
        "VpcEndpointId" => String.t(),
        "VpcEndpointOwner" => String.t(),
        "VpcEndpointState" => list(any())
      }
      
  """
  @type vpc_endpoint_connection() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_network_interface_request() :: %{
        optional("DryRun") => boolean(),
        optional("EnaSrdSpecification") => ena_srd_specification(),
        optional("NetworkCardIndex") => integer(),
        required("DeviceIndex") => integer(),
        required("InstanceId") => String.t(),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type attach_network_interface_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpn_gateway_result() :: %{
        "VpnGateway" => vpn_gateway()
      }
      
  """
  @type create_vpn_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_traffic_mirror_session_result() :: %{
        "TrafficMirrorSessionId" => String.t()
      }
      
  """
  @type delete_traffic_mirror_session_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_verified_access_trust_provider_result() :: %{
        "VerifiedAccessTrustProvider" => verified_access_trust_provider()
      }
      
  """
  @type delete_verified_access_trust_provider_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_attachment_propagations_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayAttachmentPropagations" => list(transit_gateway_attachment_propagation()())
      }
      
  """
  @type get_transit_gateway_attachment_propagations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_endpoints_result() :: %{
        "ClientVpnEndpoints" => list(client_vpn_endpoint()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_client_vpn_endpoints_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_client_vpn_endpoint_result() :: %{
        "Status" => client_vpn_endpoint_status()
      }
      
  """
  @type delete_client_vpn_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_reserved_instances_listing_request() :: %{
        required("ReservedInstancesListingId") => String.t()
      }
      
  """
  @type cancel_reserved_instances_listing_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_subnet_result() :: %{
        "Subnet" => subnet()
      }
      
  """
  @type create_subnet_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_tunnel_options_request() :: %{
        optional("DryRun") => boolean(),
        optional("SkipTunnelReplacement") => boolean(),
        required("TunnelOptions") => modify_vpn_tunnel_options_specification(),
        required("VpnConnectionId") => String.t(),
        required("VpnTunnelOutsideIpAddress") => String.t()
      }
      
  """
  @type modify_vpn_tunnel_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_network_interface_attachment() :: %{
        "AttachTime" => non_neg_integer(),
        "AttachmentId" => String.t(),
        "DeleteOnTermination" => boolean(),
        "DeviceIndex" => integer(),
        "EnaSrdSpecification" => instance_attachment_ena_srd_specification(),
        "NetworkCardIndex" => integer(),
        "Status" => list(any())
      }
      
  """
  @type instance_network_interface_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_status_event() :: %{
        "Code" => list(any()),
        "Description" => String.t(),
        "InstanceEventId" => String.t(),
        "NotAfter" => non_neg_integer(),
        "NotBefore" => non_neg_integer(),
        "NotBeforeDeadline" => non_neg_integer()
      }
      
  """
  @type instance_status_event() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_placement_request() :: %{
        optional("Affinity") => list(any()),
        optional("GroupId") => String.t(),
        optional("GroupName") => String.t(),
        optional("HostId") => String.t(),
        optional("HostResourceGroupArn") => String.t(),
        optional("PartitionNumber") => integer(),
        optional("Tenancy") => list(any()),
        required("InstanceId") => String.t()
      }
      
  """
  @type modify_instance_placement_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      media_device_memory_info() :: %{
        "SizeInMiB" => integer()
      }
      
  """
  @type media_device_memory_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fleet_history_result() :: %{
        "FleetId" => String.t(),
        "HistoryRecords" => list(history_record_entry()()),
        "LastEvaluatedTime" => non_neg_integer(),
        "NextToken" => String.t(),
        "StartTime" => non_neg_integer()
      }
      
  """
  @type describe_fleet_history_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_reserved_instances_result() :: %{
        "ReservedInstancesModificationId" => String.t()
      }
      
  """
  @type modify_reserved_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_acl_request() :: %{
        optional("DryRun") => boolean(),
        required("NetworkAclId") => String.t()
      }
      
  """
  @type delete_network_acl_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_nat_gateway_address_request() :: %{
        optional("DryRun") => boolean(),
        optional("PrivateIpAddresses") => list(String.t()()),
        required("AllocationIds") => list(String.t()()),
        required("NatGatewayId") => String.t()
      }
      
  """
  @type associate_nat_gateway_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      allowed_principal() :: %{
        "Principal" => String.t(),
        "PrincipalType" => list(any()),
        "ServiceId" => String.t(),
        "ServicePermissionId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type allowed_principal() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_reserved_instances_exchange_quote_result() :: %{
        "CurrencyCode" => String.t(),
        "IsValidExchange" => boolean(),
        "OutputReservedInstancesWillExpireAt" => non_neg_integer(),
        "PaymentDue" => String.t(),
        "ReservedInstanceValueRollup" => reservation_value(),
        "ReservedInstanceValueSet" => list(reserved_instance_reservation_value()()),
        "TargetConfigurationValueRollup" => reservation_value(),
        "TargetConfigurationValueSet" => list(target_reservation_value()()),
        "ValidationFailureReason" => String.t()
      }
      
  """
  @type get_reserved_instances_exchange_quote_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_public_address_tag() :: %{
        "Key" => String.t(),
        "Value" => String.t()
      }
      
  """
  @type ipam_public_address_tag() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_attachment() :: %{
        "Association" => transit_gateway_attachment_association(),
        "CreationTime" => non_neg_integer(),
        "ResourceId" => String.t(),
        "ResourceOwnerId" => String.t(),
        "ResourceType" => list(any()),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayId" => String.t(),
        "TransitGatewayOwnerId" => String.t()
      }
      
  """
  @type transit_gateway_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpn_connections_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("VpnConnectionIds") => list(String.t()())
      }
      
  """
  @type describe_vpn_connections_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_route_table_route() :: %{
        "AttachmentId" => String.t(),
        "DestinationCidr" => String.t(),
        "PrefixListId" => String.t(),
        "ResourceId" => String.t(),
        "ResourceType" => String.t(),
        "RouteOrigin" => String.t(),
        "State" => String.t()
      }
      
  """
  @type transit_gateway_route_table_route() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      request_launch_template_data() :: %{
        "BlockDeviceMappings" => list(launch_template_block_device_mapping_request()()),
        "CapacityReservationSpecification" => launch_template_capacity_reservation_specification_request(),
        "CpuOptions" => launch_template_cpu_options_request(),
        "CreditSpecification" => credit_specification_request(),
        "DisableApiStop" => boolean(),
        "DisableApiTermination" => boolean(),
        "EbsOptimized" => boolean(),
        "ElasticGpuSpecifications" => list(elastic_gpu_specification()()),
        "ElasticInferenceAccelerators" => list(launch_template_elastic_inference_accelerator()()),
        "EnclaveOptions" => launch_template_enclave_options_request(),
        "HibernationOptions" => launch_template_hibernation_options_request(),
        "IamInstanceProfile" => launch_template_iam_instance_profile_specification_request(),
        "ImageId" => String.t(),
        "InstanceInitiatedShutdownBehavior" => list(any()),
        "InstanceMarketOptions" => launch_template_instance_market_options_request(),
        "InstanceRequirements" => instance_requirements_request(),
        "InstanceType" => list(any()),
        "KernelId" => String.t(),
        "KeyName" => String.t(),
        "LicenseSpecifications" => list(launch_template_license_configuration_request()()),
        "MaintenanceOptions" => launch_template_instance_maintenance_options_request(),
        "MetadataOptions" => launch_template_instance_metadata_options_request(),
        "Monitoring" => launch_templates_monitoring_request(),
        "NetworkInterfaces" => list(launch_template_instance_network_interface_specification_request()()),
        "Placement" => launch_template_placement_request(),
        "PrivateDnsNameOptions" => launch_template_private_dns_name_options_request(),
        "RamDiskId" => String.t(),
        "SecurityGroupIds" => list(String.t()()),
        "SecurityGroups" => list(String.t()()),
        "TagSpecifications" => list(launch_template_tag_specification_request()()),
        "UserData" => String.t()
      }
      
  """
  @type request_launch_template_data() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_scheduled_instances_result() :: %{
        "ScheduledInstanceSet" => list(scheduled_instance()())
      }
      
  """
  @type purchase_scheduled_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_client_vpn_route_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        required("ClientVpnEndpointId") => String.t(),
        required("DestinationCidrBlock") => String.t(),
        required("TargetVpcSubnetId") => String.t()
      }
      
  """
  @type create_client_vpn_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_key_pair_result() :: %{
        "KeyFingerprint" => String.t(),
        "KeyName" => String.t(),
        "KeyPairId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type import_key_pair_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      placement_response() :: %{
        "GroupName" => String.t()
      }
      
  """
  @type placement_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_result() :: %{
        "Ipam" => ipam()
      }
      
  """
  @type delete_ipam_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_client_vpn_endpoint_request() :: %{
        optional("ClientConnectOptions") => client_connect_options(),
        optional("ClientLoginBannerOptions") => client_login_banner_options(),
        optional("ConnectionLogOptions") => connection_log_options(),
        optional("Description") => String.t(),
        optional("DnsServers") => dns_servers_options_modify_structure(),
        optional("DryRun") => boolean(),
        optional("SecurityGroupIds") => list(String.t()()),
        optional("SelfServicePortal") => list(any()),
        optional("ServerCertificateArn") => String.t(),
        optional("SessionTimeoutHours") => integer(),
        optional("SplitTunnel") => boolean(),
        optional("VpcId") => String.t(),
        optional("VpnPort") => integer(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type modify_client_vpn_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_image_request() :: %{
        optional("Architecture") => list(any()),
        optional("BillingProducts") => list(String.t()()),
        optional("BlockDeviceMappings") => list(block_device_mapping()()),
        optional("BootMode") => list(any()),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("EnaSupport") => boolean(),
        optional("ImageLocation") => String.t(),
        optional("ImdsSupport") => list(any()),
        optional("KernelId") => String.t(),
        optional("RamdiskId") => String.t(),
        optional("RootDeviceName") => String.t(),
        optional("SriovNetSupport") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("TpmSupport") => list(any()),
        optional("UefiData") => String.t(),
        optional("VirtualizationType") => String.t(),
        required("Name") => String.t()
      }
      
  """
  @type register_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_vpc_classic_link_dns_support_request() :: %{
        optional("VpcId") => String.t()
      }
      
  """
  @type disable_vpc_classic_link_dns_support_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_image_license_configuration_response() :: %{
        "LicenseConfigurationArn" => String.t()
      }
      
  """
  @type import_image_license_configuration_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_specification() :: %{
        "AddressingType" => String.t(),
        "BlockDeviceMappings" => list(block_device_mapping()()),
        "EbsOptimized" => boolean(),
        "IamInstanceProfile" => iam_instance_profile_specification(),
        "ImageId" => String.t(),
        "InstanceType" => list(any()),
        "KernelId" => String.t(),
        "KeyName" => String.t(),
        "Monitoring" => run_instances_monitoring_enabled(),
        "NetworkInterfaces" => list(instance_network_interface_specification()()),
        "Placement" => spot_placement(),
        "RamdiskId" => String.t(),
        "SecurityGroups" => list(group_identifier()()),
        "SubnetId" => String.t(),
        "UserData" => String.t()
      }
      
  """
  @type launch_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_local_gateway_route_request() :: %{
        optional("DestinationCidrBlock") => String.t(),
        optional("DestinationPrefixListId") => String.t(),
        optional("DryRun") => boolean(),
        optional("LocalGatewayVirtualInterfaceGroupId") => String.t(),
        optional("NetworkInterfaceId") => String.t(),
        required("LocalGatewayRouteTableId") => String.t()
      }
      
  """
  @type modify_local_gateway_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_vpn_connection_device_sample_configuration_result() :: %{
        "VpnConnectionDeviceSampleConfiguration" => String.t()
      }
      
  """
  @type get_vpn_connection_device_sample_configuration_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      iam_instance_profile_specification() :: %{
        "Arn" => String.t(),
        "Name" => String.t()
      }
      
  """
  @type iam_instance_profile_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_virtual_interfaces_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LocalGatewayVirtualInterfaceIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_local_gateway_virtual_interfaces_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_domain() :: %{
        "CreationTime" => non_neg_integer(),
        "Options" => transit_gateway_multicast_domain_options(),
        "OwnerId" => String.t(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayId" => String.t(),
        "TransitGatewayMulticastDomainArn" => String.t(),
        "TransitGatewayMulticastDomainId" => String.t()
      }
      
  """
  @type transit_gateway_multicast_domain() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_image_task() :: %{
        "Description" => String.t(),
        "ExportImageTaskId" => String.t(),
        "ImageId" => String.t(),
        "Progress" => String.t(),
        "S3ExportLocation" => export_task_s3_location(),
        "Status" => String.t(),
        "StatusMessage" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type export_image_task() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      trunk_interface_association() :: %{
        "AssociationId" => String.t(),
        "BranchInterfaceId" => String.t(),
        "GreKey" => integer(),
        "InterfaceProtocol" => list(any()),
        "Tags" => list(tag()()),
        "TrunkInterfaceId" => String.t(),
        "VlanId" => integer()
      }
      
  """
  @type trunk_interface_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_instance_logging_configuration_result() :: %{
        "LoggingConfiguration" => verified_access_instance_logging_configuration()
      }
      
  """
  @type modify_verified_access_instance_logging_configuration_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_conversion_tasks_result() :: %{
        "ConversionTasks" => list(conversion_task()())
      }
      
  """
  @type describe_conversion_tasks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_log_kinesis_data_firehose_destination() :: %{
        "DeliveryStatus" => verified_access_log_delivery_status(),
        "DeliveryStream" => String.t(),
        "Enabled" => boolean()
      }
      
  """
  @type verified_access_log_kinesis_data_firehose_destination() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_subnet_cidr_block_result() :: %{
        "Ipv6CidrBlockAssociation" => subnet_ipv6_cidr_block_association(),
        "SubnetId" => String.t()
      }
      
  """
  @type disassociate_subnet_cidr_block_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_multicast_domain_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type delete_transit_gateway_multicast_domain_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      tag_specification() :: %{
        "ResourceType" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type tag_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      start_vpc_endpoint_service_private_dns_verification_request() :: %{
        optional("DryRun") => boolean(),
        required("ServiceId") => String.t()
      }
      
  """
  @type start_vpc_endpoint_service_private_dns_verification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unlock_snapshot_request() :: %{
        optional("DryRun") => boolean(),
        required("SnapshotId") => String.t()
      }
      
  """
  @type unlock_snapshot_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      firewall_stateful_rule() :: %{
        "DestinationPorts" => list(port_range()()),
        "Destinations" => list(String.t()()),
        "Direction" => String.t(),
        "Protocol" => String.t(),
        "RuleAction" => String.t(),
        "RuleGroupArn" => String.t(),
        "SourcePorts" => list(port_range()()),
        "Sources" => list(String.t()())
      }
      
  """
  @type firewall_stateful_rule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_connection_notification_result() :: %{
        "ReturnValue" => boolean()
      }
      
  """
  @type modify_vpc_endpoint_connection_notification_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      subnet_cidr_block_state() :: %{
        "State" => list(any()),
        "StatusMessage" => String.t()
      }
      
  """
  @type subnet_cidr_block_state() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_vpc_classic_link_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type enable_vpc_classic_link_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      snapshot() :: %{
        "DataEncryptionKeyId" => String.t(),
        "Description" => String.t(),
        "Encrypted" => boolean(),
        "KmsKeyId" => String.t(),
        "OutpostArn" => String.t(),
        "OwnerAlias" => String.t(),
        "OwnerId" => String.t(),
        "Progress" => String.t(),
        "RestoreExpiryTime" => non_neg_integer(),
        "SnapshotId" => String.t(),
        "SseType" => list(any()),
        "StartTime" => non_neg_integer(),
        "State" => list(any()),
        "StateMessage" => String.t(),
        "StorageTier" => list(any()),
        "Tags" => list(tag()()),
        "VolumeId" => String.t(),
        "VolumeSize" => integer()
      }
      
  """
  @type snapshot() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_default_subnet_request() :: %{
        optional("DryRun") => boolean(),
        optional("Ipv6Native") => boolean(),
        required("AvailabilityZone") => String.t()
      }
      
  """
  @type create_default_subnet_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_fpga_image_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("LogsStorageLocation") => storage_location(),
        optional("Name") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("InputStorageLocation") => storage_location()
      }
      
  """
  @type create_fpga_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_availability_zones_request() :: %{
        optional("AllAvailabilityZones") => boolean(),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("ZoneIds") => list(String.t()()),
        optional("ZoneNames") => list(String.t()())
      }
      
  """
  @type describe_availability_zones_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_route_table_request() :: %{
        optional("DryRun") => boolean(),
        required("AssociationId") => String.t()
      }
      
  """
  @type disassociate_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_verified_access_endpoint_policy_request() :: %{
        optional("DryRun") => boolean(),
        required("VerifiedAccessEndpointId") => String.t()
      }
      
  """
  @type get_verified_access_endpoint_policy_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provision_public_ipv4_pool_cidr_result() :: %{
        "PoolAddressRange" => public_ipv4_pool_range(),
        "PoolId" => String.t()
      }
      
  """
  @type provision_public_ipv4_pool_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      image() :: %{
        "SriovNetSupport" => String.t(),
        "RootDeviceName" => String.t(),
        "ProductCodes" => list(product_code()()),
        "Tags" => list(tag()()),
        "CreationDate" => String.t(),
        "OwnerId" => String.t(),
        "ImageId" => String.t(),
        "BlockDeviceMappings" => list(block_device_mapping()()),
        "TpmSupport" => list(any()),
        "Public" => boolean(),
        "LastLaunchedTime" => String.t(),
        "ImageLocation" => String.t(),
        "RamdiskId" => String.t(),
        "PlatformDetails" => String.t(),
        "KernelId" => String.t(),
        "ImageType" => list(any()),
        "StateReason" => state_reason(),
        "State" => list(any()),
        "UsageOperation" => String.t(),
        "EnaSupport" => boolean(),
        "Hypervisor" => list(any()),
        "VirtualizationType" => list(any()),
        "SourceInstanceId" => String.t(),
        "RootDeviceType" => list(any()),
        "BootMode" => list(any()),
        "DeregistrationProtection" => String.t(),
        "Architecture" => list(any()),
        "Name" => String.t(),
        "Description" => String.t(),
        "ImdsSupport" => list(any()),
        "ImageOwnerAlias" => String.t(),
        "DeprecationTime" => String.t(),
        "Platform" => list(any())
      }
      
  """
  @type image() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_capacity_block_offerings_result() :: %{
        "CapacityBlockOfferings" => list(capacity_block_offering()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_capacity_block_offerings_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_verified_access_instance_result() :: %{
        "VerifiedAccessInstance" => verified_access_instance()
      }
      
  """
  @type delete_verified_access_instance_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_insights_access_scope_request() :: %{
        optional("DryRun") => boolean(),
        optional("ExcludePaths") => list(access_scope_path_request()()),
        optional("MatchPaths") => list(access_scope_path_request()()),
        optional("TagSpecifications") => list(tag_specification()()),
        required("ClientToken") => String.t()
      }
      
  """
  @type create_network_insights_access_scope_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_fast_snapshot_restores_result() :: %{
        "Successful" => list(disable_fast_snapshot_restore_success_item()()),
        "Unsuccessful" => list(disable_fast_snapshot_restore_error_item()())
      }
      
  """
  @type disable_fast_snapshot_restores_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_ipam_resource_discovery_request() :: %{
        optional("DryRun") => boolean(),
        required("IpamResourceDiscoveryAssociationId") => String.t()
      }
      
  """
  @type disassociate_ipam_resource_discovery_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      key_pair_info() :: %{
        "CreateTime" => non_neg_integer(),
        "KeyFingerprint" => String.t(),
        "KeyName" => String.t(),
        "KeyPairId" => String.t(),
        "KeyType" => list(any()),
        "PublicKey" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type key_pair_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_address_transfers_request() :: %{
        optional("AllocationIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_address_transfers_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      monitoring() :: %{
        "State" => list(any())
      }
      
  """
  @type monitoring() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_transit_gateway_vpc_attachment_request_options() :: %{
        "ApplianceModeSupport" => list(any()),
        "DnsSupport" => list(any()),
        "Ipv6Support" => list(any()),
        "SecurityGroupReferencingSupport" => list(any())
      }
      
  """
  @type modify_transit_gateway_vpc_attachment_request_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase1_encryption_algorithms_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type phase1_encryption_algorithms_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      detach_internet_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("InternetGatewayId") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type detach_internet_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_launch_template_specification() :: %{
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "Version" => String.t()
      }
      
  """
  @type fleet_launch_template_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_insights_analysis_request() :: %{
        optional("DryRun") => boolean(),
        required("NetworkInsightsAnalysisId") => String.t()
      }
      
  """
  @type delete_network_insights_analysis_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      send_diagnostic_interrupt_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t()
      }
      
  """
  @type send_diagnostic_interrupt_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_interface_permission_request() :: %{
        optional("DryRun") => boolean(),
        optional("Force") => boolean(),
        required("NetworkInterfacePermissionId") => String.t()
      }
      
  """
  @type delete_network_interface_permission_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_multicast_domain_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type get_transit_gateway_multicast_domain_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway() :: %{
        "CreationTime" => non_neg_integer(),
        "Description" => String.t(),
        "Options" => transit_gateway_options(),
        "OwnerId" => String.t(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayArn" => String.t(),
        "TransitGatewayId" => String.t()
      }
      
  """
  @type transit_gateway() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_scope_request() :: %{
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        required("IpamScopeId") => String.t()
      }
      
  """
  @type modify_ipam_scope_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      license_configuration_request() :: %{
        "LicenseConfigurationArn" => String.t()
      }
      
  """
  @type license_configuration_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_managed_prefix_list_result() :: %{
        "PrefixList" => managed_prefix_list()
      }
      
  """
  @type create_managed_prefix_list_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      athena_integration() :: %{
        "IntegrationResultS3DestinationArn" => String.t(),
        "PartitionEndDate" => non_neg_integer(),
        "PartitionLoadFrequency" => list(any()),
        "PartitionStartDate" => non_neg_integer()
      }
      
  """
  @type athena_integration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_permission_modifications() :: %{
        "Add" => list(launch_permission()()),
        "Remove" => list(launch_permission()())
      }
      
  """
  @type launch_permission_modifications() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_endpoint() :: %{
        "AssociatedTargetNetworks" => list(associated_target_network()()),
        "AuthenticationOptions" => list(client_vpn_authentication()()),
        "ClientCidrBlock" => String.t(),
        "ClientConnectOptions" => client_connect_response_options(),
        "ClientLoginBannerOptions" => client_login_banner_response_options(),
        "ClientVpnEndpointId" => String.t(),
        "ConnectionLogOptions" => connection_log_response_options(),
        "CreationTime" => String.t(),
        "DeletionTime" => String.t(),
        "Description" => String.t(),
        "DnsName" => String.t(),
        "DnsServers" => list(String.t()()),
        "SecurityGroupIds" => list(String.t()()),
        "SelfServicePortalUrl" => String.t(),
        "ServerCertificateArn" => String.t(),
        "SessionTimeoutHours" => integer(),
        "SplitTunnel" => boolean(),
        "Status" => client_vpn_endpoint_status(),
        "Tags" => list(tag()()),
        "TransportProtocol" => list(any()),
        "VpcId" => String.t(),
        "VpnPort" => integer(),
        "VpnProtocol" => list(any())
      }
      
  """
  @type client_vpn_endpoint() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_snapshot_attribute_request() :: %{
        optional("Attribute") => list(any()),
        optional("CreateVolumePermission") => create_volume_permission_modifications(),
        optional("DryRun") => boolean(),
        optional("GroupNames") => list(String.t()()),
        optional("OperationType") => list(any()),
        optional("UserIds") => list(String.t()()),
        required("SnapshotId") => String.t()
      }
      
  """
  @type modify_snapshot_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      internet_gateway_attachment() :: %{
        "State" => list(any()),
        "VpcId" => String.t()
      }
      
  """
  @type internet_gateway_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      list_images_in_recycle_bin_result() :: %{
        "Images" => list(image_recycle_bin_info()()),
        "NextToken" => String.t()
      }
      
  """
  @type list_images_in_recycle_bin_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_multicast_domain_request_options() :: %{
        "AutoAcceptSharedAssociations" => list(any()),
        "Igmpv2Support" => list(any()),
        "StaticSourcesSupport" => list(any())
      }
      
  """
  @type create_transit_gateway_multicast_domain_request_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_status_attachment_status() :: %{
        "InstanceId" => String.t(),
        "IoPerformance" => String.t()
      }
      
  """
  @type volume_status_attachment_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_aws_network_performance_data_request() :: %{
        optional("DataQueries") => list(data_query()()),
        optional("DryRun") => boolean(),
        optional("EndTime") => non_neg_integer(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("StartTime") => non_neg_integer()
      }
      
  """
  @type get_aws_network_performance_data_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_conversion_tasks_request() :: %{
        optional("ConversionTaskIds") => list(String.t()()),
        optional("DryRun") => boolean()
      }
      
  """
  @type describe_conversion_tasks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_type_info() :: %{
        "AutoRecoverySupported" => boolean(),
        "BareMetal" => boolean(),
        "BurstablePerformanceSupported" => boolean(),
        "CurrentGeneration" => boolean(),
        "DedicatedHostsSupported" => boolean(),
        "EbsInfo" => ebs_info(),
        "FpgaInfo" => fpga_info(),
        "FreeTierEligible" => boolean(),
        "GpuInfo" => gpu_info(),
        "HibernationSupported" => boolean(),
        "Hypervisor" => list(any()),
        "InferenceAcceleratorInfo" => inference_accelerator_info(),
        "InstanceStorageInfo" => instance_storage_info(),
        "InstanceStorageSupported" => boolean(),
        "InstanceType" => list(any()),
        "MediaAcceleratorInfo" => media_accelerator_info(),
        "MemoryInfo" => memory_info(),
        "NetworkInfo" => network_info(),
        "NeuronInfo" => neuron_info(),
        "NitroEnclavesSupport" => list(any()),
        "NitroTpmInfo" => nitro_tpm_info(),
        "NitroTpmSupport" => list(any()),
        "PhcSupport" => list(any()),
        "PlacementGroupInfo" => placement_group_info(),
        "ProcessorInfo" => processor_info(),
        "SupportedBootModes" => list(list(any())()),
        "SupportedRootDeviceTypes" => list(list(any())()),
        "SupportedUsageClasses" => list(list(any())()),
        "SupportedVirtualizationTypes" => list(list(any())()),
        "VCpuInfo" => v_cpu_info()
      }
      
  """
  @type instance_type_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_event_notification_attributes_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type describe_instance_event_notification_attributes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      storage() :: %{
        "S3" => s3_storage()
      }
      
  """
  @type storage() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_dhcp_options_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("DhcpConfigurations") => list(new_dhcp_configuration()())
      }
      
  """
  @type create_dhcp_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vgw_telemetry() :: %{
        "AcceptedRouteCount" => integer(),
        "CertificateArn" => String.t(),
        "LastStatusChange" => non_neg_integer(),
        "OutsideIpAddress" => String.t(),
        "Status" => list(any()),
        "StatusMessage" => String.t()
      }
      
  """
  @type vgw_telemetry() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance() :: %{
        "SriovNetSupport" => String.t(),
        "AmiLaunchIndex" => integer(),
        "PublicDnsName" => String.t(),
        "RootDeviceName" => String.t(),
        "ElasticGpuAssociations" => list(elastic_gpu_association()()),
        "ProductCodes" => list(product_code()()),
        "Tags" => list(tag()()),
        "LaunchTime" => non_neg_integer(),
        "SubnetId" => String.t(),
        "CapacityReservationId" => String.t(),
        "InstanceLifecycle" => list(any()),
        "ImageId" => String.t(),
        "BlockDeviceMappings" => list(instance_block_device_mapping()()),
        "TpmSupport" => String.t(),
        "UsageOperationUpdateTime" => non_neg_integer(),
        "Licenses" => list(license_configuration()()),
        "NetworkInterfaces" => list(instance_network_interface()()),
        "StateTransitionReason" => String.t(),
        "Monitoring" => monitoring(),
        "SpotInstanceRequestId" => String.t(),
        "VpcId" => String.t(),
        "RamdiskId" => String.t(),
        "PrivateDnsNameOptions" => private_dns_name_options_response(),
        "PublicIpAddress" => String.t(),
        "PlatformDetails" => String.t(),
        "CapacityReservationSpecification" => capacity_reservation_specification_response(),
        "OutpostArn" => String.t(),
        "InstanceType" => list(any()),
        "KernelId" => String.t(),
        "StateReason" => state_reason(),
        "State" => instance_state(),
        "Placement" => placement(),
        "CurrentInstanceBootMode" => list(any()),
        "InstanceId" => String.t(),
        "EnclaveOptions" => enclave_options(),
        "CpuOptions" => cpu_options(),
        "PrivateIpAddress" => String.t(),
        "PrivateDnsName" => String.t(),
        "IamInstanceProfile" => iam_instance_profile(),
        "UsageOperation" => String.t(),
        "HibernationOptions" => hibernation_options(),
        "EnaSupport" => boolean(),
        "Hypervisor" => list(any()),
        "VirtualizationType" => list(any()),
        "RootDeviceType" => list(any()),
        "BootMode" => list(any()),
        "SourceDestCheck" => boolean(),
        "Architecture" => list(any()),
        "MetadataOptions" => instance_metadata_options_response(),
        "ElasticInferenceAcceleratorAssociations" => list(elastic_inference_accelerator_association()()),
        "ClientToken" => String.t(),
        "EbsOptimized" => boolean(),
        "KeyName" => String.t(),
        "SecurityGroups" => list(group_identifier()()),
        "Ipv6Address" => String.t(),
        "MaintenanceOptions" => instance_maintenance_options(),
        "Platform" => list(any())
      }
      
  """
  @type instance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_verified_access_trust_provider_result() :: %{
        "VerifiedAccessInstance" => verified_access_instance(),
        "VerifiedAccessTrustProvider" => verified_access_trust_provider()
      }
      
  """
  @type attach_verified_access_trust_provider_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_fleet_result() :: %{
        "Errors" => list(create_fleet_error()()),
        "FleetId" => String.t(),
        "Instances" => list(create_fleet_instance()())
      }
      
  """
  @type create_fleet_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_resource_discovery_result() :: %{
        "IpamResourceDiscovery" => ipam_resource_discovery()
      }
      
  """
  @type modify_ipam_resource_discovery_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume() :: %{
        "Attachments" => list(volume_attachment()()),
        "AvailabilityZone" => String.t(),
        "CreateTime" => non_neg_integer(),
        "Encrypted" => boolean(),
        "FastRestored" => boolean(),
        "Iops" => integer(),
        "KmsKeyId" => String.t(),
        "MultiAttachEnabled" => boolean(),
        "OutpostArn" => String.t(),
        "Size" => integer(),
        "SnapshotId" => String.t(),
        "SseType" => list(any()),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "Throughput" => integer(),
        "VolumeId" => String.t(),
        "VolumeType" => list(any())
      }
      
  """
  @type volume() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_instance_connect_endpoint_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("PreserveClientIp") => boolean(),
        optional("SecurityGroupIds") => list(String.t()()),
        optional("TagSpecifications") => list(tag_specification()()),
        required("SubnetId") => String.t()
      }
      
  """
  @type create_instance_connect_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_prefix_list_references_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type get_transit_gateway_prefix_list_references_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_pool_allocations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IpamPoolAllocationId") => String.t(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("IpamPoolId") => String.t()
      }
      
  """
  @type get_ipam_pool_allocations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      local_gateway_virtual_interface_group() :: %{
        "LocalGatewayId" => String.t(),
        "LocalGatewayVirtualInterfaceGroupId" => String.t(),
        "LocalGatewayVirtualInterfaceIds" => list(String.t()()),
        "OwnerId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type local_gateway_virtual_interface_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_client_vpn_route_result() :: %{
        "Status" => client_vpn_route_status()
      }
      
  """
  @type delete_client_vpn_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      release_ipam_pool_allocation_result() :: %{
        "Success" => boolean()
      }
      
  """
  @type release_ipam_pool_allocation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_route_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type create_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_association() :: %{
        "ResourceId" => String.t(),
        "ResourceType" => list(any()),
        "State" => list(any()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayRouteTableId" => String.t()
      }
      
  """
  @type transit_gateway_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_trust_providers_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VerifiedAccessTrustProviderIds") => list(String.t()())
      }
      
  """
  @type describe_verified_access_trust_providers_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fast_launch_launch_template_specification_response() :: %{
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "Version" => String.t()
      }
      
  """
  @type fast_launch_launch_template_specification_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      list_images_in_recycle_bin_request() :: %{
        optional("DryRun") => boolean(),
        optional("ImageIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type list_images_in_recycle_bin_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_tag_notification_attribute() :: %{
        "IncludeAllTagsOfInstance" => boolean(),
        "InstanceTagKeys" => list(String.t()())
      }
      
  """
  @type instance_tag_notification_attribute() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_address_attribute_result() :: %{
        "Address" => address_attribute()
      }
      
  """
  @type reset_address_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_key_pair_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("KeyName") => String.t(),
        required("PublicKeyMaterial") => binary()
      }
      
  """
  @type import_key_pair_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      search_local_gateway_routes_result() :: %{
        "NextToken" => String.t(),
        "Routes" => list(local_gateway_route()())
      }
      
  """
  @type search_local_gateway_routes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_address_to_classic_request() :: %{
        optional("DryRun") => boolean(),
        required("PublicIp") => String.t()
      }
      
  """
  @type restore_address_to_classic_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_carrier_gateways_result() :: %{
        "CarrierGateways" => list(carrier_gateway()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_carrier_gateways_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instances_listing() :: %{
        "ClientToken" => String.t(),
        "CreateDate" => non_neg_integer(),
        "InstanceCounts" => list(instance_count()()),
        "PriceSchedules" => list(price_schedule()()),
        "ReservedInstancesId" => String.t(),
        "ReservedInstancesListingId" => String.t(),
        "Status" => list(any()),
        "StatusMessage" => String.t(),
        "Tags" => list(tag()()),
        "UpdateDate" => non_neg_integer()
      }
      
  """
  @type reserved_instances_listing() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_prefix_list_reference_request() :: %{
        optional("DryRun") => boolean(),
        required("PrefixListId") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type delete_transit_gateway_prefix_list_reference_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_resource_tag() :: %{
        "Key" => String.t(),
        "Value" => String.t()
      }
      
  """
  @type ipam_resource_tag() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_ebs() :: %{
        "DeleteOnTermination" => boolean(),
        "Encrypted" => boolean(),
        "Iops" => integer(),
        "SnapshotId" => String.t(),
        "VolumeSize" => integer(),
        "VolumeType" => String.t()
      }
      
  """
  @type scheduled_instances_ebs() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_password_data_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t()
      }
      
  """
  @type get_password_data_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_type_info_from_instance_requirements() :: %{
        "InstanceType" => String.t()
      }
      
  """
  @type instance_type_info_from_instance_requirements() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_interface_permissions_request() :: %{
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NetworkInterfacePermissionIds") => list(String.t()()),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_network_interface_permissions_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_endpoint_attribute_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type client_vpn_endpoint_attribute_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      terminate_client_vpn_connections_request() :: %{
        optional("ConnectionId") => String.t(),
        optional("DryRun") => boolean(),
        optional("Username") => String.t(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type terminate_client_vpn_connections_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_credit_specification_result() :: %{
        "SuccessfulInstanceCreditSpecifications" => list(successful_instance_credit_specification_item()()),
        "UnsuccessfulInstanceCreditSpecifications" => list(unsuccessful_instance_credit_specification_item()())
      }
      
  """
  @type modify_instance_credit_specification_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_launch_template_versions_request() :: %{
        optional("DryRun") => boolean(),
        optional("LaunchTemplateId") => String.t(),
        optional("LaunchTemplateName") => String.t(),
        required("Versions") => list(String.t()())
      }
      
  """
  @type delete_launch_template_versions_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_enclave_certificate_iam_role_request() :: %{
        optional("DryRun") => boolean(),
        required("CertificateArn") => String.t(),
        required("RoleArn") => String.t()
      }
      
  """
  @type disassociate_enclave_certificate_iam_role_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_public_ipv4_pools_request() :: %{
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("PoolIds") => list(String.t()())
      }
      
  """
  @type describe_public_ipv4_pools_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_locked_snapshots_result() :: %{
        "NextToken" => String.t(),
        "Snapshots" => list(locked_snapshots_info()())
      }
      
  """
  @type describe_locked_snapshots_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_key_pair_request() :: %{
        optional("DryRun") => boolean(),
        optional("KeyFormat") => list(any()),
        optional("KeyType") => list(any()),
        optional("TagSpecifications") => list(tag_specification()()),
        required("KeyName") => String.t()
      }
      
  """
  @type create_key_pair_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_serial_console_access_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type enable_serial_console_access_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_traffic_mirror_filter_rule_request() :: %{
        optional("Description") => String.t(),
        optional("DestinationCidrBlock") => String.t(),
        optional("DestinationPortRange") => traffic_mirror_port_range_request(),
        optional("DryRun") => boolean(),
        optional("Protocol") => integer(),
        optional("RemoveFields") => list(list(any())()),
        optional("RuleAction") => list(any()),
        optional("RuleNumber") => integer(),
        optional("SourceCidrBlock") => String.t(),
        optional("SourcePortRange") => traffic_mirror_port_range_request(),
        optional("TrafficDirection") => list(any()),
        required("TrafficMirrorFilterRuleId") => String.t()
      }
      
  """
  @type modify_traffic_mirror_filter_rule_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_fleet_cancellation_state() :: %{
        "CapacityReservationFleetId" => String.t(),
        "CurrentFleetState" => list(any()),
        "PreviousFleetState" => list(any())
      }
      
  """
  @type capacity_reservation_fleet_cancellation_state() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_vpc_classic_link_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type disable_vpc_classic_link_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_peering_attachment_request_options() :: %{
        "DynamicRouting" => list(any())
      }
      
  """
  @type create_transit_gateway_peering_attachment_request_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateways_result() :: %{
        "LocalGateways" => list(local_gateway()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_local_gateways_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_resource_discovery_request() :: %{
        optional("AddOperatingRegions") => list(add_ipam_operating_region()()),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("RemoveOperatingRegions") => list(remove_ipam_operating_region()()),
        required("IpamResourceDiscoveryId") => String.t()
      }
      
  """
  @type modify_ipam_resource_discovery_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_byoasn_result() :: %{
        "Byoasns" => list(byoasn()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_ipam_byoasn_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      storage_location() :: %{
        "Bucket" => String.t(),
        "Key" => String.t()
      }
      
  """
  @type storage_location() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_group_policy_result() :: %{
        "PolicyDocument" => String.t(),
        "PolicyEnabled" => boolean(),
        "SseSpecification" => verified_access_sse_specification_response()
      }
      
  """
  @type modify_verified_access_group_policy_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      validation_warning() :: %{
        "Errors" => list(validation_error()())
      }
      
  """
  @type validation_warning() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_instance_tag_attribute_request() :: %{
        "IncludeAllTagsOfInstance" => boolean(),
        "InstanceTagKeys" => list(String.t()())
      }
      
  """
  @type register_instance_tag_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_dhcp_options_request() :: %{
        optional("DryRun") => boolean(),
        required("DhcpOptionsId") => String.t()
      }
      
  """
  @type delete_dhcp_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_vpc_classic_link_dns_support_request() :: %{
        optional("VpcId") => String.t()
      }
      
  """
  @type enable_vpc_classic_link_dns_support_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_public_ipv4_pool_result() :: %{
        "PoolId" => String.t()
      }
      
  """
  @type create_public_ipv4_pool_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deprovision_public_ipv4_pool_cidr_result() :: %{
        "DeprovisionedAddresses" => list(String.t()()),
        "PoolId" => String.t()
      }
      
  """
  @type deprovision_public_ipv4_pool_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      search_transit_gateway_routes_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        required("Filters") => list(filter()()),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type search_transit_gateway_routes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_usage() :: %{
        "AccountId" => String.t(),
        "UsedInstanceCount" => integer()
      }
      
  """
  @type instance_usage() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_authorization_rules_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type describe_client_vpn_authorization_rules_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_route_table_virtual_interface_group_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_local_gateway_route_table_virtual_interface_group_associations_request() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      describe_vpcs_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VpcIds") => list(String.t()())
      }
      
  """
  @type describe_vpcs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_policy_table_associations_result() :: %{
        "Associations" => list(transit_gateway_policy_table_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_transit_gateway_policy_table_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_import_image_tasks_result() :: %{
        "ImportImageTasks" => list(import_image_task()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_import_image_tasks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_launch_template_result() :: %{
        "LaunchTemplate" => launch_template()
      }
      
  """
  @type modify_launch_template_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_volume_attribute_request() :: %{
        optional("AutoEnableIO") => attribute_boolean_value(),
        optional("DryRun") => boolean(),
        required("VolumeId") => String.t()
      }
      
  """
  @type modify_volume_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_connect() :: %{
        "CreationTime" => non_neg_integer(),
        "Options" => transit_gateway_connect_options(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayId" => String.t(),
        "TransportTransitGatewayAttachmentId" => String.t()
      }
      
  """
  @type transit_gateway_connect() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      failed_capacity_reservation_fleet_cancellation_result() :: %{
        "CancelCapacityReservationFleetError" => cancel_capacity_reservation_fleet_error(),
        "CapacityReservationFleetId" => String.t()
      }
      
  """
  @type failed_capacity_reservation_fleet_cancellation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_fleet_instance() :: %{
        "InstanceIds" => list(String.t()()),
        "InstanceType" => list(any()),
        "LaunchTemplateAndOverrides" => launch_template_and_overrides_response(),
        "Lifecycle" => list(any()),
        "Platform" => list(any())
      }
      
  """
  @type create_fleet_instance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fleet_error() :: %{
        "ErrorCode" => String.t(),
        "ErrorMessage" => String.t(),
        "LaunchTemplateAndOverrides" => launch_template_and_overrides_response(),
        "Lifecycle" => list(any())
      }
      
  """
  @type describe_fleet_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      path_filter() :: %{
        "DestinationAddress" => String.t(),
        "DestinationPortRange" => filter_port_range(),
        "SourceAddress" => String.t(),
        "SourcePortRange" => filter_port_range()
      }
      
  """
  @type path_filter() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_ipam_byoasn_request() :: %{
        optional("DryRun") => boolean(),
        required("Asn") => String.t(),
        required("Cidr") => String.t()
      }
      
  """
  @type associate_ipam_byoasn_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_policy_rule_meta_data() :: %{
        "MetaDataKey" => String.t(),
        "MetaDataValue" => String.t()
      }
      
  """
  @type transit_gateway_policy_rule_meta_data() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_volume_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("Encrypted") => boolean(),
        optional("Iops") => integer(),
        optional("KmsKeyId") => String.t(),
        optional("MultiAttachEnabled") => boolean(),
        optional("OutpostArn") => String.t(),
        optional("Size") => integer(),
        optional("SnapshotId") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("Throughput") => integer(),
        optional("VolumeType") => list(any()),
        required("AvailabilityZone") => String.t()
      }
      
  """
  @type create_volume_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_account_attributes_result() :: %{
        "AccountAttributes" => list(account_attribute()())
      }
      
  """
  @type describe_account_attributes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cidr_authorization_context() :: %{
        "Message" => String.t(),
        "Signature" => String.t()
      }
      
  """
  @type cidr_authorization_context() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_resource_discovery_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IpamResourceDiscoveryAssociationIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_ipam_resource_discovery_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv6_pool() :: %{
        "Description" => String.t(),
        "PoolCidrBlocks" => list(pool_cidr_block()()),
        "PoolId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type ipv6_pool() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_trust_provider_result() :: %{
        "VerifiedAccessTrustProvider" => verified_access_trust_provider()
      }
      
  """
  @type modify_verified_access_trust_provider_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_image_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("ImageId") => String.t()
      }
      
  """
  @type reset_image_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_transit_gateway_route_table_propagation_request() :: %{
        optional("DryRun") => boolean(),
        optional("TransitGatewayAttachmentId") => String.t(),
        optional("TransitGatewayRouteTableAnnouncementId") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type enable_transit_gateway_route_table_propagation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_endpoint_result() :: %{
        "VerifiedAccessEndpoint" => verified_access_endpoint()
      }
      
  """
  @type modify_verified_access_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      start_network_insights_analysis_request() :: %{
        optional("AdditionalAccounts") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("FilterInArns") => list(String.t()()),
        optional("TagSpecifications") => list(tag_specification()()),
        required("ClientToken") => String.t(),
        required("NetworkInsightsPathId") => String.t()
      }
      
  """
  @type start_network_insights_analysis_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      authorize_security_group_ingress_request() :: %{
        optional("CidrIp") => String.t(),
        optional("DryRun") => boolean(),
        optional("FromPort") => integer(),
        optional("GroupId") => String.t(),
        optional("GroupName") => String.t(),
        optional("IpPermissions") => list(ip_permission()()),
        optional("IpProtocol") => String.t(),
        optional("SourceSecurityGroupName") => String.t(),
        optional("SourceSecurityGroupOwnerId") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("ToPort") => integer()
      }
      
  """
  @type authorize_security_group_ingress_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_acl_result() :: %{
        "ClientToken" => String.t(),
        "NetworkAcl" => network_acl()
      }
      
  """
  @type create_network_acl_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipv6_pools_result() :: %{
        "Ipv6Pools" => list(ipv6_pool()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_ipv6_pools_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_network_insights_access_scope_content_request() :: %{
        optional("DryRun") => boolean(),
        required("NetworkInsightsAccessScopeId") => String.t()
      }
      
  """
  @type get_network_insights_access_scope_content_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_route_tables_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("RouteTableIds") => list(String.t()())
      }
      
  """
  @type describe_route_tables_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_peering_attachment_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type delete_transit_gateway_peering_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_type_offering() :: %{
        "InstanceType" => list(any()),
        "Location" => String.t(),
        "LocationType" => list(any())
      }
      
  """
  @type instance_type_offering() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_event_window_disassociation_request() :: %{
        "DedicatedHostIds" => list(String.t()()),
        "InstanceIds" => list(String.t()()),
        "InstanceTags" => list(tag()())
      }
      
  """
  @type instance_event_window_disassociation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_route_table_virtual_interface_group_associations_result() :: %{
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociations" => list(local_gateway_route_table_virtual_interface_group_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_local_gateway_route_table_virtual_interface_group_associations_result() :: %{
          String.t() => any()
        }

  @typedoc """

  ## Example:
      
      network_interface_permission() :: %{
        "AwsAccountId" => String.t(),
        "AwsService" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "NetworkInterfacePermissionId" => String.t(),
        "Permission" => list(any()),
        "PermissionState" => network_interface_permission_state()
      }
      
  """
  @type network_interface_permission() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase1_d_h_group_numbers_request_list_value() :: %{
        "Value" => integer()
      }
      
  """
  @type phase1_d_h_group_numbers_request_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_classic_link_vpc_request() :: %{
        optional("DryRun") => boolean(),
        required("Groups") => list(String.t()()),
        required("InstanceId") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type attach_classic_link_vpc_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_route_table_announcement_result() :: %{
        "TransitGatewayRouteTableAnnouncement" => transit_gateway_route_table_announcement()
      }
      
  """
  @type delete_transit_gateway_route_table_announcement_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_requirements() :: %{
        "AcceleratorCount" => accelerator_count(),
        "AcceleratorManufacturers" => list(list(any())()),
        "AcceleratorNames" => list(list(any())()),
        "AcceleratorTotalMemoryMiB" => accelerator_total_memory_mi_b(),
        "AcceleratorTypes" => list(list(any())()),
        "AllowedInstanceTypes" => list(String.t()()),
        "BareMetal" => list(any()),
        "BaselineEbsBandwidthMbps" => baseline_ebs_bandwidth_mbps(),
        "BurstablePerformance" => list(any()),
        "CpuManufacturers" => list(list(any())()),
        "ExcludedInstanceTypes" => list(String.t()()),
        "InstanceGenerations" => list(list(any())()),
        "LocalStorage" => list(any()),
        "LocalStorageTypes" => list(list(any())()),
        "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice" => integer(),
        "MemoryGiBPerVCpu" => memory_gi_b_per_v_cpu(),
        "MemoryMiB" => memory_mi_b(),
        "NetworkBandwidthGbps" => network_bandwidth_gbps(),
        "NetworkInterfaceCount" => network_interface_count(),
        "OnDemandMaxPricePercentageOverLowestPrice" => integer(),
        "RequireHibernateSupport" => boolean(),
        "SpotMaxPricePercentageOverLowestPrice" => integer(),
        "TotalLocalStorageGB" => total_local_storage_g_b(),
        "VCpuCount" => v_cpu_count_range()
      }
      
  """
  @type instance_requirements() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_internet_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("InternetGatewayId") => String.t()
      }
      
  """
  @type delete_internet_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      assigned_private_ip_address() :: %{
        "PrivateIpAddress" => String.t()
      }
      
  """
  @type assigned_private_ip_address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_data() :: %{
        "ActivityStatus" => list(any()),
        "ClientToken" => String.t(),
        "Context" => String.t(),
        "CreateTime" => non_neg_integer(),
        "Errors" => list(describe_fleet_error()()),
        "ExcessCapacityTerminationPolicy" => list(any()),
        "FleetId" => String.t(),
        "FleetState" => list(any()),
        "FulfilledCapacity" => float(),
        "FulfilledOnDemandCapacity" => float(),
        "Instances" => list(describe_fleets_instances()()),
        "LaunchTemplateConfigs" => list(fleet_launch_template_config()()),
        "OnDemandOptions" => on_demand_options(),
        "ReplaceUnhealthyInstances" => boolean(),
        "SpotOptions" => spot_options(),
        "Tags" => list(tag()()),
        "TargetCapacitySpecification" => target_capacity_specification(),
        "TerminateInstancesWithExpiration" => boolean(),
        "Type" => list(any()),
        "ValidFrom" => non_neg_integer(),
        "ValidUntil" => non_neg_integer()
      }
      
  """
  @type fleet_data() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      coip_cidr() :: %{
        "Cidr" => String.t(),
        "CoipPoolId" => String.t(),
        "LocalGatewayRouteTableId" => String.t()
      }
      
  """
  @type coip_cidr() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_reserved_instances_listing_request() :: %{
        required("ClientToken") => String.t(),
        required("InstanceCount") => integer(),
        required("PriceSchedules") => list(price_schedule_specification()()),
        required("ReservedInstancesId") => String.t()
      }
      
  """
  @type create_reserved_instances_listing_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      copy_snapshot_request() :: %{
        optional("Description") => String.t(),
        optional("DestinationOutpostArn") => String.t(),
        optional("DestinationRegion") => String.t(),
        optional("DryRun") => boolean(),
        optional("Encrypted") => boolean(),
        optional("KmsKeyId") => String.t(),
        optional("PresignedUrl") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("SourceRegion") => String.t(),
        required("SourceSnapshotId") => String.t()
      }
      
  """
  @type copy_snapshot_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_monitoring() :: %{
        "InstanceId" => String.t(),
        "Monitoring" => monitoring()
      }
      
  """
  @type instance_monitoring() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_multicast_domain_request() :: %{
        optional("DryRun") => boolean(),
        optional("Options") => create_transit_gateway_multicast_domain_request_options(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("TransitGatewayId") => String.t()
      }
      
  """
  @type create_transit_gateway_multicast_domain_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase2_encryption_algorithms_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type phase2_encryption_algorithms_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      memory_info() :: %{
        "SizeInMiB" => float()
      }
      
  """
  @type memory_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayId") => String.t()
      }
      
  """
  @type delete_transit_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_groups_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VerifiedAccessGroupIds") => list(String.t()()),
        optional("VerifiedAccessInstanceId") => String.t()
      }
      
  """
  @type describe_verified_access_groups_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_resource_discovery_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("OperatingRegions") => list(add_ipam_operating_region()()),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_ipam_resource_discovery_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_image_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type disable_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_spot_market_options() :: %{
        "BlockDurationMinutes" => integer(),
        "InstanceInterruptionBehavior" => list(any()),
        "MaxPrice" => String.t(),
        "SpotInstanceType" => list(any()),
        "ValidUntil" => non_neg_integer()
      }
      
  """
  @type launch_template_spot_market_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      stale_security_group() :: %{
        "Description" => String.t(),
        "GroupId" => String.t(),
        "GroupName" => String.t(),
        "StaleIpPermissions" => list(stale_ip_permission()()),
        "StaleIpPermissionsEgress" => list(stale_ip_permission()()),
        "VpcId" => String.t()
      }
      
  """
  @type stale_security_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disk_image() :: %{
        "Description" => String.t(),
        "Image" => disk_image_detail(),
        "Volume" => volume_detail()
      }
      
  """
  @type disk_image() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_ipam_byoasn_result() :: %{
        "AsnAssociation" => asn_association()
      }
      
  """
  @type associate_ipam_byoasn_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_block_device_mapping() :: %{
        "DeviceName" => String.t(),
        "Ebs" => launch_template_ebs_block_device(),
        "NoDevice" => String.t(),
        "VirtualName" => String.t()
      }
      
  """
  @type launch_template_block_device_mapping() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_endpoint_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("LoadBalancerOptions") => create_verified_access_endpoint_load_balancer_options(),
        optional("NetworkInterfaceOptions") => create_verified_access_endpoint_eni_options(),
        optional("PolicyDocument") => String.t(),
        optional("SecurityGroupIds") => list(String.t()()),
        optional("SseSpecification") => verified_access_sse_specification_request(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("ApplicationDomain") => String.t(),
        required("AttachmentType") => list(any()),
        required("DomainCertificateArn") => String.t(),
        required("EndpointDomainPrefix") => String.t(),
        required("EndpointType") => list(any()),
        required("VerifiedAccessGroupId") => String.t()
      }
      
  """
  @type create_verified_access_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deprovision_public_ipv4_pool_cidr_request() :: %{
        optional("DryRun") => boolean(),
        required("Cidr") => String.t(),
        required("PoolId") => String.t()
      }
      
  """
  @type deprovision_public_ipv4_pool_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      register_transit_gateway_multicast_group_sources_request() :: %{
        optional("DryRun") => boolean(),
        optional("GroupIpAddress") => String.t(),
        required("NetworkInterfaceIds") => list(String.t()()),
        required("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type register_transit_gateway_multicast_group_sources_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_ebs_default_kms_key_id_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type reset_ebs_default_kms_key_id_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fast_snapshot_restores_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_fast_snapshot_restores_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      peering_tgw_info() :: %{
        "CoreNetworkId" => String.t(),
        "OwnerId" => String.t(),
        "Region" => String.t(),
        "TransitGatewayId" => String.t()
      }
      
  """
  @type peering_tgw_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_traffic_mirror_filter_network_services_result() :: %{
        "TrafficMirrorFilter" => traffic_mirror_filter()
      }
      
  """
  @type modify_traffic_mirror_filter_network_services_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_launch_template_config_request() :: %{
        "LaunchTemplateSpecification" => fleet_launch_template_specification_request(),
        "Overrides" => list(fleet_launch_template_overrides_request()())
      }
      
  """
  @type fleet_launch_template_config_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_vpc_cidr_block_result() :: %{
        "CidrBlockAssociation" => vpc_cidr_block_association(),
        "Ipv6CidrBlockAssociation" => vpc_ipv6_cidr_block_association(),
        "VpcId" => String.t()
      }
      
  """
  @type disassociate_vpc_cidr_block_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_image_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type enable_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_vpc_classic_link_dns_support_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type disable_vpc_classic_link_dns_support_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      target_group() :: %{
        "Arn" => String.t()
      }
      
  """
  @type target_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_hibernation_options_request() :: %{
        "Configured" => boolean()
      }
      
  """
  @type launch_template_hibernation_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fpga_images_result() :: %{
        "FpgaImages" => list(fpga_image()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_fpga_images_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_credit_specification_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("InstanceCreditSpecifications") => list(instance_credit_specification_request()())
      }
      
  """
  @type modify_instance_credit_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_coip_cidr_request() :: %{
        optional("DryRun") => boolean(),
        required("Cidr") => String.t(),
        required("CoipPoolId") => String.t()
      }
      
  """
  @type delete_coip_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_instance_volume_detail_item() :: %{
        "AvailabilityZone" => String.t(),
        "BytesConverted" => float(),
        "Description" => String.t(),
        "Image" => disk_image_description(),
        "Status" => String.t(),
        "StatusMessage" => String.t(),
        "Volume" => disk_image_volume_description()
      }
      
  """
  @type import_instance_volume_detail_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      authorize_client_vpn_ingress_request() :: %{
        optional("AccessGroupId") => String.t(),
        optional("AuthorizeAllGroups") => boolean(),
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        required("ClientVpnEndpointId") => String.t(),
        required("TargetNetworkCidr") => String.t()
      }
      
  """
  @type authorize_client_vpn_ingress_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_managed_prefix_list_version_request() :: %{
        optional("DryRun") => boolean(),
        required("CurrentVersion") => float(),
        required("PrefixListId") => String.t(),
        required("PreviousVersion") => float()
      }
      
  """
  @type restore_managed_prefix_list_version_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_endpoint_load_balancer_options() :: %{
        "LoadBalancerArn" => String.t(),
        "Port" => integer(),
        "Protocol" => list(any()),
        "SubnetIds" => list(String.t()())
      }
      
  """
  @type verified_access_endpoint_load_balancer_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      analysis_security_group_rule() :: %{
        "Cidr" => String.t(),
        "Direction" => String.t(),
        "PortRange" => port_range(),
        "PrefixListId" => String.t(),
        "Protocol" => String.t(),
        "SecurityGroupId" => String.t()
      }
      
  """
  @type analysis_security_group_rule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_reserved_instances_offerings_result() :: %{
        "NextToken" => String.t(),
        "ReservedInstancesOfferings" => list(reserved_instances_offering()())
      }
      
  """
  @type describe_reserved_instances_offerings_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ptr_update_status() :: %{
        "Reason" => String.t(),
        "Status" => String.t(),
        "Value" => String.t()
      }
      
  """
  @type ptr_update_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_services_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("ServiceNames") => list(String.t()())
      }
      
  """
  @type describe_vpc_endpoint_services_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ebs_instance_block_device() :: %{
        "AssociatedResource" => String.t(),
        "AttachTime" => non_neg_integer(),
        "DeleteOnTermination" => boolean(),
        "Status" => list(any()),
        "VolumeId" => String.t(),
        "VolumeOwnerId" => String.t()
      }
      
  """
  @type ebs_instance_block_device() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_interface_permissions_result() :: %{
        "NetworkInterfacePermissions" => list(network_interface_permission()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_network_interface_permissions_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      start_instances_result() :: %{
        "StartingInstances" => list(instance_state_change()())
      }
      
  """
  @type start_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      elastic_inference_accelerator_association() :: %{
        "ElasticInferenceAcceleratorArn" => String.t(),
        "ElasticInferenceAcceleratorAssociationId" => String.t(),
        "ElasticInferenceAcceleratorAssociationState" => String.t(),
        "ElasticInferenceAcceleratorAssociationTime" => non_neg_integer()
      }
      
  """
  @type elastic_inference_accelerator_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      blob_attribute_value() :: %{
        optional("Value") => binary()
      }
      
  """
  @type blob_attribute_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      allocate_ipam_pool_cidr_result() :: %{
        "IpamPoolAllocation" => ipam_pool_allocation()
      }
      
  """
  @type allocate_ipam_pool_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_managed_prefix_list_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("Entries") => list(add_prefix_list_entry()()),
        optional("TagSpecifications") => list(tag_specification()()),
        required("AddressFamily") => String.t(),
        required("MaxEntries") => integer(),
        required("PrefixListName") => String.t()
      }
      
  """
  @type create_managed_prefix_list_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_fast_snapshot_restores_result() :: %{
        "Successful" => list(enable_fast_snapshot_restore_success_item()()),
        "Unsuccessful" => list(enable_fast_snapshot_restore_error_item()())
      }
      
  """
  @type enable_fast_snapshot_restores_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deregister_transit_gateway_multicast_group_members_request() :: %{
        optional("DryRun") => boolean(),
        optional("GroupIpAddress") => String.t(),
        optional("NetworkInterfaceIds") => list(String.t()()),
        optional("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type deregister_transit_gateway_multicast_group_members_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_fleet_error_item() :: %{
        "Error" => delete_fleet_error(),
        "FleetId" => String.t()
      }
      
  """
  @type delete_fleet_error_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      target_reservation_value() :: %{
        "ReservationValue" => reservation_value(),
        "TargetConfiguration" => target_configuration()
      }
      
  """
  @type target_reservation_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_scopes_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IpamScopeIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_ipam_scopes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_fleet_monitoring() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type spot_fleet_monitoring() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_authorization_rule_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type client_vpn_authorization_rule_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      address_attribute() :: %{
        "AllocationId" => String.t(),
        "PtrRecord" => String.t(),
        "PtrRecordUpdate" => ptr_update_status(),
        "PublicIp" => String.t()
      }
      
  """
  @type address_attribute() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_capacity_reservation_specification_response() :: %{
        "CapacityReservationPreference" => list(any()),
        "CapacityReservationTarget" => capacity_reservation_target_response()
      }
      
  """
  @type launch_template_capacity_reservation_specification_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      subnet_cidr_reservation() :: %{
        "Cidr" => String.t(),
        "Description" => String.t(),
        "OwnerId" => String.t(),
        "ReservationType" => list(any()),
        "SubnetCidrReservationId" => String.t(),
        "SubnetId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type subnet_cidr_reservation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_event_window_association_request() :: %{
        "DedicatedHostIds" => list(String.t()()),
        "InstanceIds" => list(String.t()()),
        "InstanceTags" => list(tag()())
      }
      
  """
  @type instance_event_window_association_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_interface_request() :: %{
        optional("DryRun") => boolean(),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type delete_network_interface_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_image_deregistration_protection_result() :: %{
        "Return" => String.t()
      }
      
  """
  @type enable_image_deregistration_protection_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      request_spot_fleet_response() :: %{
        "SpotFleetRequestId" => String.t()
      }
      
  """
  @type request_spot_fleet_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_iam_instance_profile_associations_request() :: %{
        optional("AssociationIds") => list(String.t()()),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_iam_instance_profile_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      dns_options_specification() :: %{
        "DnsRecordIpType" => list(any()),
        "PrivateDnsOnlyForInboundResolverEndpoint" => boolean()
      }
      
  """
  @type dns_options_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv4_prefix_specification() :: %{
        "Ipv4Prefix" => String.t()
      }
      
  """
  @type ipv4_prefix_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_insights_access_scope_request() :: %{
        optional("DryRun") => boolean(),
        required("NetworkInsightsAccessScopeId") => String.t()
      }
      
  """
  @type delete_network_insights_access_scope_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_instance_event_window_result() :: %{
        "InstanceEventWindow" => instance_event_window()
      }
      
  """
  @type associate_instance_event_window_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_password_data_result() :: %{
        "InstanceId" => String.t(),
        "PasswordData" => String.t(),
        "Timestamp" => non_neg_integer()
      }
      
  """
  @type get_password_data_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipv6_pools_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("PoolIds") => list(String.t()())
      }
      
  """
  @type describe_ipv6_pools_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_log_delivery_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type verified_access_log_delivery_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_insights_path_request() :: %{
        optional("Destination") => String.t(),
        optional("DestinationIp") => String.t(),
        optional("DestinationPort") => integer(),
        optional("DryRun") => boolean(),
        optional("FilterAtDestination") => path_request_filter(),
        optional("FilterAtSource") => path_request_filter(),
        optional("SourceIp") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("ClientToken") => String.t(),
        required("Protocol") => list(any()),
        required("Source") => String.t()
      }
      
  """
  @type create_network_insights_path_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_route_request() :: %{
        optional("DestinationCidrBlock") => String.t(),
        optional("DestinationIpv6CidrBlock") => String.t(),
        optional("DestinationPrefixListId") => String.t(),
        optional("DryRun") => boolean(),
        required("RouteTableId") => String.t()
      }
      
  """
  @type delete_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_verified_access_group_result() :: %{
        "VerifiedAccessGroup" => verified_access_group()
      }
      
  """
  @type delete_verified_access_group_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_aggregate_id_format_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type describe_aggregate_id_format_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_address_transfer_request() :: %{
        optional("DryRun") => boolean(),
        required("AllocationId") => String.t(),
        required("TransferAccountId") => String.t()
      }
      
  """
  @type enable_address_transfer_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      bundle_task_error() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type bundle_task_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fleet_history_request() :: %{
        optional("DryRun") => boolean(),
        optional("EventType") => list(any()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("FleetId") => String.t(),
        required("StartTime") => non_neg_integer()
      }
      
  """
  @type describe_fleet_history_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      list_snapshots_in_recycle_bin_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("SnapshotIds") => list(String.t()())
      }
      
  """
  @type list_snapshots_in_recycle_bin_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unsuccessful_instance_credit_specification_item() :: %{
        "Error" => unsuccessful_instance_credit_specification_item_error(),
        "InstanceId" => String.t()
      }
      
  """
  @type unsuccessful_instance_credit_specification_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_status_action() :: %{
        "Code" => String.t(),
        "Description" => String.t(),
        "EventId" => String.t(),
        "EventType" => String.t()
      }
      
  """
  @type volume_status_action() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_capacity_reservation_fleet_request() :: %{
        optional("AllocationStrategy") => String.t(),
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("EndDate") => non_neg_integer(),
        optional("InstanceMatchCriteria") => list(any()),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("Tenancy") => list(any()),
        required("InstanceTypeSpecifications") => list(reservation_fleet_instance_specification()()),
        required("TotalTargetCapacity") => integer()
      }
      
  """
  @type create_capacity_reservation_fleet_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_tag_specification() :: %{
        "ResourceType" => list(any()),
        "Tags" => list(tag()())
      }
      
  """
  @type launch_template_tag_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_route_result() :: %{
        "Route" => transit_gateway_route()
      }
      
  """
  @type create_transit_gateway_route_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      coip_address_usage() :: %{
        "AllocationId" => String.t(),
        "AwsAccountId" => String.t(),
        "AwsService" => String.t(),
        "CoIp" => String.t()
      }
      
  """
  @type coip_address_usage() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_capacity_reservation_usage_result() :: %{
        "AvailableInstanceCount" => integer(),
        "CapacityReservationId" => String.t(),
        "InstanceType" => String.t(),
        "InstanceUsages" => list(instance_usage()()),
        "NextToken" => String.t(),
        "State" => list(any()),
        "TotalInstanceCount" => integer()
      }
      
  """
  @type get_capacity_reservation_usage_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_discovered_account() :: %{
        "AccountId" => String.t(),
        "DiscoveryRegion" => String.t(),
        "FailureReason" => ipam_discovery_failure_reason(),
        "LastAttemptedDiscoveryTime" => non_neg_integer(),
        "LastSuccessfulDiscoveryTime" => non_neg_integer()
      }
      
  """
  @type ipam_discovered_account() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_instance_result() :: %{
        "VerifiedAccessInstance" => verified_access_instance()
      }
      
  """
  @type create_verified_access_instance_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_datafeed_subscription_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type describe_spot_datafeed_subscription_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_endpoint_connection_notification_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("ServiceId") => String.t(),
        optional("VpcEndpointId") => String.t(),
        required("ConnectionEvents") => list(String.t()()),
        required("ConnectionNotificationArn") => String.t()
      }
      
  """
  @type create_vpc_endpoint_connection_notification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_launch_template_data_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceId") => String.t()
      }
      
  """
  @type get_launch_template_data_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_log_options() :: %{
        "CloudWatchLogs" => verified_access_log_cloud_watch_logs_destination_options(),
        "IncludeTrustContext" => boolean(),
        "KinesisDataFirehose" => verified_access_log_kinesis_data_firehose_destination_options(),
        "LogVersion" => String.t(),
        "S3" => verified_access_log_s3_destination_options()
      }
      
  """
  @type verified_access_log_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_ipam_pool_request() :: %{
        optional("AllocationDefaultNetmaskLength") => integer(),
        optional("AllocationMaxNetmaskLength") => integer(),
        optional("AllocationMinNetmaskLength") => integer(),
        optional("AllocationResourceTags") => list(request_ipam_resource_tag()()),
        optional("AutoImport") => boolean(),
        optional("AwsService") => list(any()),
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("Locale") => String.t(),
        optional("PublicIpSource") => list(any()),
        optional("PubliclyAdvertisable") => boolean(),
        optional("SourceIpamPoolId") => String.t(),
        optional("SourceResource") => ipam_pool_source_resource_request(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("AddressFamily") => list(any()),
        required("IpamScopeId") => String.t()
      }
      
  """
  @type create_ipam_pool_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      prefix_list() :: %{
        "Cidrs" => list(String.t()()),
        "PrefixListId" => String.t(),
        "PrefixListName" => String.t()
      }
      
  """
  @type prefix_list() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      through_resources_statement() :: %{
        "ResourceStatement" => resource_statement()
      }
      
  """
  @type through_resources_statement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_coip_pool_result() :: %{
        "CoipPool" => coip_pool()
      }
      
  """
  @type delete_coip_pool_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      security_group_identifier() :: %{
        "GroupId" => String.t(),
        "GroupName" => String.t()
      }
      
  """
  @type security_group_identifier() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_interface_attribute_request() :: %{
        optional("Attribute") => list(any()),
        optional("DryRun") => boolean(),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type describe_network_interface_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_iam_instance_profile_result() :: %{
        "IamInstanceProfileAssociation" => iam_instance_profile_association()
      }
      
  """
  @type disassociate_iam_instance_profile_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_resource_discovery_request() :: %{
        optional("DryRun") => boolean(),
        required("IpamResourceDiscoveryId") => String.t()
      }
      
  """
  @type delete_ipam_resource_discovery_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      subscription() :: %{
        "Destination" => String.t(),
        "Metric" => list(any()),
        "Period" => list(any()),
        "Source" => String.t(),
        "Statistic" => list(any())
      }
      
  """
  @type subscription() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_fleet_error() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type delete_fleet_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template() :: %{
        "CreateTime" => non_neg_integer(),
        "CreatedBy" => String.t(),
        "DefaultVersionNumber" => float(),
        "LatestVersionNumber" => float(),
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type launch_template() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_metadata_defaults_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_instance_metadata_defaults_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_instance_task_details() :: %{
        "Description" => String.t(),
        "InstanceId" => String.t(),
        "Platform" => list(any()),
        "Volumes" => list(import_instance_volume_detail_item()())
      }
      
  """
  @type import_instance_task_details() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_customer_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("CustomerGatewayId") => String.t()
      }
      
  """
  @type delete_customer_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_trust_provider_oidc_options() :: %{
        "AuthorizationEndpoint" => String.t(),
        "ClientId" => String.t(),
        "ClientSecret" => String.t(),
        "Issuer" => String.t(),
        "Scope" => String.t(),
        "TokenEndpoint" => String.t(),
        "UserInfoEndpoint" => String.t()
      }
      
  """
  @type create_verified_access_trust_provider_oidc_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_interface_request() :: %{
        optional("ClientToken") => String.t(),
        optional("ConnectionTrackingSpecification") => connection_tracking_specification_request(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("EnablePrimaryIpv6") => boolean(),
        optional("Groups") => list(String.t()()),
        optional("InterfaceType") => list(any()),
        optional("Ipv4PrefixCount") => integer(),
        optional("Ipv4Prefixes") => list(ipv4_prefix_specification_request()()),
        optional("Ipv6AddressCount") => integer(),
        optional("Ipv6Addresses") => list(instance_ipv6_address()()),
        optional("Ipv6PrefixCount") => integer(),
        optional("Ipv6Prefixes") => list(ipv6_prefix_specification_request()()),
        optional("PrivateIpAddress") => String.t(),
        optional("PrivateIpAddresses") => list(private_ip_address_specification()()),
        optional("SecondaryPrivateIpAddressCount") => integer(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("SubnetId") => String.t()
      }
      
  """
  @type create_network_interface_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fpga_images_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("FpgaImageIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("Owners") => list(String.t()())
      }
      
  """
  @type describe_fpga_images_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_vpn_tunnel_replacement_status_result() :: %{
        "CustomerGatewayId" => String.t(),
        "MaintenanceDetails" => maintenance_details(),
        "TransitGatewayId" => String.t(),
        "VpnConnectionId" => String.t(),
        "VpnGatewayId" => String.t(),
        "VpnTunnelOutsideIpAddress" => String.t()
      }
      
  """
  @type get_vpn_tunnel_replacement_status_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_verified_access_instance_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("VerifiedAccessInstanceId") => String.t()
      }
      
  """
  @type delete_verified_access_instance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_connections_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type describe_client_vpn_connections_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_capacity_block_offerings_request() :: %{
        optional("DryRun") => boolean(),
        optional("EndDateRange") => non_neg_integer(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("StartDateRange") => non_neg_integer(),
        required("CapacityDurationHours") => integer(),
        required("InstanceCount") => integer(),
        required("InstanceType") => String.t()
      }
      
  """
  @type describe_capacity_block_offerings_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_fpga_image_request() :: %{
        optional("DryRun") => boolean(),
        required("FpgaImageId") => String.t()
      }
      
  """
  @type delete_fpga_image_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      account_attribute() :: %{
        "AttributeName" => String.t(),
        "AttributeValues" => list(account_attribute_value()())
      }
      
  """
  @type account_attribute() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      start_network_insights_analysis_result() :: %{
        "NetworkInsightsAnalysis" => network_insights_analysis()
      }
      
  """
  @type start_network_insights_analysis_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_capacity_reservation() :: %{
        "AvailabilityZone" => String.t(),
        "AvailabilityZoneId" => String.t(),
        "CapacityReservationId" => String.t(),
        "CreateDate" => non_neg_integer(),
        "EbsOptimized" => boolean(),
        "FulfilledCapacity" => float(),
        "InstancePlatform" => list(any()),
        "InstanceType" => list(any()),
        "Priority" => integer(),
        "TotalInstanceCount" => integer(),
        "Weight" => float()
      }
      
  """
  @type fleet_capacity_reservation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_placement_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_instance_placement_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_launch_template_versions_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LaunchTemplateId") => String.t(),
        optional("LaunchTemplateName") => String.t(),
        optional("MaxResults") => integer(),
        optional("MaxVersion") => String.t(),
        optional("MinVersion") => String.t(),
        optional("NextToken") => String.t(),
        optional("ResolveAlias") => boolean(),
        optional("Versions") => list(String.t()())
      }
      
  """
  @type describe_launch_template_versions_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fast_launch_images_success_item() :: %{
        "ImageId" => String.t(),
        "LaunchTemplate" => fast_launch_launch_template_specification_response(),
        "MaxParallelLaunches" => integer(),
        "OwnerId" => String.t(),
        "ResourceType" => list(any()),
        "SnapshotConfiguration" => fast_launch_snapshot_configuration_response(),
        "State" => list(any()),
        "StateTransitionReason" => String.t(),
        "StateTransitionTime" => non_neg_integer()
      }
      
  """
  @type describe_fast_launch_images_success_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      revoke_security_group_egress_request() :: %{
        optional("CidrIp") => String.t(),
        optional("DryRun") => boolean(),
        optional("FromPort") => integer(),
        optional("IpPermissions") => list(ip_permission()()),
        optional("IpProtocol") => String.t(),
        optional("SecurityGroupRuleIds") => list(String.t()()),
        optional("SourceSecurityGroupName") => String.t(),
        optional("SourceSecurityGroupOwnerId") => String.t(),
        optional("ToPort") => integer(),
        required("GroupId") => String.t()
      }
      
  """
  @type revoke_security_group_egress_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_aws_network_performance_metric_subscriptions_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_aws_network_performance_metric_subscriptions_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_reserved_instances_request() :: %{
        optional("ClientToken") => String.t(),
        required("ReservedInstancesIds") => list(String.t()()),
        required("TargetConfigurations") => list(reserved_instances_configuration()())
      }
      
  """
  @type modify_reserved_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_ipv4_prefix() :: %{
        "Ipv4Prefix" => String.t()
      }
      
  """
  @type instance_ipv4_prefix() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_client_vpn_target_network_result() :: %{
        "AssociationId" => String.t(),
        "Status" => association_status()
      }
      
  """
  @type disassociate_client_vpn_target_network_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      start_instances_request() :: %{
        optional("AdditionalInfo") => String.t(),
        optional("DryRun") => boolean(),
        required("InstanceIds") => list(String.t()())
      }
      
  """
  @type start_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_carrier_gateways_request() :: %{
        optional("CarrierGatewayIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_carrier_gateways_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_snapshots_result() :: %{
        "Snapshots" => list(snapshot_info()())
      }
      
  """
  @type create_snapshots_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_associated_enclave_certificate_iam_roles_result() :: %{
        "AssociatedRoles" => list(associated_role()())
      }
      
  """
  @type get_associated_enclave_certificate_iam_roles_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_replace_root_volume_task_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DeleteReplacedRootVolume") => boolean(),
        optional("DryRun") => boolean(),
        optional("ImageId") => String.t(),
        optional("SnapshotId") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("InstanceId") => String.t()
      }
      
  """
  @type create_replace_root_volume_task_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_connection_options_request() :: %{
        optional("DryRun") => boolean(),
        optional("LocalIpv4NetworkCidr") => String.t(),
        optional("LocalIpv6NetworkCidr") => String.t(),
        optional("RemoteIpv4NetworkCidr") => String.t(),
        optional("RemoteIpv6NetworkCidr") => String.t(),
        required("VpnConnectionId") => String.t()
      }
      
  """
  @type modify_vpn_connection_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_pool_allocations_result() :: %{
        "IpamPoolAllocations" => list(ipam_pool_allocation()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_ipam_pool_allocations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_deregistered_group_sources() :: %{
        "DeregisteredNetworkInterfaceIds" => list(String.t()()),
        "GroupIpAddress" => String.t(),
        "TransitGatewayMulticastDomainId" => String.t()
      }
      
  """
  @type transit_gateway_multicast_deregistered_group_sources() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_type_offerings_result() :: %{
        "InstanceTypeOfferings" => list(instance_type_offering()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_instance_type_offerings_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      on_demand_options_request() :: %{
        "AllocationStrategy" => list(any()),
        "CapacityReservationOptions" => capacity_reservation_options_request(),
        "MaxTotalPrice" => String.t(),
        "MinTargetCapacity" => integer(),
        "SingleAvailabilityZone" => boolean(),
        "SingleInstanceType" => boolean()
      }
      
  """
  @type on_demand_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_serial_console_access_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type disable_serial_console_access_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_fast_snapshot_restore_error_item() :: %{
        "FastSnapshotRestoreStateErrors" => list(enable_fast_snapshot_restore_state_error_item()()),
        "SnapshotId" => String.t()
      }
      
  """
  @type enable_fast_snapshot_restore_error_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fpga_image_attribute() :: %{
        "Description" => String.t(),
        "FpgaImageId" => String.t(),
        "LoadPermissions" => list(load_permission()()),
        "Name" => String.t(),
        "ProductCodes" => list(product_code()())
      }
      
  """
  @type fpga_image_attribute() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      security_group_rule_update() :: %{
        "SecurityGroupRule" => security_group_rule_request(),
        "SecurityGroupRuleId" => String.t()
      }
      
  """
  @type security_group_rule_update() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_ipv6_address() :: %{
        "Ipv6Address" => String.t()
      }
      
  """
  @type scheduled_instances_ipv6_address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_vpn_tunnel_replacement_status_request() :: %{
        optional("DryRun") => boolean(),
        required("VpnConnectionId") => String.t(),
        required("VpnTunnelOutsideIpAddress") => String.t()
      }
      
  """
  @type get_vpn_tunnel_replacement_status_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_tunnel_log_options_specification() :: %{
        "CloudWatchLogOptions" => cloud_watch_log_options_specification()
      }
      
  """
  @type vpn_tunnel_log_options_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_connect_endpoints_result() :: %{
        "InstanceConnectEndpoints" => list(ec2_instance_connect_endpoint()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_instance_connect_endpoints_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_launch_templates_result() :: %{
        "LaunchTemplates" => list(launch_template()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_launch_templates_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_managed_prefix_list_result() :: %{
        "PrefixList" => managed_prefix_list()
      }
      
  """
  @type modify_managed_prefix_list_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_prefix_list_reference_result() :: %{
        "TransitGatewayPrefixListReference" => transit_gateway_prefix_list_reference()
      }
      
  """
  @type delete_transit_gateway_prefix_list_reference_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancelled_spot_instance_request() :: %{
        "SpotInstanceRequestId" => String.t(),
        "State" => list(any())
      }
      
  """
  @type cancelled_spot_instance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipams_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IpamIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_ipams_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_route_table_request() :: %{
        optional("DryRun") => boolean(),
        optional("GatewayId") => String.t(),
        optional("SubnetId") => String.t(),
        required("RouteTableId") => String.t()
      }
      
  """
  @type associate_route_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      directory_service_authentication() :: %{
        "DirectoryId" => String.t()
      }
      
  """
  @type directory_service_authentication() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      copy_image_result() :: %{
        "ImageId" => String.t()
      }
      
  """
  @type copy_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instances_result() :: %{
        "NextToken" => String.t(),
        "Reservations" => list(reservation()())
      }
      
  """
  @type describe_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_connection_notifications_request() :: %{
        optional("ConnectionNotificationId") => String.t(),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_vpc_endpoint_connection_notifications_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_ipam_resource_discovery_result() :: %{
        "IpamResourceDiscovery" => ipam_resource_discovery()
      }
      
  """
  @type delete_ipam_resource_discovery_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      moving_address_status() :: %{
        "MoveStatus" => list(any()),
        "PublicIp" => String.t()
      }
      
  """
  @type moving_address_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_elastic_gpus_request() :: %{
        optional("DryRun") => boolean(),
        optional("ElasticGpuIds") => list(String.t()()),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_elastic_gpus_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      oidc_options() :: %{
        "AuthorizationEndpoint" => String.t(),
        "ClientId" => String.t(),
        "ClientSecret" => String.t(),
        "Issuer" => String.t(),
        "Scope" => String.t(),
        "TokenEndpoint" => String.t(),
        "UserInfoEndpoint" => String.t()
      }
      
  """
  @type oidc_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_snapshots_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("OwnerIds") => list(String.t()()),
        optional("RestorableByUserIds") => list(String.t()()),
        optional("SnapshotIds") => list(String.t()())
      }
      
  """
  @type describe_snapshots_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_fast_snapshot_restore_state_error() :: %{
        "Code" => String.t(),
        "Message" => String.t()
      }
      
  """
  @type disable_fast_snapshot_restore_state_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_iam_instance_profile_request() :: %{
        required("AssociationId") => String.t()
      }
      
  """
  @type disassociate_iam_instance_profile_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      dhcp_configuration() :: %{
        "Key" => String.t(),
        "Values" => list(attribute_value()())
      }
      
  """
  @type dhcp_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      classic_load_balancers_config() :: %{
        "ClassicLoadBalancers" => list(classic_load_balancer()())
      }
      
  """
  @type classic_load_balancers_config() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_bandwidth_gbps() :: %{
        "Max" => float(),
        "Min" => float()
      }
      
  """
  @type network_bandwidth_gbps() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ebs_optimized_info() :: %{
        "BaselineBandwidthInMbps" => integer(),
        "BaselineIops" => integer(),
        "BaselineThroughputInMBps" => float(),
        "MaximumBandwidthInMbps" => integer(),
        "MaximumIops" => integer(),
        "MaximumThroughputInMBps" => float()
      }
      
  """
  @type ebs_optimized_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_route_table_announcement_result() :: %{
        "TransitGatewayRouteTableAnnouncement" => transit_gateway_route_table_announcement()
      }
      
  """
  @type create_transit_gateway_route_table_announcement_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      withdraw_byoip_cidr_request() :: %{
        optional("DryRun") => boolean(),
        required("Cidr") => String.t()
      }
      
  """
  @type withdraw_byoip_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_domain_options() :: %{
        "AutoAcceptSharedAssociations" => list(any()),
        "Igmpv2Support" => list(any()),
        "StaticSourcesSupport" => list(any())
      }
      
  """
  @type transit_gateway_multicast_domain_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_propagation() :: %{
        "ResourceId" => String.t(),
        "ResourceType" => list(any()),
        "State" => list(any()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayRouteTableAnnouncementId" => String.t(),
        "TransitGatewayRouteTableId" => String.t()
      }
      
  """
  @type transit_gateway_propagation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_image_from_recycle_bin_request() :: %{
        optional("DryRun") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type restore_image_from_recycle_bin_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_coip_cidr_result() :: %{
        "CoipCidr" => coip_cidr()
      }
      
  """
  @type delete_coip_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_host_reservation_offerings_result() :: %{
        "NextToken" => String.t(),
        "OfferingSet" => list(host_offering()())
      }
      
  """
  @type describe_host_reservation_offerings_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_instance_market_options() :: %{
        "MarketType" => list(any()),
        "SpotOptions" => launch_template_spot_market_options()
      }
      
  """
  @type launch_template_instance_market_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      revoke_client_vpn_ingress_request() :: %{
        optional("AccessGroupId") => String.t(),
        optional("DryRun") => boolean(),
        optional("RevokeAllGroups") => boolean(),
        required("ClientVpnEndpointId") => String.t(),
        required("TargetNetworkCidr") => String.t()
      }
      
  """
  @type revoke_client_vpn_ingress_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      security_group_rule_request() :: %{
        "CidrIpv4" => String.t(),
        "CidrIpv6" => String.t(),
        "Description" => String.t(),
        "FromPort" => integer(),
        "IpProtocol" => String.t(),
        "PrefixListId" => String.t(),
        "ReferencedGroupId" => String.t(),
        "ToPort" => integer()
      }
      
  """
  @type security_group_rule_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      host_instance() :: %{
        "InstanceId" => String.t(),
        "InstanceType" => String.t(),
        "OwnerId" => String.t()
      }
      
  """
  @type host_instance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpn_gateways_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("VpnGatewayIds") => list(String.t()())
      }
      
  """
  @type describe_vpn_gateways_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_instance_connect_endpoint_result() :: %{
        "InstanceConnectEndpoint" => ec2_instance_connect_endpoint()
      }
      
  """
  @type delete_instance_connect_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_export_image_tasks_request() :: %{
        optional("DryRun") => boolean(),
        optional("ExportImageTaskIds") => list(String.t()()),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_export_image_tasks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_request() :: %{
        optional("AddOperatingRegions") => list(add_ipam_operating_region()()),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("RemoveOperatingRegions") => list(remove_ipam_operating_region()()),
        optional("Tier") => list(any()),
        required("IpamId") => String.t()
      }
      
  """
  @type modify_ipam_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      local_gateway_route_table() :: %{
        "LocalGatewayId" => String.t(),
        "LocalGatewayRouteTableArn" => String.t(),
        "LocalGatewayRouteTableId" => String.t(),
        "Mode" => list(any()),
        "OutpostArn" => String.t(),
        "OwnerId" => String.t(),
        "State" => String.t(),
        "StateReason" => state_reason(),
        "Tags" => list(tag()())
      }
      
  """
  @type local_gateway_route_table() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_snapshot_tier_status_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_snapshot_tier_status_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_capacity_reservation_fleets_result() :: %{
        "CapacityReservationFleets" => list(capacity_reservation_fleet()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_capacity_reservation_fleets_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_service_permissions_result() :: %{
        "AllowedPrincipals" => list(allowed_principal()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_vpc_endpoint_service_permissions_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_spot_placement_scores_result() :: %{
        "NextToken" => String.t(),
        "SpotPlacementScores" => list(spot_placement_score()())
      }
      
  """
  @type get_spot_placement_scores_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_image_deprecation_request() :: %{
        optional("DryRun") => boolean(),
        required("ImageId") => String.t()
      }
      
  """
  @type disable_image_deprecation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_traffic_mirror_filter_rules_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TrafficMirrorFilterId") => String.t(),
        optional("TrafficMirrorFilterRuleIds") => list(String.t()())
      }
      
  """
  @type describe_traffic_mirror_filter_rules_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      inference_device_info() :: %{
        "Count" => integer(),
        "Manufacturer" => String.t(),
        "MemoryInfo" => inference_device_memory_info(),
        "Name" => String.t()
      }
      
  """
  @type inference_device_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attach_network_interface_result() :: %{
        "AttachmentId" => String.t(),
        "NetworkCardIndex" => integer()
      }
      
  """
  @type attach_network_interface_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_route_table_result() :: %{
        "AssociationId" => String.t(),
        "AssociationState" => route_table_association_state()
      }
      
  """
  @type associate_route_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_instance_event_window_result() :: %{
        "InstanceEventWindow" => instance_event_window()
      }
      
  """
  @type disassociate_instance_event_window_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_address_attribute_request() :: %{
        optional("DomainName") => String.t(),
        optional("DryRun") => boolean(),
        required("AllocationId") => String.t()
      }
      
  """
  @type modify_address_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      import_snapshot_task() :: %{
        "Description" => String.t(),
        "ImportTaskId" => String.t(),
        "SnapshotTaskDetail" => snapshot_task_detail(),
        "Tags" => list(tag()())
      }
      
  """
  @type import_snapshot_task() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_route_table_association_result() :: %{
        "AssociationState" => route_table_association_state(),
        "NewAssociationId" => String.t()
      }
      
  """
  @type replace_route_table_association_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_image_deprecation_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type disable_image_deprecation_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      availability_zone_message() :: %{
        "Message" => String.t()
      }
      
  """
  @type availability_zone_message() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_transit_gateway_multicast_domain_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("SubnetIds") => list(String.t()()),
        optional("TransitGatewayAttachmentId") => String.t(),
        optional("TransitGatewayMulticastDomainId") => String.t()
      }
      
  """
  @type reject_transit_gateway_multicast_domain_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      metric_point() :: %{
        "EndDate" => non_neg_integer(),
        "StartDate" => non_neg_integer(),
        "Status" => String.t(),
        "Value" => float()
      }
      
  """
  @type metric_point() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_launch_template_versions_response_error_item() :: %{
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "ResponseError" => response_error(),
        "VersionNumber" => float()
      }
      
  """
  @type delete_launch_template_versions_response_error_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      security_group_reference() :: %{
        "GroupId" => String.t(),
        "ReferencingVpcId" => String.t(),
        "TransitGatewayId" => String.t(),
        "VpcPeeringConnectionId" => String.t()
      }
      
  """
  @type security_group_reference() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_resource_cidrs_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IpamPoolId") => String.t(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("ResourceId") => String.t(),
        optional("ResourceOwner") => String.t(),
        optional("ResourceTag") => request_ipam_resource_tag(),
        optional("ResourceType") => list(any()),
        required("IpamScopeId") => String.t()
      }
      
  """
  @type get_ipam_resource_cidrs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_modification() :: %{
        "EndTime" => non_neg_integer(),
        "ModificationState" => list(any()),
        "OriginalIops" => integer(),
        "OriginalMultiAttachEnabled" => boolean(),
        "OriginalSize" => integer(),
        "OriginalThroughput" => integer(),
        "OriginalVolumeType" => list(any()),
        "Progress" => float(),
        "StartTime" => non_neg_integer(),
        "StatusMessage" => String.t(),
        "TargetIops" => integer(),
        "TargetMultiAttachEnabled" => boolean(),
        "TargetSize" => integer(),
        "TargetThroughput" => integer(),
        "TargetVolumeType" => list(any()),
        "VolumeId" => String.t()
      }
      
  """
  @type volume_modification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_subnets_result() :: %{
        "NextToken" => String.t(),
        "Subnets" => list(subnet()())
      }
      
  """
  @type describe_subnets_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_peering_attachment_result() :: %{
        "TransitGatewayPeeringAttachment" => transit_gateway_peering_attachment()
      }
      
  """
  @type create_transit_gateway_peering_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_prefix_lists_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("PrefixListIds") => list(String.t()())
      }
      
  """
  @type describe_prefix_lists_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_certificate_revocation_list_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type client_certificate_revocation_list_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_topology_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("GroupNames") => list(String.t()()),
        optional("InstanceIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_instance_topology_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_vpn_tunnel_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type replace_vpn_tunnel_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ebs_default_kms_key_id_request() :: %{
        optional("DryRun") => boolean(),
        required("KmsKeyId") => String.t()
      }
      
  """
  @type modify_ebs_default_kms_key_id_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reservation_fleet_instance_specification() :: %{
        "AvailabilityZone" => String.t(),
        "AvailabilityZoneId" => String.t(),
        "EbsOptimized" => boolean(),
        "InstancePlatform" => list(any()),
        "InstanceType" => list(any()),
        "Priority" => integer(),
        "Weight" => float()
      }
      
  """
  @type reservation_fleet_instance_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      target_configuration() :: %{
        "InstanceCount" => integer(),
        "OfferingId" => String.t()
      }
      
  """
  @type target_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      public_ipv4_pool() :: %{
        "Description" => String.t(),
        "NetworkBorderGroup" => String.t(),
        "PoolAddressRanges" => list(public_ipv4_pool_range()()),
        "PoolId" => String.t(),
        "Tags" => list(tag()()),
        "TotalAddressCount" => integer(),
        "TotalAvailableAddressCount" => integer()
      }
      
  """
  @type public_ipv4_pool() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      additional_detail() :: %{
        "AdditionalDetailType" => String.t(),
        "Component" => analysis_component(),
        "LoadBalancers" => list(analysis_component()()),
        "RuleGroupRuleOptionsPairs" => list(rule_group_rule_options_pair()()),
        "RuleGroupTypePairs" => list(rule_group_type_pair()()),
        "RuleOptions" => list(rule_option()()),
        "ServiceName" => String.t(),
        "VpcEndpointService" => analysis_component()
      }
      
  """
  @type additional_detail() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_traffic_mirror_filter_request() :: %{
        optional("DryRun") => boolean(),
        required("TrafficMirrorFilterId") => String.t()
      }
      
  """
  @type delete_traffic_mirror_filter_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_network_insights_access_scope_analysis_findings_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("NetworkInsightsAccessScopeAnalysisId") => String.t()
      }
      
  """
  @type get_network_insights_access_scope_analysis_findings_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      phase2_d_h_group_numbers_request_list_value() :: %{
        "Value" => integer()
      }
      
  """
  @type phase2_d_h_group_numbers_request_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_specification() :: %{
        "LaunchTemplateId" => String.t(),
        "LaunchTemplateName" => String.t(),
        "Version" => String.t()
      }
      
  """
  @type launch_template_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_event_windows_result() :: %{
        "InstanceEventWindows" => list(instance_event_window()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_instance_event_windows_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      move_address_to_vpc_request() :: %{
        optional("DryRun") => boolean(),
        required("PublicIp") => String.t()
      }
      
  """
  @type move_address_to_vpc_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_public_address_security_group() :: %{
        "GroupId" => String.t(),
        "GroupName" => String.t()
      }
      
  """
  @type ipam_public_address_security_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpn_tunnel_certificate_request() :: %{
        optional("DryRun") => boolean(),
        required("VpnConnectionId") => String.t(),
        required("VpnTunnelOutsideIpAddress") => String.t()
      }
      
  """
  @type modify_vpn_tunnel_certificate_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type modify_vpc_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_customer_gateways_request() :: %{
        optional("CustomerGatewayIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()())
      }
      
  """
  @type describe_customer_gateways_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      apply_security_groups_to_client_vpn_target_network_result() :: %{
        "SecurityGroupIds" => list(String.t()())
      }
      
  """
  @type apply_security_groups_to_client_vpn_target_network_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      prefix_list_entry() :: %{
        "Cidr" => String.t(),
        "Description" => String.t()
      }
      
  """
  @type prefix_list_entry() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_aws_network_performance_metric_subscriptions_result() :: %{
        "NextToken" => String.t(),
        "Subscriptions" => list(subscription()())
      }
      
  """
  @type describe_aws_network_performance_metric_subscriptions_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_connection_options() :: %{
        "EnableAcceleration" => boolean(),
        "LocalIpv4NetworkCidr" => String.t(),
        "LocalIpv6NetworkCidr" => String.t(),
        "OutsideIpAddressType" => String.t(),
        "RemoteIpv4NetworkCidr" => String.t(),
        "RemoteIpv6NetworkCidr" => String.t(),
        "StaticRoutesOnly" => boolean(),
        "TransportTransitGatewayAttachmentId" => String.t(),
        "TunnelInsideIpVersion" => list(any()),
        "TunnelOptions" => list(tunnel_option()())
      }
      
  """
  @type vpn_connection_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fleets_result() :: %{
        "Fleets" => list(fleet_data()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_fleets_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_endpoint_policy_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("PolicyDocument") => String.t(),
        optional("PolicyEnabled") => boolean(),
        optional("SseSpecification") => verified_access_sse_specification_request(),
        required("VerifiedAccessEndpointId") => String.t()
      }
      
  """
  @type modify_verified_access_endpoint_policy_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_export_image_tasks_result() :: %{
        "ExportImageTasks" => list(export_image_task()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_export_image_tasks_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_local_gateway_route_table_result() :: %{
        "LocalGatewayRouteTable" => local_gateway_route_table()
      }
      
  """
  @type delete_local_gateway_route_table_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_image_launch_permission_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type cancel_image_launch_permission_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_volume_status_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("VolumeIds") => list(String.t()())
      }
      
  """
  @type describe_volume_status_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      connection_tracking_configuration() :: %{
        "TcpEstablishedTimeout" => integer(),
        "UdpStreamTimeout" => integer(),
        "UdpTimeout" => integer()
      }
      
  """
  @type connection_tracking_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_group_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("PolicyDocument") => String.t(),
        optional("SseSpecification") => verified_access_sse_specification_request(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("VerifiedAccessInstanceId") => String.t()
      }
      
  """
  @type create_verified_access_group_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_insights_analysis() :: %{
        "AdditionalAccounts" => list(String.t()()),
        "AlternatePathHints" => list(alternate_path_hint()()),
        "Explanations" => list(explanation()()),
        "FilterInArns" => list(String.t()()),
        "ForwardPathComponents" => list(path_component()()),
        "NetworkInsightsAnalysisArn" => String.t(),
        "NetworkInsightsAnalysisId" => String.t(),
        "NetworkInsightsPathId" => String.t(),
        "NetworkPathFound" => boolean(),
        "ReturnPathComponents" => list(path_component()()),
        "StartDate" => non_neg_integer(),
        "Status" => list(any()),
        "StatusMessage" => String.t(),
        "SuggestedAccounts" => list(String.t()()),
        "Tags" => list(tag()()),
        "WarningMessage" => String.t()
      }
      
  """
  @type network_insights_analysis() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_import_snapshot_tasks_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("ImportTaskIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_import_snapshot_tasks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      prefix_list_association() :: %{
        "ResourceId" => String.t(),
        "ResourceOwner" => String.t()
      }
      
  """
  @type prefix_list_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      release_hosts_request() :: %{
        required("HostIds") => list(String.t()())
      }
      
  """
  @type release_hosts_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_sse_specification_response() :: %{
        "CustomerManagedKeyEnabled" => boolean(),
        "KmsKeyArn" => String.t()
      }
      
  """
  @type verified_access_sse_specification_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      destination_options_request() :: %{
        "FileFormat" => list(any()),
        "HiveCompatiblePartitions" => boolean(),
        "PerHourPartition" => boolean()
      }
      
  """
  @type destination_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_volumes_result() :: %{
        "NextToken" => String.t(),
        "Volumes" => list(volume()())
      }
      
  """
  @type describe_volumes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      memory_mi_b_request() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type memory_mi_b_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface_count_request() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type network_interface_count_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_flow_logs_integration_template_result() :: %{
        "Result" => String.t()
      }
      
  """
  @type get_flow_logs_integration_template_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_tags_result() :: %{
        "NextToken" => String.t(),
        "Tags" => list(tag_description()())
      }
      
  """
  @type describe_tags_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_status() :: %{
        "AvailabilityZone" => String.t(),
        "Events" => list(instance_status_event()()),
        "InstanceId" => String.t(),
        "InstanceState" => instance_state(),
        "InstanceStatus" => instance_status_summary(),
        "OutpostArn" => String.t(),
        "SystemStatus" => instance_status_summary()
      }
      
  """
  @type instance_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instances_placement() :: %{
        "AvailabilityZone" => String.t(),
        "GroupName" => String.t()
      }
      
  """
  @type scheduled_instances_placement() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      i_k_e_versions_list_value() :: %{
        "Value" => String.t()
      }
      
  """
  @type i_k_e_versions_list_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_route_tables_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TransitGatewayRouteTableIds") => list(String.t()())
      }
      
  """
  @type describe_transit_gateway_route_tables_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      principal_id_format() :: %{
        "Arn" => String.t(),
        "Statuses" => list(id_format()())
      }
      
  """
  @type principal_id_format() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      dns_entry() :: %{
        "DnsName" => String.t(),
        "HostedZoneId" => String.t()
      }
      
  """
  @type dns_entry() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_resource_cidrs_result() :: %{
        "IpamResourceCidrs" => list(ipam_resource_cidr()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_ipam_resource_cidrs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_fast_launch_request() :: %{
        optional("DryRun") => boolean(),
        optional("LaunchTemplate") => fast_launch_launch_template_specification_request(),
        optional("MaxParallelLaunches") => integer(),
        optional("ResourceType") => String.t(),
        optional("SnapshotConfiguration") => fast_launch_snapshot_configuration_request(),
        required("ImageId") => String.t()
      }
      
  """
  @type enable_fast_launch_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      through_resources_statement_request() :: %{
        "ResourceStatement" => resource_statement_request()
      }
      
  """
  @type through_resources_statement_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_transit_gateway_vpc_attachment_request() :: %{
        optional("AddSubnetIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Options") => modify_transit_gateway_vpc_attachment_request_options(),
        optional("RemoveSubnetIds") => list(String.t()()),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type modify_transit_gateway_vpc_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      total_local_storage_g_b() :: %{
        "Max" => float(),
        "Min" => float()
      }
      
  """
  @type total_local_storage_g_b() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_capacity_reservation_fleets_request() :: %{
        optional("DryRun") => boolean(),
        required("CapacityReservationFleetIds") => list(String.t()())
      }
      
  """
  @type cancel_capacity_reservation_fleets_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fpga_device_memory_info() :: %{
        "SizeInMiB" => integer()
      }
      
  """
  @type fpga_device_memory_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_vpc_endpoint_connections_request() :: %{
        optional("DryRun") => boolean(),
        required("ServiceId") => String.t(),
        required("VpcEndpointIds") => list(String.t()())
      }
      
  """
  @type accept_vpc_endpoint_connections_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_aggregate_id_format_result() :: %{
        "Statuses" => list(id_format()()),
        "UseLongIdsAggregated" => boolean()
      }
      
  """
  @type describe_aggregate_id_format_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_launch_template_request() :: %{
        optional("DryRun") => boolean(),
        optional("LaunchTemplateId") => String.t(),
        optional("LaunchTemplateName") => String.t()
      }
      
  """
  @type delete_launch_template_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      alternate_path_hint() :: %{
        "ComponentArn" => String.t(),
        "ComponentId" => String.t()
      }
      
  """
  @type alternate_path_hint() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_regions_result() :: %{
        "Regions" => list(region()())
      }
      
  """
  @type describe_regions_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_vpc_attachment_options() :: %{
        "ApplianceModeSupport" => list(any()),
        "DnsSupport" => list(any()),
        "Ipv6Support" => list(any()),
        "SecurityGroupReferencingSupport" => list(any())
      }
      
  """
  @type transit_gateway_vpc_attachment_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      terminate_connection_status() :: %{
        "ConnectionId" => String.t(),
        "CurrentStatus" => client_vpn_connection_status(),
        "PreviousStatus" => client_vpn_connection_status()
      }
      
  """
  @type terminate_connection_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_policy_table_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayPolicyTableId") => String.t()
      }
      
  """
  @type delete_transit_gateway_policy_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_address_transfer_request() :: %{
        optional("DryRun") => boolean(),
        required("AllocationId") => String.t()
      }
      
  """
  @type disable_address_transfer_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_host_reservations_request() :: %{
        optional("Filter") => list(filter()()),
        optional("HostReservationIdSet") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_host_reservations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_transit_gateway_policy_table_request() :: %{
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("TransitGatewayId") => String.t()
      }
      
  """
  @type create_transit_gateway_policy_table_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_traffic_mirror_filters_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("TrafficMirrorFilterIds") => list(String.t()())
      }
      
  """
  @type describe_traffic_mirror_filters_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_tags_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_tags_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      referenced_security_group() :: %{
        "GroupId" => String.t(),
        "PeeringStatus" => String.t(),
        "UserId" => String.t(),
        "VpcId" => String.t(),
        "VpcPeeringConnectionId" => String.t()
      }
      
  """
  @type referenced_security_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      revoke_security_group_ingress_result() :: %{
        "Return" => boolean(),
        "UnknownIpPermissions" => list(ip_permission()())
      }
      
  """
  @type revoke_security_group_ingress_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_launch_template_overrides_request() :: %{
        "AvailabilityZone" => String.t(),
        "ImageId" => String.t(),
        "InstanceRequirements" => instance_requirements_request(),
        "InstanceType" => list(any()),
        "MaxPrice" => String.t(),
        "Placement" => placement(),
        "Priority" => float(),
        "SubnetId" => String.t(),
        "WeightedCapacity" => float()
      }
      
  """
  @type fleet_launch_template_overrides_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_route_request() :: %{
        optional("CarrierGatewayId") => String.t(),
        optional("CoreNetworkArn") => String.t(),
        optional("DestinationCidrBlock") => String.t(),
        optional("DestinationIpv6CidrBlock") => String.t(),
        optional("DestinationPrefixListId") => String.t(),
        optional("DryRun") => boolean(),
        optional("EgressOnlyInternetGatewayId") => String.t(),
        optional("GatewayId") => String.t(),
        optional("InstanceId") => String.t(),
        optional("LocalGatewayId") => String.t(),
        optional("NatGatewayId") => String.t(),
        optional("NetworkInterfaceId") => String.t(),
        optional("TransitGatewayId") => String.t(),
        optional("VpcEndpointId") => String.t(),
        optional("VpcPeeringConnectionId") => String.t(),
        required("RouteTableId") => String.t()
      }
      
  """
  @type create_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      total_local_storage_g_b_request() :: %{
        "Max" => float(),
        "Min" => float()
      }
      
  """
  @type total_local_storage_g_b_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_spot_maintenance_strategies_request() :: %{
        "CapacityRebalance" => fleet_spot_capacity_rebalance_request()
      }
      
  """
  @type fleet_spot_maintenance_strategies_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_client_vpn_target_network_result() :: %{
        "AssociationId" => String.t(),
        "Status" => association_status()
      }
      
  """
  @type associate_client_vpn_target_network_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipam_pool_source_resource_request() :: %{
        "ResourceId" => String.t(),
        "ResourceOwner" => String.t(),
        "ResourceRegion" => String.t(),
        "ResourceType" => list(any())
      }
      
  """
  @type ipam_pool_source_resource_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_host_reservation_purchase_preview_request() :: %{
        required("HostIdSet") => list(String.t()()),
        required("OfferingId") => String.t()
      }
      
  """
  @type get_host_reservation_purchase_preview_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_elastic_gpus_result() :: %{
        "ElasticGpuSet" => list(elastic_gpus()()),
        "MaxResults" => integer(),
        "NextToken" => String.t()
      }
      
  """
  @type describe_elastic_gpus_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_endpoint_load_balancer_options() :: %{
        "LoadBalancerArn" => String.t(),
        "Port" => integer(),
        "Protocol" => list(any()),
        "SubnetIds" => list(String.t()())
      }
      
  """
  @type create_verified_access_endpoint_load_balancer_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_export_task_request() :: %{
        required("ExportTaskId") => String.t()
      }
      
  """
  @type cancel_export_task_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_maintenance_options_request() :: %{
        "AutoRecovery" => list(any())
      }
      
  """
  @type instance_maintenance_options_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_attachment_association() :: %{
        "State" => list(any()),
        "TransitGatewayRouteTableId" => String.t()
      }
      
  """
  @type transit_gateway_attachment_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      request_spot_instances_result() :: %{
        "SpotInstanceRequests" => list(spot_instance_request()())
      }
      
  """
  @type request_spot_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_dhcp_options_result() :: %{
        "DhcpOptions" => dhcp_options()
      }
      
  """
  @type create_dhcp_options_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_ipam_byoasn_result() :: %{
        "AsnAssociation" => asn_association()
      }
      
  """
  @type disassociate_ipam_byoasn_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      neuron_device_core_info() :: %{
        "Count" => integer(),
        "Version" => integer()
      }
      
  """
  @type neuron_device_core_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_capacity_block_result() :: %{
        "CapacityReservation" => capacity_reservation()
      }
      
  """
  @type purchase_capacity_block_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_request_options() :: %{
        "AmazonSideAsn" => float(),
        "AutoAcceptSharedAttachments" => list(any()),
        "DefaultRouteTableAssociation" => list(any()),
        "DefaultRouteTablePropagation" => list(any()),
        "DnsSupport" => list(any()),
        "MulticastSupport" => list(any()),
        "SecurityGroupReferencingSupport" => list(any()),
        "TransitGatewayCidrBlocks" => list(String.t()()),
        "VpnEcmpSupport" => list(any())
      }
      
  """
  @type transit_gateway_request_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_connection() :: %{
        "ClientIp" => String.t(),
        "ClientVpnEndpointId" => String.t(),
        "CommonName" => String.t(),
        "ConnectionEndTime" => String.t(),
        "ConnectionEstablishedTime" => String.t(),
        "ConnectionId" => String.t(),
        "EgressBytes" => String.t(),
        "EgressPackets" => String.t(),
        "IngressBytes" => String.t(),
        "IngressPackets" => String.t(),
        "PostureComplianceStatuses" => list(String.t()()),
        "Status" => client_vpn_connection_status(),
        "Timestamp" => String.t(),
        "Username" => String.t()
      }
      
  """
  @type client_vpn_connection() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      store_image_task_result() :: %{
        "AmiId" => String.t(),
        "Bucket" => String.t(),
        "ProgressPercentage" => integer(),
        "S3objectKey" => String.t(),
        "StoreTaskFailureReason" => String.t(),
        "StoreTaskState" => String.t(),
        "TaskStartTime" => non_neg_integer()
      }
      
  """
  @type store_image_task_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoint_service_configurations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("ServiceIds") => list(String.t()())
      }
      
  """
  @type describe_vpc_endpoint_service_configurations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deregister_transit_gateway_multicast_group_sources_result() :: %{
        "DeregisteredMulticastGroupSources" => transit_gateway_multicast_deregistered_group_sources()
      }
      
  """
  @type deregister_transit_gateway_multicast_group_sources_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_spot_placement_scores_request() :: %{
        optional("DryRun") => boolean(),
        optional("InstanceRequirementsWithMetadata") => instance_requirements_with_metadata_request(),
        optional("InstanceTypes") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("RegionNames") => list(String.t()()),
        optional("SingleAvailabilityZone") => boolean(),
        optional("TargetCapacityUnitType") => list(any()),
        required("TargetCapacity") => integer()
      }
      
  """
  @type get_spot_placement_scores_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_import_image_tasks_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("ImportTaskIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_import_image_tasks_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_routes_result() :: %{
        "NextToken" => String.t(),
        "Routes" => list(client_vpn_route()())
      }
      
  """
  @type describe_client_vpn_routes_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      pricing_detail() :: %{
        "Count" => integer(),
        "Price" => float()
      }
      
  """
  @type pricing_detail() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      packet_header_statement_request() :: %{
        "DestinationAddresses" => list(String.t()()),
        "DestinationPorts" => list(String.t()()),
        "DestinationPrefixLists" => list(String.t()()),
        "Protocols" => list(list(any())()),
        "SourceAddresses" => list(String.t()()),
        "SourcePorts" => list(String.t()()),
        "SourcePrefixLists" => list(String.t()())
      }
      
  """
  @type packet_header_statement_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_default_credit_specification_request() :: %{
        optional("DryRun") => boolean(),
        required("CpuCredits") => String.t(),
        required("InstanceFamily") => list(any())
      }
      
  """
  @type modify_default_credit_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      history_record() :: %{
        "EventInformation" => event_information(),
        "EventType" => list(any()),
        "Timestamp" => non_neg_integer()
      }
      
  """
  @type history_record() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_peering_connection() :: %{
        "AccepterVpcInfo" => vpc_peering_connection_vpc_info(),
        "ExpirationTime" => non_neg_integer(),
        "RequesterVpcInfo" => vpc_peering_connection_vpc_info(),
        "Status" => vpc_peering_connection_state_reason(),
        "Tags" => list(tag()()),
        "VpcPeeringConnectionId" => String.t()
      }
      
  """
  @type vpc_peering_connection() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accelerator_total_memory_mi_b() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type accelerator_total_memory_mi_b() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instances_configuration() :: %{
        "AvailabilityZone" => String.t(),
        "InstanceCount" => integer(),
        "InstanceType" => list(any()),
        "Platform" => String.t(),
        "Scope" => list(any())
      }
      
  """
  @type reserved_instances_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      withdraw_byoip_cidr_result() :: %{
        "ByoipCidr" => byoip_cidr()
      }
      
  """
  @type withdraw_byoip_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_store_image_task_request() :: %{
        optional("DryRun") => boolean(),
        optional("S3ObjectTags") => list(s3_object_tag()()),
        required("Bucket") => String.t(),
        required("ImageId") => String.t()
      }
      
  """
  @type create_store_image_task_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_tenancy_result() :: %{
        "ReturnValue" => boolean()
      }
      
  """
  @type modify_vpc_tenancy_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_interface_result() :: %{
        "ClientToken" => String.t(),
        "NetworkInterface" => network_interface()
      }
      
  """
  @type create_network_interface_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_console_output_request() :: %{
        optional("DryRun") => boolean(),
        optional("Latest") => boolean(),
        required("InstanceId") => String.t()
      }
      
  """
  @type get_console_output_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      release_hosts_result() :: %{
        "Successful" => list(String.t()()),
        "Unsuccessful" => list(unsuccessful_item()())
      }
      
  """
  @type release_hosts_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disk_info() :: %{
        "Count" => integer(),
        "SizeInGB" => float(),
        "Type" => list(any())
      }
      
  """
  @type disk_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_public_ipv4_pool_request() :: %{
        optional("DryRun") => boolean(),
        optional("NetworkBorderGroup") => String.t(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_public_ipv4_pool_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      host_reservation() :: %{
        "Count" => integer(),
        "CurrencyCode" => list(any()),
        "Duration" => integer(),
        "End" => non_neg_integer(),
        "HostIdSet" => list(String.t()()),
        "HostReservationId" => String.t(),
        "HourlyPrice" => String.t(),
        "InstanceFamily" => String.t(),
        "OfferingId" => String.t(),
        "PaymentOption" => list(any()),
        "Start" => non_neg_integer(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "UpfrontPrice" => String.t()
      }
      
  """
  @type host_reservation() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_key_pairs_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("IncludePublicKey") => boolean(),
        optional("KeyNames") => list(String.t()()),
        optional("KeyPairIds") => list(String.t()())
      }
      
  """
  @type describe_key_pairs_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_traffic_mirror_filter_rule_result() :: %{
        "TrafficMirrorFilterRule" => traffic_mirror_filter_rule()
      }
      
  """
  @type modify_traffic_mirror_filter_rule_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      destination_options_response() :: %{
        "FileFormat" => list(any()),
        "HiveCompatiblePartitions" => boolean(),
        "PerHourPartition" => boolean()
      }
      
  """
  @type destination_options_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv6_prefix_specification_response() :: %{
        "Ipv6Prefix" => String.t()
      }
      
  """
  @type ipv6_prefix_specification_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_address_history_result() :: %{
        "HistoryRecords" => list(ipam_address_history_record()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_ipam_address_history_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      slot_date_time_range_request() :: %{
        "EarliestTime" => non_neg_integer(),
        "LatestTime" => non_neg_integer()
      }
      
  """
  @type slot_date_time_range_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instance_limit_price() :: %{
        "Amount" => float(),
        "CurrencyCode" => list(any())
      }
      
  """
  @type reserved_instance_limit_price() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_byoasn_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_ipam_byoasn_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      report_instance_status_request() :: %{
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("EndTime") => non_neg_integer(),
        optional("StartTime") => non_neg_integer(),
        required("Instances") => list(String.t()()),
        required("ReasonCodes") => list(list(any())()),
        required("Status") => list(any())
      }
      
  """
  @type report_instance_status_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_fpga_image_attribute_request() :: %{
        optional("Attribute") => list(any()),
        optional("DryRun") => boolean(),
        required("FpgaImageId") => String.t()
      }
      
  """
  @type reset_fpga_image_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      integrate_services() :: %{
        "AthenaIntegrations" => list(athena_integration()())
      }
      
  """
  @type integrate_services() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_traffic_mirror_filter_result() :: %{
        "ClientToken" => String.t(),
        "TrafficMirrorFilter" => traffic_mirror_filter()
      }
      
  """
  @type create_traffic_mirror_filter_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_trust_provider_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DeviceOptions") => create_verified_access_trust_provider_device_options(),
        optional("DeviceTrustProviderType") => list(any()),
        optional("DryRun") => boolean(),
        optional("OidcOptions") => create_verified_access_trust_provider_oidc_options(),
        optional("SseSpecification") => verified_access_sse_specification_request(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("UserTrustProviderType") => list(any()),
        required("PolicyReferenceName") => String.t(),
        required("TrustProviderType") => list(any())
      }
      
  """
  @type create_verified_access_trust_provider_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      address() :: %{
        "AllocationId" => String.t(),
        "AssociationId" => String.t(),
        "CarrierIp" => String.t(),
        "CustomerOwnedIp" => String.t(),
        "CustomerOwnedIpv4Pool" => String.t(),
        "Domain" => list(any()),
        "InstanceId" => String.t(),
        "NetworkBorderGroup" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "NetworkInterfaceOwnerId" => String.t(),
        "PrivateIpAddress" => String.t(),
        "PublicIp" => String.t(),
        "PublicIpv4Pool" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_transit_gateway_vpc_attachment_result() :: %{
        "TransitGatewayVpcAttachment" => transit_gateway_vpc_attachment()
      }
      
  """
  @type modify_transit_gateway_vpc_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unlock_snapshot_result() :: %{
        "SnapshotId" => String.t()
      }
      
  """
  @type unlock_snapshot_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      run_instances_monitoring_enabled() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type run_instances_monitoring_enabled() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_capacity_reservation_usage_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("CapacityReservationId") => String.t()
      }
      
  """
  @type get_capacity_reservation_usage_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_traffic_mirror_filter_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_traffic_mirror_filter_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_transit_gateway_route_request() :: %{
        optional("Blackhole") => boolean(),
        optional("DryRun") => boolean(),
        optional("TransitGatewayAttachmentId") => String.t(),
        required("DestinationCidrBlock") => String.t(),
        required("TransitGatewayRouteTableId") => String.t()
      }
      
  """
  @type replace_transit_gateway_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_fleet_requests_request() :: %{
        optional("DryRun") => boolean(),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        optional("SpotFleetRequestIds") => list(String.t()())
      }
      
  """
  @type describe_spot_fleet_requests_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      customer_gateway() :: %{
        "BgpAsn" => String.t(),
        "BgpAsnExtended" => String.t(),
        "CertificateArn" => String.t(),
        "CustomerGatewayId" => String.t(),
        "DeviceName" => String.t(),
        "IpAddress" => String.t(),
        "State" => String.t(),
        "Tags" => list(tag()()),
        "Type" => String.t()
      }
      
  """
  @type customer_gateway() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      add_ipam_operating_region() :: %{
        "RegionName" => String.t()
      }
      
  """
  @type add_ipam_operating_region() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_vpn_connection_request() :: %{
        optional("DryRun") => boolean(),
        required("VpnConnectionId") => String.t()
      }
      
  """
  @type delete_vpn_connection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      release_ipam_pool_allocation_request() :: %{
        optional("DryRun") => boolean(),
        required("Cidr") => String.t(),
        required("IpamPoolAllocationId") => String.t(),
        required("IpamPoolId") => String.t()
      }
      
  """
  @type release_ipam_pool_allocation_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_vpc_attachment() :: %{
        "CreationTime" => non_neg_integer(),
        "Options" => transit_gateway_vpc_attachment_options(),
        "State" => list(any()),
        "SubnetIds" => list(String.t()()),
        "Tags" => list(tag()()),
        "TransitGatewayAttachmentId" => String.t(),
        "TransitGatewayId" => String.t(),
        "VpcId" => String.t(),
        "VpcOwnerId" => String.t()
      }
      
  """
  @type transit_gateway_vpc_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_event_window_state_change() :: %{
        "InstanceEventWindowId" => String.t(),
        "State" => list(any())
      }
      
  """
  @type instance_event_window_state_change() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      baseline_ebs_bandwidth_mbps() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type baseline_ebs_bandwidth_mbps() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_reserved_instances_offering_result() :: %{
        "ReservedInstancesId" => String.t()
      }
      
  """
  @type purchase_reserved_instances_offering_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_snapshot_attribute_result() :: %{
        "CreateVolumePermissions" => list(create_volume_permission()()),
        "ProductCodes" => list(product_code()()),
        "SnapshotId" => String.t()
      }
      
  """
  @type describe_snapshot_attribute_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_transit_gateway_multicast_domains_result() :: %{
        "NextToken" => String.t(),
        "TransitGatewayMulticastDomains" => list(transit_gateway_multicast_domain()())
      }
      
  """
  @type describe_transit_gateway_multicast_domains_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_group() :: %{
        "CreationTime" => String.t(),
        "DeletionTime" => String.t(),
        "Description" => String.t(),
        "LastUpdatedTime" => String.t(),
        "Owner" => String.t(),
        "SseSpecification" => verified_access_sse_specification_response(),
        "Tags" => list(tag()()),
        "VerifiedAccessGroupArn" => String.t(),
        "VerifiedAccessGroupId" => String.t(),
        "VerifiedAccessInstanceId" => String.t()
      }
      
  """
  @type verified_access_group() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_spot_fleet_requests_request() :: %{
        optional("DryRun") => boolean(),
        required("SpotFleetRequestIds") => list(String.t()()),
        required("TerminateInstances") => boolean()
      }
      
  """
  @type cancel_spot_fleet_requests_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_snapshot_block_public_access_result() :: %{
        "State" => list(any())
      }
      
  """
  @type disable_snapshot_block_public_access_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_spot_fleet_request_history_request() :: %{
        optional("DryRun") => boolean(),
        optional("EventType") => list(any()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("SpotFleetRequestId") => String.t(),
        required("StartTime") => non_neg_integer()
      }
      
  """
  @type describe_spot_fleet_request_history_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      failed_queued_purchase_deletion() :: %{
        "Error" => delete_queued_reserved_instances_error(),
        "ReservedInstancesId" => String.t()
      }
      
  """
  @type failed_queued_purchase_deletion() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_endpoint_policy_result() :: %{
        "PolicyDocument" => String.t(),
        "PolicyEnabled" => boolean(),
        "SseSpecification" => verified_access_sse_specification_response()
      }
      
  """
  @type modify_verified_access_endpoint_policy_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      user_bucket() :: %{
        "S3Bucket" => String.t(),
        "S3Key" => String.t()
      }
      
  """
  @type user_bucket() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_block_device_mapping_specification() :: %{
        "DeviceName" => String.t(),
        "Ebs" => ebs_instance_block_device_specification(),
        "NoDevice" => String.t(),
        "VirtualName" => String.t()
      }
      
  """
  @type instance_block_device_mapping_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_block_device_mapping_request() :: %{
        "DeviceName" => String.t(),
        "Ebs" => launch_template_ebs_block_device_request(),
        "NoDevice" => String.t(),
        "VirtualName" => String.t()
      }
      
  """
  @type launch_template_block_device_mapping_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_storage_info() :: %{
        "Disks" => list(disk_info()()),
        "EncryptionSupport" => list(any()),
        "NvmeSupport" => list(any()),
        "TotalSizeInGB" => float()
      }
      
  """
  @type instance_storage_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_iam_instance_profile_associations_result() :: %{
        "IamInstanceProfileAssociations" => list(iam_instance_profile_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_iam_instance_profile_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_ena_srd_specification() :: %{
        "EnaSrdEnabled" => boolean(),
        "EnaSrdUdpSpecification" => launch_template_ena_srd_udp_specification()
      }
      
  """
  @type launch_template_ena_srd_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_route_tables_result() :: %{
        "LocalGatewayRouteTables" => list(local_gateway_route_table()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_local_gateway_route_tables_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_instance_capacity_reservation_attributes_request() :: %{
        optional("DryRun") => boolean(),
        required("CapacityReservationSpecification") => capacity_reservation_specification(),
        required("InstanceId") => String.t()
      }
      
  """
  @type modify_instance_capacity_reservation_attributes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      stop_instances_result() :: %{
        "StoppingInstances" => list(instance_state_change()())
      }
      
  """
  @type stop_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_instance_metadata_defaults_result() :: %{
        "AccountLevel" => instance_metadata_defaults_response()
      }
      
  """
  @type get_instance_metadata_defaults_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_image_block_public_access_state_result() :: %{
        "ImageBlockPublicAccessState" => String.t()
      }
      
  """
  @type get_image_block_public_access_state_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      bundle_task() :: %{
        "BundleId" => String.t(),
        "BundleTaskError" => bundle_task_error(),
        "InstanceId" => String.t(),
        "Progress" => String.t(),
        "StartTime" => non_neg_integer(),
        "State" => list(any()),
        "Storage" => storage(),
        "UpdateTime" => non_neg_integer()
      }
      
  """
  @type bundle_task() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_interfaces_result() :: %{
        "NetworkInterfaces" => list(network_interface()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_network_interfaces_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_fleet_request_config_data() :: %{
        "AllocationStrategy" => list(any()),
        "ClientToken" => String.t(),
        "Context" => String.t(),
        "ExcessCapacityTerminationPolicy" => list(any()),
        "FulfilledCapacity" => float(),
        "IamFleetRole" => String.t(),
        "InstanceInterruptionBehavior" => list(any()),
        "InstancePoolsToUseCount" => integer(),
        "LaunchSpecifications" => list(spot_fleet_launch_specification()()),
        "LaunchTemplateConfigs" => list(launch_template_config()()),
        "LoadBalancersConfig" => load_balancers_config(),
        "OnDemandAllocationStrategy" => list(any()),
        "OnDemandFulfilledCapacity" => float(),
        "OnDemandMaxTotalPrice" => String.t(),
        "OnDemandTargetCapacity" => integer(),
        "ReplaceUnhealthyInstances" => boolean(),
        "SpotMaintenanceStrategies" => spot_maintenance_strategies(),
        "SpotMaxTotalPrice" => String.t(),
        "SpotPrice" => String.t(),
        "TagSpecifications" => list(tag_specification()()),
        "TargetCapacity" => integer(),
        "TargetCapacityUnitType" => list(any()),
        "TerminateInstancesWithExpiration" => boolean(),
        "Type" => list(any()),
        "ValidFrom" => non_neg_integer(),
        "ValidUntil" => non_neg_integer()
      }
      
  """
  @type spot_fleet_request_config_data() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_ipam_pool_request() :: %{
        optional("AddAllocationResourceTags") => list(request_ipam_resource_tag()()),
        optional("AllocationDefaultNetmaskLength") => integer(),
        optional("AllocationMaxNetmaskLength") => integer(),
        optional("AllocationMinNetmaskLength") => integer(),
        optional("AutoImport") => boolean(),
        optional("ClearAllocationDefaultNetmaskLength") => boolean(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("RemoveAllocationResourceTags") => list(request_ipam_resource_tag()()),
        required("IpamPoolId") => String.t()
      }
      
  """
  @type modify_ipam_pool_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      traffic_mirror_session() :: %{
        "Description" => String.t(),
        "NetworkInterfaceId" => String.t(),
        "OwnerId" => String.t(),
        "PacketLength" => integer(),
        "SessionNumber" => integer(),
        "Tags" => list(tag()()),
        "TrafficMirrorFilterId" => String.t(),
        "TrafficMirrorSessionId" => String.t(),
        "TrafficMirrorTargetId" => String.t(),
        "VirtualNetworkId" => integer()
      }
      
  """
  @type traffic_mirror_session() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_fleets_request() :: %{
        optional("DryRun") => boolean(),
        required("FleetIds") => list(String.t()()),
        required("TerminateInstances") => boolean()
      }
      
  """
  @type delete_fleets_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      terminate_instances_result() :: %{
        "TerminatingInstances" => list(instance_state_change()())
      }
      
  """
  @type terminate_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_ipv6_address() :: %{
        "Ipv6Address" => String.t(),
        "IsPrimaryIpv6" => boolean()
      }
      
  """
  @type instance_ipv6_address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_transit_gateway_multicast_domain_associations_result() :: %{
        "Associations" => transit_gateway_multicast_domain_associations()
      }
      
  """
  @type reject_transit_gateway_multicast_domain_associations_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_service_permissions_result() :: %{
        "AddedPrincipals" => list(added_principal()()),
        "ReturnValue" => boolean()
      }
      
  """
  @type modify_vpc_endpoint_service_permissions_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      prefix_list_id() :: %{
        "Description" => String.t(),
        "PrefixListId" => String.t()
      }
      
  """
  @type prefix_list_id() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_policy_table() :: %{
        "CreationTime" => non_neg_integer(),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "TransitGatewayId" => String.t(),
        "TransitGatewayPolicyTableId" => String.t()
      }
      
  """
  @type transit_gateway_policy_table() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      accept_reserved_instances_exchange_quote_request() :: %{
        optional("DryRun") => boolean(),
        optional("TargetConfigurations") => list(target_configuration_request()()),
        required("ReservedInstanceIds") => list(String.t()())
      }
      
  """
  @type accept_reserved_instances_exchange_quote_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_local_gateway_route_tables_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("LocalGatewayRouteTableIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_local_gateway_route_tables_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      v_cpu_count_range_request() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type v_cpu_count_range_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_types_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("InstanceTypes") => list(list(any())()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_instance_types_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_egress_only_internet_gateway_result() :: %{
        "ClientToken" => String.t(),
        "EgressOnlyInternetGateway" => egress_only_internet_gateway()
      }
      
  """
  @type create_egress_only_internet_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_log_cloud_watch_logs_destination() :: %{
        "DeliveryStatus" => verified_access_log_delivery_status(),
        "Enabled" => boolean(),
        "LogGroup" => String.t()
      }
      
  """
  @type verified_access_log_cloud_watch_logs_destination() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      iam_instance_profile() :: %{
        "Arn" => String.t(),
        "Id" => String.t()
      }
      
  """
  @type iam_instance_profile() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      launch_template_ebs_block_device_request() :: %{
        "DeleteOnTermination" => boolean(),
        "Encrypted" => boolean(),
        "Iops" => integer(),
        "KmsKeyId" => String.t(),
        "SnapshotId" => String.t(),
        "Throughput" => integer(),
        "VolumeSize" => integer(),
        "VolumeType" => list(any())
      }
      
  """
  @type launch_template_ebs_block_device_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_client_vpn_endpoint_request() :: %{
        optional("ClientConnectOptions") => client_connect_options(),
        optional("ClientLoginBannerOptions") => client_login_banner_options(),
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DnsServers") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("SecurityGroupIds") => list(String.t()()),
        optional("SelfServicePortal") => list(any()),
        optional("SessionTimeoutHours") => integer(),
        optional("SplitTunnel") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("TransportProtocol") => list(any()),
        optional("VpcId") => String.t(),
        optional("VpnPort") => integer(),
        required("AuthenticationOptions") => list(client_vpn_authentication_request()()),
        required("ClientCidrBlock") => String.t(),
        required("ConnectionLogOptions") => connection_log_options(),
        required("ServerCertificateArn") => String.t()
      }
      
  """
  @type create_client_vpn_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      request_ipam_resource_tag() :: %{
        "Key" => String.t(),
        "Value" => String.t()
      }
      
  """
  @type request_ipam_resource_tag() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_trust_provider_result() :: %{
        "VerifiedAccessTrustProvider" => verified_access_trust_provider()
      }
      
  """
  @type create_verified_access_trust_provider_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_internet_gateway_result() :: %{
        "InternetGateway" => internet_gateway()
      }
      
  """
  @type create_internet_gateway_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_verified_access_instance_result() :: %{
        "VerifiedAccessInstance" => verified_access_instance()
      }
      
  """
  @type modify_verified_access_instance_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      gpu_device_memory_info() :: %{
        "SizeInMiB" => integer()
      }
      
  """
  @type gpu_device_memory_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_launch_template_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("VersionDescription") => String.t(),
        required("LaunchTemplateData") => request_launch_template_data(),
        required("LaunchTemplateName") => String.t()
      }
      
  """
  @type create_launch_template_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_connection_options_specification() :: %{
        "EnableAcceleration" => boolean(),
        "LocalIpv4NetworkCidr" => String.t(),
        "LocalIpv6NetworkCidr" => String.t(),
        "OutsideIpAddressType" => String.t(),
        "RemoteIpv4NetworkCidr" => String.t(),
        "RemoteIpv6NetworkCidr" => String.t(),
        "StaticRoutesOnly" => boolean(),
        "TransportTransitGatewayAttachmentId" => String.t(),
        "TunnelInsideIpVersion" => list(any()),
        "TunnelOptions" => list(vpn_tunnel_options_specification()())
      }
      
  """
  @type vpn_connection_options_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_multicast_deregistered_group_members() :: %{
        "DeregisteredNetworkInterfaceIds" => list(String.t()()),
        "GroupIpAddress" => String.t(),
        "TransitGatewayMulticastDomainId" => String.t()
      }
      
  """
  @type transit_gateway_multicast_deregistered_group_members() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      authorize_security_group_ingress_result() :: %{
        "Return" => boolean(),
        "SecurityGroupRules" => list(security_group_rule()())
      }
      
  """
  @type authorize_security_group_ingress_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      security_group_for_vpc() :: %{
        "Description" => String.t(),
        "GroupId" => String.t(),
        "GroupName" => String.t(),
        "OwnerId" => String.t(),
        "PrimaryVpcId" => String.t(),
        "Tags" => list(tag()())
      }
      
  """
  @type security_group_for_vpc() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      capacity_reservation_fleet() :: %{
        "AllocationStrategy" => String.t(),
        "CapacityReservationFleetArn" => String.t(),
        "CapacityReservationFleetId" => String.t(),
        "CreateTime" => non_neg_integer(),
        "EndDate" => non_neg_integer(),
        "InstanceMatchCriteria" => list(any()),
        "InstanceTypeSpecifications" => list(fleet_capacity_reservation()()),
        "State" => list(any()),
        "Tags" => list(tag()()),
        "Tenancy" => list(any()),
        "TotalFulfilledCapacity" => float(),
        "TotalTargetCapacity" => integer()
      }
      
  """
  @type capacity_reservation_fleet() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_discovered_accounts_result() :: %{
        "IpamDiscoveredAccounts" => list(ipam_discovered_account()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_ipam_discovered_accounts_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_snapshot_block_public_access_request() :: %{
        optional("DryRun") => boolean(),
        required("State") => list(any())
      }
      
  """
  @type enable_snapshot_block_public_access_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_vpc_attachment_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayAttachmentId") => String.t()
      }
      
  """
  @type delete_transit_gateway_vpc_attachment_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_account_attributes_request() :: %{
        optional("AttributeNames") => list(list(any())()),
        optional("DryRun") => boolean()
      }
      
  """
  @type describe_account_attributes_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_store_image_task_result() :: %{
        "ObjectKey" => String.t()
      }
      
  """
  @type create_store_image_task_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      firewall_stateless_rule() :: %{
        "DestinationPorts" => list(port_range()()),
        "Destinations" => list(String.t()()),
        "Priority" => integer(),
        "Protocols" => list(integer()()),
        "RuleAction" => String.t(),
        "RuleGroupArn" => String.t(),
        "SourcePorts" => list(port_range()()),
        "Sources" => list(String.t()())
      }
      
  """
  @type firewall_stateless_rule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provisioned_bandwidth() :: %{
        "ProvisionTime" => non_neg_integer(),
        "Provisioned" => String.t(),
        "RequestTime" => non_neg_integer(),
        "Requested" => String.t(),
        "Status" => String.t()
      }
      
  """
  @type provisioned_bandwidth() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_connect_result() :: %{
        "TransitGatewayConnect" => transit_gateway_connect()
      }
      
  """
  @type delete_transit_gateway_connect_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ipam_pool_cidrs_result() :: %{
        "IpamPoolCidrs" => list(ipam_pool_cidr()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_ipam_pool_cidrs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reject_transit_gateway_peering_attachment_result() :: %{
        "TransitGatewayPeeringAttachment" => transit_gateway_peering_attachment()
      }
      
  """
  @type reject_transit_gateway_peering_attachment_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      classic_link_dns_support() :: %{
        "ClassicLinkDnsSupported" => boolean(),
        "VpcId" => String.t()
      }
      
  """
  @type classic_link_dns_support() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_snapshot_from_recycle_bin_request() :: %{
        optional("DryRun") => boolean(),
        required("SnapshotId") => String.t()
      }
      
  """
  @type restore_snapshot_from_recycle_bin_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpc_endpoint_result() :: %{
        "ClientToken" => String.t(),
        "VpcEndpoint" => vpc_endpoint()
      }
      
  """
  @type create_vpc_endpoint_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_scheduled_instance_availability_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("MaxSlotDurationInHours") => integer(),
        optional("MinSlotDurationInHours") => integer(),
        optional("NextToken") => String.t(),
        required("FirstSlotStartTimeRange") => slot_date_time_range_request(),
        required("Recurrence") => scheduled_instance_recurrence_request()
      }
      
  """
  @type describe_scheduled_instance_availability_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      detach_vpn_gateway_request() :: %{
        optional("DryRun") => boolean(),
        required("VpcId") => String.t(),
        required("VpnGatewayId") => String.t()
      }
      
  """
  @type detach_vpn_gateway_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_insights_paths_result() :: %{
        "NetworkInsightsPaths" => list(network_insights_path()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_network_insights_paths_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_vpn_connection_request() :: %{
        optional("DryRun") => boolean(),
        optional("Options") => vpn_connection_options_specification(),
        optional("TagSpecifications") => list(tag_specification()()),
        optional("TransitGatewayId") => String.t(),
        optional("VpnGatewayId") => String.t(),
        required("CustomerGatewayId") => String.t(),
        required("Type") => String.t()
      }
      
  """
  @type create_vpn_connection_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_metadata_defaults_response() :: %{
        "HttpEndpoint" => list(any()),
        "HttpPutResponseHopLimit" => integer(),
        "HttpTokens" => list(any()),
        "InstanceMetadataTags" => list(any())
      }
      
  """
  @type instance_metadata_defaults_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_multicast_domain_result() :: %{
        "TransitGatewayMulticastDomain" => transit_gateway_multicast_domain()
      }
      
  """
  @type delete_transit_gateway_multicast_domain_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_serial_console_access_result() :: %{
        "SerialConsoleAccessEnabled" => boolean()
      }
      
  """
  @type disable_serial_console_access_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_fast_snapshot_restore_success_item() :: %{
        "AvailabilityZone" => String.t(),
        "DisabledTime" => non_neg_integer(),
        "DisablingTime" => non_neg_integer(),
        "EnabledTime" => non_neg_integer(),
        "EnablingTime" => non_neg_integer(),
        "OptimizingTime" => non_neg_integer(),
        "OwnerAlias" => String.t(),
        "OwnerId" => String.t(),
        "SnapshotId" => String.t(),
        "State" => list(any()),
        "StateTransitionReason" => String.t()
      }
      
  """
  @type disable_fast_snapshot_restore_success_item() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_sse_specification_request() :: %{
        "CustomerManagedKeyEnabled" => boolean(),
        "KmsKeyArn" => String.t()
      }
      
  """
  @type verified_access_sse_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      replace_network_acl_association_result() :: %{
        "NewAssociationId" => String.t()
      }
      
  """
  @type replace_network_acl_association_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_instance_export_task_request() :: %{
        optional("Description") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("ExportToS3Task") => export_to_s3_task_specification(),
        required("InstanceId") => String.t(),
        required("TargetEnvironment") => list(any())
      }
      
  """
  @type create_instance_export_task_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      release_address_request() :: %{
        optional("AllocationId") => String.t(),
        optional("DryRun") => boolean(),
        optional("NetworkBorderGroup") => String.t(),
        optional("PublicIp") => String.t()
      }
      
  """
  @type release_address_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv6_cidr_association() :: %{
        "AssociatedResource" => String.t(),
        "Ipv6Cidr" => String.t()
      }
      
  """
  @type ipv6_cidr_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      bundle_instance_result() :: %{
        "BundleTask" => bundle_task()
      }
      
  """
  @type bundle_instance_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_fpga_image_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type delete_fpga_image_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cloud_watch_log_options() :: %{
        "LogEnabled" => boolean(),
        "LogGroupArn" => String.t(),
        "LogOutputFormat" => String.t()
      }
      
  """
  @type cloud_watch_log_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      local_gateway_route_table_vpc_association() :: %{
        "LocalGatewayId" => String.t(),
        "LocalGatewayRouteTableArn" => String.t(),
        "LocalGatewayRouteTableId" => String.t(),
        "LocalGatewayRouteTableVpcAssociationId" => String.t(),
        "OwnerId" => String.t(),
        "State" => String.t(),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type local_gateway_route_table_vpc_association() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deprovision_byoip_cidr_request() :: %{
        optional("DryRun") => boolean(),
        required("Cidr") => String.t()
      }
      
  """
  @type deprovision_byoip_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      scheduled_instance_recurrence_request() :: %{
        "Frequency" => String.t(),
        "Interval" => integer(),
        "OccurrenceDays" => list(integer()()),
        "OccurrenceRelativeToEnd" => boolean(),
        "OccurrenceUnit" => String.t()
      }
      
  """
  @type scheduled_instance_recurrence_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      transit_gateway_route_attachment() :: %{
        "ResourceId" => String.t(),
        "ResourceType" => list(any()),
        "TransitGatewayAttachmentId" => String.t()
      }
      
  """
  @type transit_gateway_route_attachment() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      security_group_rule() :: %{
        "CidrIpv4" => String.t(),
        "CidrIpv6" => String.t(),
        "Description" => String.t(),
        "FromPort" => integer(),
        "GroupId" => String.t(),
        "GroupOwnerId" => String.t(),
        "IpProtocol" => String.t(),
        "IsEgress" => boolean(),
        "PrefixListId" => String.t(),
        "ReferencedGroupInfo" => referenced_security_group(),
        "SecurityGroupRuleId" => String.t(),
        "Tags" => list(tag()()),
        "ToPort" => integer()
      }
      
  """
  @type security_group_rule() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fleets_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("FleetIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_fleets_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_verified_access_groups_result() :: %{
        "NextToken" => String.t(),
        "VerifiedAccessGroups" => list(verified_access_group()())
      }
      
  """
  @type describe_verified_access_groups_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_vpc_endpoint_service_permissions_request() :: %{
        optional("AddAllowedPrincipals") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("RemoveAllowedPrincipals") => list(String.t()()),
        required("ServiceId") => String.t()
      }
      
  """
  @type modify_vpc_endpoint_service_permissions_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_managed_prefix_list_request() :: %{
        optional("DryRun") => boolean(),
        required("PrefixListId") => String.t()
      }
      
  """
  @type delete_managed_prefix_list_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_fleet_error() :: %{
        "ErrorCode" => String.t(),
        "ErrorMessage" => String.t(),
        "LaunchTemplateAndOverrides" => launch_template_and_overrides_response(),
        "Lifecycle" => list(any())
      }
      
  """
  @type create_fleet_error() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_client_vpn_endpoint_request() :: %{
        optional("DryRun") => boolean(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type delete_client_vpn_endpoint_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_local_gateway_route_request() :: %{
        optional("DestinationCidrBlock") => String.t(),
        optional("DestinationPrefixListId") => String.t(),
        optional("DryRun") => boolean(),
        optional("LocalGatewayVirtualInterfaceGroupId") => String.t(),
        optional("NetworkInterfaceId") => String.t(),
        required("LocalGatewayRouteTableId") => String.t()
      }
      
  """
  @type create_local_gateway_route_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      price_schedule_specification() :: %{
        "CurrencyCode" => list(any()),
        "Price" => float(),
        "Term" => float()
      }
      
  """
  @type price_schedule_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_instance_event_windows_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("InstanceEventWindowIds") => list(String.t()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_instance_event_windows_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reservation_value() :: %{
        "HourlyPrice" => String.t(),
        "RemainingTotalValue" => String.t(),
        "RemainingUpfrontValue" => String.t()
      }
      
  """
  @type reservation_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enclave_options() :: %{
        "Enabled" => boolean()
      }
      
  """
  @type enclave_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_network_interface_permission_request() :: %{
        optional("AwsAccountId") => String.t(),
        optional("AwsService") => String.t(),
        optional("DryRun") => boolean(),
        required("NetworkInterfaceId") => String.t(),
        required("Permission") => list(any())
      }
      
  """
  @type create_network_interface_permission_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_ebs_encryption_by_default_result() :: %{
        "EbsEncryptionByDefault" => boolean(),
        "SseType" => list(any())
      }
      
  """
  @type get_ebs_encryption_by_default_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_serial_console_access_status_result() :: %{
        "SerialConsoleAccessEnabled" => boolean()
      }
      
  """
  @type get_serial_console_access_status_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      load_permission_modifications() :: %{
        "Add" => list(load_permission_request()()),
        "Remove" => list(load_permission_request()())
      }
      
  """
  @type load_permission_modifications() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_connect_options() :: %{
        "Enabled" => boolean(),
        "LambdaFunctionArn" => String.t()
      }
      
  """
  @type client_connect_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      rule_option() :: %{
        "Keyword" => String.t(),
        "Settings" => list(String.t()())
      }
      
  """
  @type rule_option() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      baseline_ebs_bandwidth_mbps_request() :: %{
        "Max" => integer(),
        "Min" => integer()
      }
      
  """
  @type baseline_ebs_bandwidth_mbps_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_client_vpn_endpoints_request() :: %{
        optional("ClientVpnEndpointIds") => list(String.t()()),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_client_vpn_endpoints_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      monitor_instances_request() :: %{
        optional("DryRun") => boolean(),
        required("InstanceIds") => list(String.t()())
      }
      
  """
  @type monitor_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disable_ebs_encryption_by_default_result() :: %{
        "EbsEncryptionByDefault" => boolean()
      }
      
  """
  @type disable_ebs_encryption_by_default_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_snapshot_tier_request() :: %{
        optional("DryRun") => boolean(),
        optional("PermanentRestore") => boolean(),
        optional("TemporaryRestoreDays") => integer(),
        required("SnapshotId") => String.t()
      }
      
  """
  @type restore_snapshot_tier_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      connection_log_options() :: %{
        "CloudwatchLogGroup" => String.t(),
        "CloudwatchLogStream" => String.t(),
        "Enabled" => boolean()
      }
      
  """
  @type connection_log_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_transit_gateway_route_table_announcement_request() :: %{
        optional("DryRun") => boolean(),
        required("TransitGatewayRouteTableAnnouncementId") => String.t()
      }
      
  """
  @type delete_transit_gateway_route_table_announcement_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_status_details() :: %{
        "ImpairedSince" => non_neg_integer(),
        "Name" => list(any()),
        "Status" => list(any())
      }
      
  """
  @type instance_status_details() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      detach_verified_access_trust_provider_result() :: %{
        "VerifiedAccessInstance" => verified_access_instance(),
        "VerifiedAccessTrustProvider" => verified_access_trust_provider()
      }
      
  """
  @type detach_verified_access_trust_provider_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      restore_address_to_classic_result() :: %{
        "PublicIp" => String.t(),
        "Status" => list(any())
      }
      
  """
  @type restore_address_to_classic_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      spot_instance_request() :: %{
        "ActualBlockHourlyPrice" => String.t(),
        "AvailabilityZoneGroup" => String.t(),
        "BlockDurationMinutes" => integer(),
        "CreateTime" => non_neg_integer(),
        "Fault" => spot_instance_state_fault(),
        "InstanceId" => String.t(),
        "InstanceInterruptionBehavior" => list(any()),
        "LaunchGroup" => String.t(),
        "LaunchSpecification" => launch_specification(),
        "LaunchedAvailabilityZone" => String.t(),
        "ProductDescription" => list(any()),
        "SpotInstanceRequestId" => String.t(),
        "SpotPrice" => String.t(),
        "State" => list(any()),
        "Status" => spot_instance_status(),
        "Tags" => list(tag()()),
        "Type" => list(any()),
        "ValidFrom" => non_neg_integer(),
        "ValidUntil" => non_neg_integer()
      }
      
  """
  @type spot_instance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_subnet_cidr_block_request() :: %{
        optional("Ipv6CidrBlock") => String.t(),
        optional("Ipv6IpamPoolId") => String.t(),
        optional("Ipv6NetmaskLength") => integer(),
        required("SubnetId") => String.t()
      }
      
  """
  @type associate_subnet_cidr_block_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_insights_access_scope_result() :: %{
        "NetworkInsightsAccessScopeId" => String.t()
      }
      
  """
  @type delete_network_insights_access_scope_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_scheduled_instances_request() :: %{
        optional("ClientToken") => String.t(),
        optional("DryRun") => boolean(),
        required("PurchaseRequests") => list(purchase_request()())
      }
      
  """
  @type purchase_scheduled_instances_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_ipam_external_resource_verification_tokens_result() :: %{
        "IpamExternalResourceVerificationTokens" => list(ipam_external_resource_verification_token()()),
        "NextToken" => String.t()
      }
      
  """
  @type describe_ipam_external_resource_verification_tokens_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fleet_spot_capacity_rebalance() :: %{
        "ReplacementStrategy" => list(any()),
        "TerminationDelay" => integer()
      }
      
  """
  @type fleet_spot_capacity_rebalance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_spot_instance_requests_result() :: %{
        "CancelledSpotInstanceRequests" => list(cancelled_spot_instance_request()())
      }
      
  """
  @type cancel_spot_instance_requests_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      cancel_reserved_instances_listing_result() :: %{
        "ReservedInstancesListings" => list(reserved_instances_listing()())
      }
      
  """
  @type cancel_reserved_instances_listing_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      deprovision_byoip_cidr_result() :: %{
        "ByoipCidr" => byoip_cidr()
      }
      
  """
  @type deprovision_byoip_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpc_cidr_block_state() :: %{
        "State" => list(any()),
        "StatusMessage" => String.t()
      }
      
  """
  @type vpc_cidr_block_state() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_fpga_image_attribute_request() :: %{
        optional("DryRun") => boolean(),
        required("Attribute") => list(any()),
        required("FpgaImageId") => String.t()
      }
      
  """
  @type describe_fpga_image_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_instance_tpm_ek_pub_result() :: %{
        "InstanceId" => String.t(),
        "KeyFormat" => list(any()),
        "KeyType" => list(any()),
        "KeyValue" => String.t()
      }
      
  """
  @type get_instance_tpm_ek_pub_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      dns_options() :: %{
        "DnsRecordIpType" => list(any()),
        "PrivateDnsOnlyForInboundResolverEndpoint" => boolean()
      }
      
  """
  @type dns_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      service_configuration() :: %{
        "AcceptanceRequired" => boolean(),
        "AvailabilityZones" => list(String.t()()),
        "BaseEndpointDnsNames" => list(String.t()()),
        "GatewayLoadBalancerArns" => list(String.t()()),
        "ManagesVpcEndpoints" => boolean(),
        "NetworkLoadBalancerArns" => list(String.t()()),
        "PayerResponsibility" => list(any()),
        "PrivateDnsName" => String.t(),
        "PrivateDnsNameConfiguration" => private_dns_name_configuration(),
        "ServiceId" => String.t(),
        "ServiceName" => String.t(),
        "ServiceState" => list(any()),
        "ServiceType" => list(service_type_detail()()),
        "SupportedIpAddressTypes" => list(list(any())()),
        "Tags" => list(tag()())
      }
      
  """
  @type service_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_route_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type client_vpn_route_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reserved_instance_reservation_value() :: %{
        "ReservationValue" => reservation_value(),
        "ReservedInstanceId" => String.t()
      }
      
  """
  @type reserved_instance_reservation_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_hosts_request() :: %{
        optional("AutoPlacement") => list(any()),
        optional("HostMaintenance") => list(any()),
        optional("HostRecovery") => list(any()),
        optional("InstanceFamily") => String.t(),
        optional("InstanceType") => String.t(),
        required("HostIds") => list(String.t()())
      }
      
  """
  @type modify_hosts_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_client_vpn_client_certificate_revocation_list_request() :: %{
        optional("DryRun") => boolean(),
        required("ClientVpnEndpointId") => String.t()
      }
      
  """
  @type export_client_vpn_client_certificate_revocation_list_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_endpoints_result() :: %{
        "NextToken" => String.t(),
        "VpcEndpoints" => list(vpc_endpoint()())
      }
      
  """
  @type describe_vpc_endpoints_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_insights_analysis_result() :: %{
        "NetworkInsightsAnalysisId" => String.t()
      }
      
  """
  @type delete_network_insights_analysis_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_instance() :: %{
        "CreationTime" => String.t(),
        "Description" => String.t(),
        "FipsEnabled" => boolean(),
        "LastUpdatedTime" => String.t(),
        "Tags" => list(tag()()),
        "VerifiedAccessInstanceId" => String.t(),
        "VerifiedAccessTrustProviders" => list(verified_access_trust_provider_condensed()())
      }
      
  """
  @type verified_access_instance() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      load_balancers_config() :: %{
        "ClassicLoadBalancersConfig" => classic_load_balancers_config(),
        "TargetGroupsConfig" => target_groups_config()
      }
      
  """
  @type load_balancers_config() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_traffic_mirror_target_request() :: %{
        optional("DryRun") => boolean(),
        required("TrafficMirrorTargetId") => String.t()
      }
      
  """
  @type delete_traffic_mirror_target_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_coip_cidr_result() :: %{
        "CoipCidr" => coip_cidr()
      }
      
  """
  @type create_coip_cidr_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      reset_ebs_default_kms_key_id_result() :: %{
        "KmsKeyId" => String.t()
      }
      
  """
  @type reset_ebs_default_kms_key_id_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_subnet_request() :: %{
        optional("AvailabilityZone") => String.t(),
        optional("AvailabilityZoneId") => String.t(),
        optional("CidrBlock") => String.t(),
        optional("DryRun") => boolean(),
        optional("Ipv4IpamPoolId") => String.t(),
        optional("Ipv4NetmaskLength") => integer(),
        optional("Ipv6CidrBlock") => String.t(),
        optional("Ipv6IpamPoolId") => String.t(),
        optional("Ipv6Native") => boolean(),
        optional("Ipv6NetmaskLength") => integer(),
        optional("OutpostArn") => String.t(),
        optional("TagSpecifications") => list(tag_specification()()),
        required("VpcId") => String.t()
      }
      
  """
  @type create_subnet_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      monitor_instances_result() :: %{
        "InstanceMonitorings" => list(instance_monitoring()())
      }
      
  """
  @type monitor_instances_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      volume_status_details() :: %{
        "Name" => list(any()),
        "Status" => String.t()
      }
      
  """
  @type volume_status_details() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ec2_instance_connect_endpoint() :: %{
        "AvailabilityZone" => String.t(),
        "CreatedAt" => non_neg_integer(),
        "DnsName" => String.t(),
        "FipsDnsName" => String.t(),
        "InstanceConnectEndpointArn" => String.t(),
        "InstanceConnectEndpointId" => String.t(),
        "NetworkInterfaceIds" => list(String.t()()),
        "OwnerId" => String.t(),
        "PreserveClientIp" => boolean(),
        "SecurityGroupIds" => list(String.t()()),
        "State" => list(any()),
        "StateMessage" => String.t(),
        "SubnetId" => String.t(),
        "Tags" => list(tag()()),
        "VpcId" => String.t()
      }
      
  """
  @type ec2_instance_connect_endpoint() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_traffic_mirror_session_request() :: %{
        optional("DryRun") => boolean(),
        required("TrafficMirrorSessionId") => String.t()
      }
      
  """
  @type delete_traffic_mirror_session_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_launch_template_result() :: %{
        "LaunchTemplate" => launch_template(),
        "Warning" => validation_warning()
      }
      
  """
  @type create_launch_template_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disassociate_trunk_interface_result() :: %{
        "ClientToken" => String.t(),
        "Return" => boolean()
      }
      
  """
  @type disassociate_trunk_interface_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      processor_info() :: %{
        "Manufacturer" => String.t(),
        "SupportedArchitectures" => list(list(any())()),
        "SupportedFeatures" => list(list(any())()),
        "SustainedClockSpeedInGhz" => float()
      }
      
  """
  @type processor_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      elastic_gpu_specification_response() :: %{
        "Type" => String.t()
      }
      
  """
  @type elastic_gpu_specification_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_vpc_peering_connections_result() :: %{
        "NextToken" => String.t(),
        "VpcPeeringConnections" => list(vpc_peering_connection()())
      }
      
  """
  @type describe_vpc_peering_connections_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_security_groups_for_vpc_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("VpcId") => String.t()
      }
      
  """
  @type get_security_groups_for_vpc_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_restore_image_task_result() :: %{
        "ImageId" => String.t()
      }
      
  """
  @type create_restore_image_task_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      network_interface_ipv6_address() :: %{
        "Ipv6Address" => String.t(),
        "IsPrimaryIpv6" => boolean()
      }
      
  """
  @type network_interface_ipv6_address() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      create_verified_access_instance_request() :: %{
        optional("ClientToken") => String.t(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("FIPSEnabled") => boolean(),
        optional("TagSpecifications") => list(tag_specification()())
      }
      
  """
  @type create_verified_access_instance_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_transit_gateway_policy_table_associations_request() :: %{
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NextToken") => String.t(),
        required("TransitGatewayPolicyTableId") => String.t()
      }
      
  """
  @type get_transit_gateway_policy_table_associations_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      target_capacity_specification_request() :: %{
        "DefaultTargetCapacityType" => list(any()),
        "OnDemandTargetCapacity" => integer(),
        "SpotTargetCapacity" => integer(),
        "TargetCapacityUnitType" => list(any()),
        "TotalTargetCapacity" => integer()
      }
      
  """
  @type target_capacity_specification_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_associated_ipv6_pool_cidrs_result() :: %{
        "Ipv6CidrAssociations" => list(ipv6_cidr_association()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_associated_ipv6_pool_cidrs_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_network_insights_access_scope_analysis_request() :: %{
        optional("DryRun") => boolean(),
        required("NetworkInsightsAccessScopeAnalysisId") => String.t()
      }
      
  """
  @type delete_network_insights_access_scope_analysis_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associated_target_network() :: %{
        "NetworkId" => String.t(),
        "NetworkType" => list(any())
      }
      
  """
  @type associated_target_network() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_traffic_mirror_session_request() :: %{
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("PacketLength") => integer(),
        optional("RemoveFields") => list(list(any())()),
        optional("SessionNumber") => integer(),
        optional("TrafficMirrorFilterId") => String.t(),
        optional("TrafficMirrorTargetId") => String.t(),
        optional("VirtualNetworkId") => integer(),
        required("TrafficMirrorSessionId") => String.t()
      }
      
  """
  @type modify_traffic_mirror_session_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      delete_placement_group_request() :: %{
        optional("DryRun") => boolean(),
        required("GroupName") => String.t()
      }
      
  """
  @type delete_placement_group_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      instance_network_interface_specification() :: %{
        "AssociateCarrierIpAddress" => boolean(),
        "AssociatePublicIpAddress" => boolean(),
        "ConnectionTrackingSpecification" => connection_tracking_specification_request(),
        "DeleteOnTermination" => boolean(),
        "Description" => String.t(),
        "DeviceIndex" => integer(),
        "EnaSrdSpecification" => ena_srd_specification_request(),
        "Groups" => list(String.t()()),
        "InterfaceType" => String.t(),
        "Ipv4PrefixCount" => integer(),
        "Ipv4Prefixes" => list(ipv4_prefix_specification_request()()),
        "Ipv6AddressCount" => integer(),
        "Ipv6Addresses" => list(instance_ipv6_address()()),
        "Ipv6PrefixCount" => integer(),
        "Ipv6Prefixes" => list(ipv6_prefix_specification_request()()),
        "NetworkCardIndex" => integer(),
        "NetworkInterfaceId" => String.t(),
        "PrimaryIpv6" => boolean(),
        "PrivateIpAddress" => String.t(),
        "PrivateIpAddresses" => list(private_ip_address_specification()()),
        "SecondaryPrivateIpAddressCount" => integer(),
        "SubnetId" => String.t()
      }
      
  """
  @type instance_network_interface_specification() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      attribute_boolean_value() :: %{
        "Value" => boolean()
      }
      
  """
  @type attribute_boolean_value() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      disk_image_detail() :: %{
        "Bytes" => float(),
        "Format" => list(any()),
        "ImportManifestUrl" => String.t()
      }
      
  """
  @type disk_image_detail() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_id_format_result() :: %{
        "Statuses" => list(id_format()())
      }
      
  """
  @type describe_id_format_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      unassign_private_ip_addresses_request() :: %{
        optional("Ipv4Prefixes") => list(String.t()()),
        optional("PrivateIpAddresses") => list(String.t()()),
        required("NetworkInterfaceId") => String.t()
      }
      
  """
  @type unassign_private_ip_addresses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      provision_byoip_cidr_request() :: %{
        optional("CidrAuthorizationContext") => cidr_authorization_context(),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("MultiRegion") => boolean(),
        optional("NetworkBorderGroup") => String.t(),
        optional("PoolTagSpecifications") => list(tag_specification()()),
        optional("PubliclyAdvertisable") => boolean(),
        required("Cidr") => String.t()
      }
      
  """
  @type provision_byoip_cidr_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      fpga_image_state() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type fpga_image_state() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      modify_fpga_image_attribute_request() :: %{
        optional("Attribute") => list(any()),
        optional("Description") => String.t(),
        optional("DryRun") => boolean(),
        optional("LoadPermission") => load_permission_modifications(),
        optional("Name") => String.t(),
        optional("OperationType") => list(any()),
        optional("ProductCodes") => list(String.t()()),
        optional("UserGroups") => list(String.t()()),
        optional("UserIds") => list(String.t()()),
        required("FpgaImageId") => String.t()
      }
      
  """
  @type modify_fpga_image_attribute_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      data_response() :: %{
        "Destination" => String.t(),
        "Id" => String.t(),
        "Metric" => list(any()),
        "MetricPoints" => list(metric_point()()),
        "Period" => list(any()),
        "Source" => String.t(),
        "Statistic" => list(any())
      }
      
  """
  @type data_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      vpn_tunnel_log_options() :: %{
        "CloudWatchLogOptions" => cloud_watch_log_options()
      }
      
  """
  @type vpn_tunnel_log_options() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      route_table_association_state() :: %{
        "State" => list(any()),
        "StatusMessage" => String.t()
      }
      
  """
  @type route_table_association_state() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      ipv4_prefix_specification_response() :: %{
        "Ipv4Prefix" => String.t()
      }
      
  """
  @type ipv4_prefix_specification_response() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      memory_gi_b_per_v_cpu() :: %{
        "Max" => float(),
        "Min" => float()
      }
      
  """
  @type memory_gi_b_per_v_cpu() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      v_cpu_info() :: %{
        "DefaultCores" => integer(),
        "DefaultThreadsPerCore" => integer(),
        "DefaultVCpus" => integer(),
        "ValidCores" => list(integer()()),
        "ValidThreadsPerCore" => list(integer()())
      }
      
  """
  @type v_cpu_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      get_instance_types_from_instance_requirements_result() :: %{
        "InstanceTypes" => list(instance_type_info_from_instance_requirements()()),
        "NextToken" => String.t()
      }
      
  """
  @type get_instance_types_from_instance_requirements_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_vpc_classic_link_dns_support_result() :: %{
        "Return" => boolean()
      }
      
  """
  @type enable_vpc_classic_link_dns_support_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      verified_access_endpoint_status() :: %{
        "Code" => list(any()),
        "Message" => String.t()
      }
      
  """
  @type verified_access_endpoint_status() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      describe_network_insights_analyses_request() :: %{
        optional("AnalysisEndTime") => non_neg_integer(),
        optional("AnalysisStartTime") => non_neg_integer(),
        optional("DryRun") => boolean(),
        optional("Filters") => list(filter()()),
        optional("MaxResults") => integer(),
        optional("NetworkInsightsAnalysisIds") => list(String.t()()),
        optional("NetworkInsightsPathId") => String.t(),
        optional("NextToken") => String.t()
      }
      
  """
  @type describe_network_insights_analyses_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      new_dhcp_configuration() :: %{
        "Key" => String.t(),
        "Values" => list(String.t()())
      }
      
  """
  @type new_dhcp_configuration() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      gpu_info() :: %{
        "Gpus" => list(gpu_device_info()()),
        "TotalGpuMemoryInMiB" => integer()
      }
      
  """
  @type gpu_info() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      export_task_s3_location() :: %{
        "S3Bucket" => String.t(),
        "S3Prefix" => String.t()
      }
      
  """
  @type export_task_s3_location() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      associate_iam_instance_profile_result() :: %{
        "IamInstanceProfileAssociation" => iam_instance_profile_association()
      }
      
  """
  @type associate_iam_instance_profile_result() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase() :: %{
        "CurrencyCode" => list(any()),
        "Duration" => integer(),
        "HostIdSet" => list(String.t()()),
        "HostReservationId" => String.t(),
        "HourlyPrice" => String.t(),
        "InstanceFamily" => String.t(),
        "PaymentOption" => list(any()),
        "UpfrontPrice" => String.t()
      }
      
  """
  @type purchase() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      enable_reachability_analyzer_organization_sharing_request() :: %{
        optional("DryRun") => boolean()
      }
      
  """
  @type enable_reachability_analyzer_organization_sharing_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      private_dns_name_options_on_launch() :: %{
        "EnableResourceNameDnsAAAARecord" => boolean(),
        "EnableResourceNameDnsARecord" => boolean(),
        "HostnameType" => list(any())
      }
      
  """
  @type private_dns_name_options_on_launch() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      purchase_reserved_instances_offering_request() :: %{
        optional("DryRun") => boolean(),
        optional("LimitPrice") => reserved_instance_limit_price(),
        optional("PurchaseTime") => non_neg_integer(),
        required("InstanceCount") => integer(),
        required("ReservedInstancesOfferingId") => String.t()
      }
      
  """
  @type purchase_reserved_instances_offering_request() :: %{String.t() => any()}

  @typedoc """

  ## Example:
      
      client_vpn_authentication() :: %{
        "ActiveDirectory" => directory_service_authentication(),
        "FederatedAuthentication" => federated_authentication(),
        "MutualAuthentication" => certificate_authentication(),
        "Type" => list(any())
      }
      
  """
  @type client_vpn_authentication() :: %{String.t() => any()}

  def metadata do
    %{
      api_version: "2016-11-15",
      content_type: "application/x-www-form-urlencoded",
      credential_scope: nil,
      endpoint_prefix: "ec2",
      global?: false,
      hostname: nil,
      protocol: "ec2",
      service_id: "EC2",
      signature_version: "v4",
      signing_name: "ec2",
      target_prefix: "AmazonEC2"
    }
  end

  @doc """
  Accepts an Elastic IP address transfer. For more information, see [Accept a
  transferred Elastic IP
  address](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#using-instance-addressing-eips-transfer-accept)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AcceptAddressTransfer&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:accept_address_transfer_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("Address") => String.t()
    }
  """

  @spec accept_address_transfer(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, accept_address_transfer_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def accept_address_transfer(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AcceptAddressTransfer", input, options)
  end

  @doc """
  Accepts the Convertible Reserved Instance exchange quote described in the
  `GetReservedInstancesExchangeQuote` call.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AcceptReservedInstancesExchangeQuote&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:accept_reserved_instances_exchange_quote_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TargetConfigurations") => list(target_configuration_request()()),
      required("ReservedInstanceIds") => list(String.t()())
    }
  """

  @spec accept_reserved_instances_exchange_quote(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, accept_reserved_instances_exchange_quote_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def accept_reserved_instances_exchange_quote(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AcceptReservedInstancesExchangeQuote", input, options)
  end

  @doc """
  Accepts a request to associate subnets with a transit gateway multicast domain.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AcceptTransitGatewayMulticastDomainAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:accept_transit_gateway_multicast_domain_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("SubnetIds") => list(String.t()()),
      optional("TransitGatewayAttachmentId") => String.t(),
      optional("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec accept_transit_gateway_multicast_domain_associations(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, accept_transit_gateway_multicast_domain_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def accept_transit_gateway_multicast_domain_associations(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "AcceptTransitGatewayMulticastDomainAssociations",
      input,
      options
    )
  end

  @doc """
  Accepts a transit gateway peering attachment request. The peering attachment
  must be in the `pendingAcceptance` state.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AcceptTransitGatewayPeeringAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:accept_transit_gateway_peering_attachment_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec accept_transit_gateway_peering_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, accept_transit_gateway_peering_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def accept_transit_gateway_peering_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AcceptTransitGatewayPeeringAttachment", input, options)
  end

  @doc """
  Accepts a request to attach a VPC to a transit gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AcceptTransitGatewayVpcAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:accept_transit_gateway_vpc_attachment_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec accept_transit_gateway_vpc_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, accept_transit_gateway_vpc_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def accept_transit_gateway_vpc_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AcceptTransitGatewayVpcAttachment", input, options)
  end

  @doc """
  Accepts connection requests to your VPC endpoint service.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AcceptVpcEndpointConnections&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:accept_vpc_endpoint_connections_request`)
    %{
      optional("DryRun") => boolean(),
      required("ServiceId") => String.t(),
      required("VpcEndpointIds") => list(String.t()())
    }
  """

  @spec accept_vpc_endpoint_connections(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, accept_vpc_endpoint_connections_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def accept_vpc_endpoint_connections(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AcceptVpcEndpointConnections", input, options)
  end

  @doc """
  Accept a VPC peering connection request. To accept a request, the VPC peering
  connection must be in the `pending-acceptance` state, and you must be the
  owner of the peer VPC. Use `DescribeVpcPeeringConnections` to view your
  outstanding VPC peering connection requests.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AcceptVpcPeeringConnection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:accept_vpc_peering_connection_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcPeeringConnectionId") => String.t()
    }
  """

  @spec accept_vpc_peering_connection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, accept_vpc_peering_connection_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def accept_vpc_peering_connection(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AcceptVpcPeeringConnection", input, options)
  end

  @doc """
  Advertises an IPv4 or IPv6 address range that is provisioned for use with your
  Amazon Web Services resources through bring your own IP addresses (BYOIP). You
  can perform this operation at most once every 10 seconds, even if you specify
  different address ranges each time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AdvertiseByoipCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:advertise_byoip_cidr_request`)
    %{
      optional("Asn") => String.t(),
      optional("DryRun") => boolean(),
      optional("NetworkBorderGroup") => String.t(),
      required("Cidr") => String.t()
    }
  """

  @spec advertise_byoip_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, advertise_byoip_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def advertise_byoip_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AdvertiseByoipCidr", input, options)
  end

  @doc """
  Allocates an Elastic IP address to your Amazon Web Services account. After you
  allocate the Elastic IP address you can associate it with an instance or
  network interface. After you release an Elastic IP address, it is released to
  the IP address pool and can be allocated to a different Amazon Web Services
  account. You can allocate an Elastic IP address from an address pool owned by
  Amazon Web Services or from an address pool created from a public IPv4 address
  range that you have brought to Amazon Web Services for use with your Amazon
  Web Services resources using bring your own IP addresses (BYOIP). For more
  information, see [Bring Your Own IP Addresses
  (BYOIP)](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html)
  in the *Amazon EC2 User Guide*. If you release an Elastic IP address, you
  might be able to recover it. You cannot recover an Elastic IP address that you
  released after it is allocated to another Amazon Web Services account. To
  attempt to recover an Elastic IP address that you released, specify it in this
  operation.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AllocateAddress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:allocate_address_request`)
    %{
      optional("Address") => String.t(),
      optional("CustomerOwnedIpv4Pool") => String.t(),
      optional("Domain") => list(any()),
      optional("DryRun") => boolean(),
      optional("NetworkBorderGroup") => String.t(),
      optional("PublicIpv4Pool") => String.t(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec allocate_address(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, allocate_address_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def allocate_address(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AllocateAddress", input, options)
  end

  @doc """
  Allocates a Dedicated Host to your account. At a minimum, specify the supported
  instance type or instance family, the Availability Zone in which to allocate
  the host, and the number of hosts to allocate.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AllocateHosts&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:allocate_hosts_request`)
    %{
      optional("AssetIds") => list(String.t()()),
      optional("AutoPlacement") => list(any()),
      optional("ClientToken") => String.t(),
      optional("HostMaintenance") => list(any()),
      optional("HostRecovery") => list(any()),
      optional("InstanceFamily") => String.t(),
      optional("InstanceType") => String.t(),
      optional("OutpostArn") => String.t(),
      optional("Quantity") => integer(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("AvailabilityZone") => String.t()
    }
  """

  @spec allocate_hosts(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, allocate_hosts_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def allocate_hosts(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AllocateHosts", input, options)
  end

  @doc """
  Allocate a CIDR from an IPAM pool. The Region you use should be the IPAM pool
  locale. The locale is the Amazon Web Services Region where this IPAM pool is
  available for allocations. In IPAM, an allocation is a CIDR assignment from an
  IPAM pool to another IPAM pool or to a resource. For more information, see
  [Allocate
  CIDRs](https://docs.aws.amazon.com/vpc/latest/ipam/allocate-cidrs-ipam.html)
  in the *Amazon VPC IPAM User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AllocateIpamPoolCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:allocate_ipam_pool_cidr_request`)
    %{
      optional("AllowedCidrs") => list(String.t()()),
      optional("Cidr") => String.t(),
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DisallowedCidrs") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("NetmaskLength") => integer(),
      optional("PreviewNextCidr") => boolean(),
      required("IpamPoolId") => String.t()
    }
  """

  @spec allocate_ipam_pool_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, allocate_ipam_pool_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def allocate_ipam_pool_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AllocateIpamPoolCidr", input, options)
  end

  @doc """
  Applies a security group to the association between the target network and the
  Client VPN endpoint. This action replaces the existing security groups with
  the specified security groups.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ApplySecurityGroupsToClientVpnTargetNetwork&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:apply_security_groups_to_client_vpn_target_network_request`)
    %{
      optional("DryRun") => boolean(),
      required("ClientVpnEndpointId") => String.t(),
      required("SecurityGroupIds") => list(String.t()()),
      required("VpcId") => String.t()
    }
  """

  @spec apply_security_groups_to_client_vpn_target_network(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, apply_security_groups_to_client_vpn_target_network_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def apply_security_groups_to_client_vpn_target_network(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "ApplySecurityGroupsToClientVpnTargetNetwork",
      input,
      options
    )
  end

  @doc """
  Assigns one or more IPv6 addresses to the specified network interface. You can
  specify one or more specific IPv6 addresses, or you can specify the number of
  IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR
  block range. You can assign as many IPv6 addresses to a network interface as
  you can assign private IPv4 addresses, and the limit varies per instance type.
  You must specify either the IPv6 addresses or the IPv6 address count in the
  request.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssignIpv6Addresses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:assign_ipv6_addresses_request`)
    %{
      optional("Ipv6AddressCount") => integer(),
      optional("Ipv6Addresses") => list(String.t()()),
      optional("Ipv6PrefixCount") => integer(),
      optional("Ipv6Prefixes") => list(String.t()()),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec assign_ipv6_addresses(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, assign_ipv6_addresses_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def assign_ipv6_addresses(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssignIpv6Addresses", input, options)
  end

  @doc """
  Assigns one or more secondary private IP addresses to the specified network
  interface. You can specify one or more specific secondary IP addresses, or you
  can specify the number of secondary IP addresses to be automatically assigned
  within the subnet's CIDR block range. The number of secondary IP addresses
  that you can assign to an instance varies by instance type. For more
  information about Elastic IP addresses, see [Elastic IP
  Addresses](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
  in the *Amazon EC2 User Guide*. When you move a secondary private IP address
  to another network interface, any Elastic IP address that is associated with
  the IP address is also moved.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssignPrivateIpAddresses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:assign_private_ip_addresses_request`)
    %{
      optional("AllowReassignment") => boolean(),
      optional("Ipv4PrefixCount") => integer(),
      optional("Ipv4Prefixes") => list(String.t()()),
      optional("PrivateIpAddresses") => list(String.t()()),
      optional("SecondaryPrivateIpAddressCount") => integer(),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec assign_private_ip_addresses(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, assign_private_ip_addresses_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def assign_private_ip_addresses(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssignPrivateIpAddresses", input, options)
  end

  @doc """
  Assigns private IPv4 addresses to a private NAT gateway. For more information,
  see [Work with NAT
  gateways](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-working-with)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssignPrivateNatGatewayAddress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:assign_private_nat_gateway_address_request`)
    %{
      optional("DryRun") => boolean(),
      optional("PrivateIpAddressCount") => integer(),
      optional("PrivateIpAddresses") => list(String.t()()),
      required("NatGatewayId") => String.t()
    }
  """

  @spec assign_private_nat_gateway_address(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, assign_private_nat_gateway_address_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def assign_private_nat_gateway_address(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssignPrivateNatGatewayAddress", input, options)
  end

  @doc """
  Associates an Elastic IP address, or carrier IP address (for instances that are
  in subnets in Wavelength Zones) with an instance or a network interface.
  Before you can use an Elastic IP address, you must allocate it to your
  account. If the Elastic IP address is already associated with a different
  instance, it is disassociated from that instance and associated with the
  specified instance. If you associate an Elastic IP address with an instance
  that has an existing Elastic IP address, the existing address is disassociated
  from the instance, but remains allocated to your account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateAddress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_address_request`)
    %{
      optional("AllocationId") => String.t(),
      optional("AllowReassociation") => boolean(),
      optional("DryRun") => boolean(),
      optional("InstanceId") => String.t(),
      optional("NetworkInterfaceId") => String.t(),
      optional("PrivateIpAddress") => String.t(),
      optional("PublicIp") => String.t()
    }
  """

  @spec associate_address(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_address_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_address(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateAddress", input, options)
  end

  @doc """
  Associates a target network with a Client VPN endpoint. A target network is a
  subnet in a VPC. You can associate multiple subnets from the same VPC with a
  Client VPN endpoint. You can associate only one subnet in each Availability
  Zone. We recommend that you associate at least two subnets to provide
  Availability Zone redundancy.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateClientVpnTargetNetwork&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_client_vpn_target_network_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("ClientVpnEndpointId") => String.t(),
      required("SubnetId") => String.t()
    }
  """

  @spec associate_client_vpn_target_network(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_client_vpn_target_network_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_client_vpn_target_network(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateClientVpnTargetNetwork", input, options)
  end

  @doc """
  Associates a set of DHCP options (that you've previously created) with the
  specified VPC, or associates no DHCP options with the VPC. After you associate
  the options with the VPC, any existing instances and all new instances that
  you launch in that VPC use the options. You don't need to restart or relaunch
  the instances. They automatically pick up the changes within a few hours,
  depending on how frequently the instance renews its DHCP lease. You can
  explicitly renew the lease using the operating system on the instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateDhcpOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_dhcp_options_request`)
    %{
      optional("DryRun") => boolean(),
      required("DhcpOptionsId") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec associate_dhcp_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def associate_dhcp_options(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateDhcpOptions", input, options)
  end

  @doc """
  Associates an Identity and Access Management (IAM) role with an Certificate
  Manager (ACM) certificate. This enables the certificate to be used by the ACM
  for Nitro Enclaves application inside an enclave. For more information, see
  [Certificate Manager for Nitro
  Enclaves](https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html)
  in the *Amazon Web Services Nitro Enclaves User Guide*. When the IAM role is
  associated with the ACM certificate, the certificate, certificate chain, and
  encrypted private key are placed in an Amazon S3 location that only the
  associated IAM role can access. The private key of the certificate is
  encrypted with an Amazon Web Services managed key that has an attached
  attestation-based key policy.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateEnclaveCertificateIamRole&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_enclave_certificate_iam_role_request`)
    %{
      optional("DryRun") => boolean(),
      required("CertificateArn") => String.t(),
      required("RoleArn") => String.t()
    }
  """

  @spec associate_enclave_certificate_iam_role(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_enclave_certificate_iam_role_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_enclave_certificate_iam_role(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateEnclaveCertificateIamRole", input, options)
  end

  @doc """
  Associates an IAM instance profile with a running or stopped instance. You
  cannot associate more than one IAM instance profile with an instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateIamInstanceProfile&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_iam_instance_profile_request`)
    %{
      required("IamInstanceProfile") => iam_instance_profile_specification(),
      required("InstanceId") => String.t()
    }
  """

  @spec associate_iam_instance_profile(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_iam_instance_profile_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_iam_instance_profile(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateIamInstanceProfile", input, options)
  end

  @doc """
  Associates one or more targets with an event window. Only one type of target
  (instance IDs, Dedicated Host IDs, or tags) can be specified with an event
  window.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateInstanceEventWindow&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_instance_event_window_request`)
    %{
      optional("DryRun") => boolean(),
      required("AssociationTarget") => instance_event_window_association_request(),
      required("InstanceEventWindowId") => String.t()
    }
  """

  @spec associate_instance_event_window(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_instance_event_window_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_instance_event_window(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateInstanceEventWindow", input, options)
  end

  @doc """
  Associates your Autonomous System Number (ASN) with a BYOIP CIDR that you own in
  the same Amazon Web Services Region. For more information, see [Tutorial:
  Bring your ASN to
  IPAM](https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html) in
  the *Amazon VPC IPAM guide*. After the association succeeds, the ASN is
  eligible for advertisement. You can view the association with
  [DescribeByoipCidrs](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeByoipCidrs.html).
  You can advertise the CIDR with
  [AdvertiseByoipCidr](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AdvertiseByoipCidr.html).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateIpamByoasn&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_ipam_byoasn_request`)
    %{
      optional("DryRun") => boolean(),
      required("Asn") => String.t(),
      required("Cidr") => String.t()
    }
  """

  @spec associate_ipam_byoasn(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_ipam_byoasn_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_ipam_byoasn(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateIpamByoasn", input, options)
  end

  @doc """
  Associates an IPAM resource discovery with an Amazon VPC IPAM. A resource
  discovery is an IPAM component that enables IPAM to manage and monitor
  resources that belong to the owning account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateIpamResourceDiscovery&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_ipam_resource_discovery_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("IpamId") => String.t(),
      required("IpamResourceDiscoveryId") => String.t()
    }
  """

  @spec associate_ipam_resource_discovery(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_ipam_resource_discovery_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_ipam_resource_discovery(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateIpamResourceDiscovery", input, options)
  end

  @doc """
  Associates Elastic IP addresses (EIPs) and private IPv4 addresses with a public
  NAT gateway. For more information, see [Work with NAT
  gateways](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-working-with)
  in the *Amazon VPC User Guide*. By default, you can associate up to 2 Elastic
  IP addresses per public NAT gateway. You can increase the limit by requesting
  a quota adjustment. For more information, see [Elastic IP address
  quotas](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-eips)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateNatGatewayAddress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_nat_gateway_address_request`)
    %{
      optional("DryRun") => boolean(),
      optional("PrivateIpAddresses") => list(String.t()()),
      required("AllocationIds") => list(String.t()()),
      required("NatGatewayId") => String.t()
    }
  """

  @spec associate_nat_gateway_address(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_nat_gateway_address_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_nat_gateway_address(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateNatGatewayAddress", input, options)
  end

  @doc """
  Associates a subnet in your VPC or an internet gateway or virtual private
  gateway attached to your VPC with a route table in your VPC. This association
  causes traffic from the subnet or gateway to be routed according to the routes
  in the route table. The action returns an association ID, which you need in
  order to disassociate the route table later. A route table can be associated
  with multiple subnets.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GatewayId") => String.t(),
      optional("SubnetId") => String.t(),
      required("RouteTableId") => String.t()
    }
  """

  @spec associate_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_route_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_route_table(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateRouteTable", input, options)
  end

  @doc """
  Associates a CIDR block with your subnet. You can only associate a single IPv6
  CIDR block with your subnet.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateSubnetCidrBlock&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_subnet_cidr_block_request`)
    %{
      optional("Ipv6CidrBlock") => String.t(),
      optional("Ipv6IpamPoolId") => String.t(),
      optional("Ipv6NetmaskLength") => integer(),
      required("SubnetId") => String.t()
    }
  """

  @spec associate_subnet_cidr_block(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_subnet_cidr_block_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_subnet_cidr_block(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateSubnetCidrBlock", input, options)
  end

  @doc """
  Associates the specified subnets and transit gateway attachments with the
  specified transit gateway multicast domain.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateTransitGatewayMulticastDomain&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_transit_gateway_multicast_domain_request`)
    %{
      optional("DryRun") => boolean(),
      required("SubnetIds") => list(String.t()()),
      required("TransitGatewayAttachmentId") => String.t(),
      required("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec associate_transit_gateway_multicast_domain(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_transit_gateway_multicast_domain_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_transit_gateway_multicast_domain(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateTransitGatewayMulticastDomain", input, options)
  end

  @doc """
  Associates the specified transit gateway attachment with a transit gateway
  policy table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateTransitGatewayPolicyTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_transit_gateway_policy_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t(),
      required("TransitGatewayPolicyTableId") => String.t()
    }
  """

  @spec associate_transit_gateway_policy_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_transit_gateway_policy_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_transit_gateway_policy_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateTransitGatewayPolicyTable", input, options)
  end

  @doc """
  Associates the specified attachment with the specified transit gateway route
  table. You can associate only one route table with an attachment.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateTransitGatewayRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_transit_gateway_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec associate_transit_gateway_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_transit_gateway_route_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_transit_gateway_route_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateTransitGatewayRouteTable", input, options)
  end

  @doc """
  Associates a branch network interface with a trunk network interface.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateTrunkInterface&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_trunk_interface_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("GreKey") => integer(),
      optional("VlanId") => integer(),
      required("BranchInterfaceId") => String.t(),
      required("TrunkInterfaceId") => String.t()
    }
  """

  @spec associate_trunk_interface(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_trunk_interface_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_trunk_interface(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateTrunkInterface", input, options)
  end

  @doc """
  Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR
  block, an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6
  address pool that you provisioned through bring your own IP addresses
  ([BYOIP](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html)).
  You must specify one of the following in the request: an IPv4 CIDR block, an
  IPv6 pool, or an Amazon-provided IPv6 CIDR block.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AssociateVpcCidrBlock&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:associate_vpc_cidr_block_request`)
    %{
      optional("AmazonProvidedIpv6CidrBlock") => boolean(),
      optional("CidrBlock") => String.t(),
      optional("Ipv4IpamPoolId") => String.t(),
      optional("Ipv4NetmaskLength") => integer(),
      optional("Ipv6CidrBlock") => String.t(),
      optional("Ipv6CidrBlockNetworkBorderGroup") => String.t(),
      optional("Ipv6IpamPoolId") => String.t(),
      optional("Ipv6NetmaskLength") => integer(),
      optional("Ipv6Pool") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec associate_vpc_cidr_block(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, associate_vpc_cidr_block_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def associate_vpc_cidr_block(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AssociateVpcCidrBlock", input, options)
  end

  @doc """
  This action is deprecated. Links an EC2-Classic instance to a
  ClassicLink-enabled VPC through one or more of the VPC security groups. You
  cannot link an EC2-Classic instance to more than one VPC at a time. You can
  only link an instance that's in the `running` state. An instance is
  automatically unlinked from a VPC when it's stopped - you can link it to the
  VPC again when you restart it.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AttachClassicLinkVpc&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:attach_classic_link_vpc_request`)
    %{
      optional("DryRun") => boolean(),
      required("Groups") => list(String.t()()),
      required("InstanceId") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec attach_classic_link_vpc(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, attach_classic_link_vpc_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def attach_classic_link_vpc(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AttachClassicLinkVpc", input, options)
  end

  @doc """
  Attaches an internet gateway or a virtual private gateway to a VPC, enabling
  connectivity between the internet and the VPC. For more information, see
  [Internet
  gateways](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AttachInternetGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:attach_internet_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("InternetGatewayId") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec attach_internet_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def attach_internet_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AttachInternetGateway", input, options)
  end

  @doc """
  Attaches a network interface to an instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AttachNetworkInterface&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:attach_network_interface_request`)
    %{
      optional("DryRun") => boolean(),
      optional("EnaSrdSpecification") => ena_srd_specification(),
      optional("NetworkCardIndex") => integer(),
      required("DeviceIndex") => integer(),
      required("InstanceId") => String.t(),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec attach_network_interface(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, attach_network_interface_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def attach_network_interface(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AttachNetworkInterface", input, options)
  end

  @doc """
  Attaches the specified Amazon Web Services Verified Access trust provider to the
  specified Amazon Web Services Verified Access instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AttachVerifiedAccessTrustProvider&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:attach_verified_access_trust_provider_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("VerifiedAccessInstanceId") => String.t(),
      required("VerifiedAccessTrustProviderId") => String.t()
    }
  """

  @spec attach_verified_access_trust_provider(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, attach_verified_access_trust_provider_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def attach_verified_access_trust_provider(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AttachVerifiedAccessTrustProvider", input, options)
  end

  @doc """
  Attaches an EBS volume to a running or stopped instance and exposes it to the
  instance with the specified device name. Encrypted EBS volumes must be
  attached to instances that support Amazon EBS encryption. For more
  information, see [Amazon EBS
  encryption](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html)
  in the *Amazon EBS User Guide*. After you attach an EBS volume, you must make
  it available. For more information, see [Make an EBS volume available for
  use](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-using-volumes.html).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AttachVolume&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:attach_volume_request`)
    %{
      optional("DryRun") => boolean(),
      required("Device") => String.t(),
      required("InstanceId") => String.t(),
      required("VolumeId") => String.t()
    }
  """

  @spec attach_volume(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, volume_attachment(), any()}
          | {:error, {:unexpected_response, any()}}

  def attach_volume(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AttachVolume", input, options)
  end

  @doc """
  Attaches a virtual private gateway to a VPC. You can attach one virtual private
  gateway to one VPC at a time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AttachVpnGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:attach_vpn_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcId") => String.t(),
      required("VpnGatewayId") => String.t()
    }
  """

  @spec attach_vpn_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, attach_vpn_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def attach_vpn_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AttachVpnGateway", input, options)
  end

  @doc """
  Adds an ingress authorization rule to a Client VPN endpoint. Ingress
  authorization rules act as firewall rules that grant access to networks. You
  must configure ingress authorization rules to enable clients to access
  resources in Amazon Web Services or on-premises networks.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AuthorizeClientVpnIngress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:authorize_client_vpn_ingress_request`)
    %{
      optional("AccessGroupId") => String.t(),
      optional("AuthorizeAllGroups") => boolean(),
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      required("ClientVpnEndpointId") => String.t(),
      required("TargetNetworkCidr") => String.t()
    }
  """

  @spec authorize_client_vpn_ingress(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, authorize_client_vpn_ingress_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def authorize_client_vpn_ingress(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AuthorizeClientVpnIngress", input, options)
  end

  @doc """
  Adds the specified outbound (egress) rules to a security group. An outbound rule
  permits instances to send traffic to the specified IPv4 or IPv6 address
  ranges, the IP address ranges specified by a prefix list, or the instances
  that are associated with a source security group. For more information, see
  [Security group
  rules](https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html).
  You must specify exactly one of the following destinations: an IPv4 or IPv6
  address range, a prefix list, or a security group. You must specify a protocol
  for each rule (for example, TCP). If the protocol is TCP or UDP, you must also
  specify a port or port range. If the protocol is ICMP or ICMPv6, you must also
  specify the ICMP type and code.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AuthorizeSecurityGroupEgress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:authorize_security_group_egress_request`)
    %{
      optional("CidrIp") => String.t(),
      optional("DryRun") => boolean(),
      optional("FromPort") => integer(),
      optional("IpPermissions") => list(ip_permission()()),
      optional("IpProtocol") => String.t(),
      optional("SourceSecurityGroupName") => String.t(),
      optional("SourceSecurityGroupOwnerId") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("ToPort") => integer(),
      required("GroupId") => String.t()
    }
  """

  @spec authorize_security_group_egress(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, authorize_security_group_egress_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def authorize_security_group_egress(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AuthorizeSecurityGroupEgress", input, options)
  end

  @doc """
  Adds the specified inbound (ingress) rules to a security group. An inbound rule
  permits instances to receive traffic from the specified IPv4 or IPv6 address
  range, the IP address ranges that are specified by a prefix list, or the
  instances that are associated with a destination security group. For more
  information, see [Security group
  rules](https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html).
  You must specify exactly one of the following sources: an IPv4 or IPv6 address
  range, a prefix list, or a security group. You must specify a protocol for
  each rule (for example, TCP). If the protocol is TCP or UDP, you must also
  specify a port or port range. If the protocol is ICMP or ICMPv6, you must also
  specify the ICMP/ICMPv6 type and code.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20AuthorizeSecurityGroupIngress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:authorize_security_group_ingress_request`)
    %{
      optional("CidrIp") => String.t(),
      optional("DryRun") => boolean(),
      optional("FromPort") => integer(),
      optional("GroupId") => String.t(),
      optional("GroupName") => String.t(),
      optional("IpPermissions") => list(ip_permission()()),
      optional("IpProtocol") => String.t(),
      optional("SourceSecurityGroupName") => String.t(),
      optional("SourceSecurityGroupOwnerId") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("ToPort") => integer()
    }
  """

  @spec authorize_security_group_ingress(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, authorize_security_group_ingress_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def authorize_security_group_ingress(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "AuthorizeSecurityGroupIngress", input, options)
  end

  @doc """
  Bundles an Amazon instance store-backed Windows instance. During bundling, only
  the root device volume (C:\) is bundled. Data on other instance store volumes
  is not preserved.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20BundleInstance&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:bundle_instance_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t(),
      required("Storage") => storage()
    }
  """

  @spec bundle_instance(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, bundle_instance_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def bundle_instance(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "BundleInstance", input, options)
  end

  @doc """
  Cancels a bundling operation for an instance store-backed Windows instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelBundleTask&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_bundle_task_request`)
    %{
      optional("DryRun") => boolean(),
      required("BundleId") => String.t()
    }
  """

  @spec cancel_bundle_task(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, cancel_bundle_task_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_bundle_task(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelBundleTask", input, options)
  end

  @doc """
  Cancels the specified Capacity Reservation, releases the reserved capacity, and
  changes the Capacity Reservation's state to `cancelled`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelCapacityReservation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_capacity_reservation_request`)
    %{
      optional("DryRun") => boolean(),
      required("CapacityReservationId") => String.t()
    }
  """

  @spec cancel_capacity_reservation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, cancel_capacity_reservation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_capacity_reservation(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelCapacityReservation", input, options)
  end

  @doc """
  Cancels one or more Capacity Reservation Fleets. When you cancel a Capacity
  Reservation Fleet, the following happens:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelCapacityReservationFleets&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_capacity_reservation_fleets_request`)
    %{
      optional("DryRun") => boolean(),
      required("CapacityReservationFleetIds") => list(String.t()())
    }
  """

  @spec cancel_capacity_reservation_fleets(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, cancel_capacity_reservation_fleets_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_capacity_reservation_fleets(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelCapacityReservationFleets", input, options)
  end

  @doc """
  Cancels an active conversion task. The task can be the import of an instance or
  volume. The action removes all artifacts of the conversion, including a
  partially uploaded volume or instance. If the conversion is complete or is in
  the process of transferring the final disk image, the command fails and
  returns an exception.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelConversionTask&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_conversion_request`)
    %{
      optional("DryRun") => boolean(),
      optional("ReasonMessage") => String.t(),
      required("ConversionTaskId") => String.t()
    }
  """

  @spec cancel_conversion_task(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_conversion_task(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelConversionTask", input, options)
  end

  @doc """
  Cancels an active export task. The request removes all artifacts of the export,
  including any partially-created Amazon S3 objects. If the export task is
  complete or is in the process of transferring the final disk image, the
  command fails and returns an error.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelExportTask&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_export_task_request`)
    %{
      required("ExportTaskId") => String.t()
    }
  """

  @spec cancel_export_task(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_export_task(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelExportTask", input, options)
  end

  @doc """
  Removes your Amazon Web Services account from the launch permissions for the
  specified AMI. For more information, see [ Cancel having an AMI shared with
  your Amazon Web Services
  account](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cancel-sharing-an-AMI.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelImageLaunchPermission&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_image_launch_permission_request`)
    %{
      optional("DryRun") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec cancel_image_launch_permission(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, cancel_image_launch_permission_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_image_launch_permission(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelImageLaunchPermission", input, options)
  end

  @doc """
  Cancels an in-process import virtual machine or import snapshot task.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelImportTask&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_import_task_request`)
    %{
      optional("CancelReason") => String.t(),
      optional("DryRun") => boolean(),
      optional("ImportTaskId") => String.t()
    }
  """

  @spec cancel_import_task(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, cancel_import_task_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_import_task(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelImportTask", input, options)
  end

  @doc """
  Cancels the specified Reserved Instance listing in the Reserved Instance
  Marketplace.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelReservedInstancesListing&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_reserved_instances_listing_request`)
    %{
      required("ReservedInstancesListingId") => String.t()
    }
  """

  @spec cancel_reserved_instances_listing(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, cancel_reserved_instances_listing_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_reserved_instances_listing(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelReservedInstancesListing", input, options)
  end

  @doc """
  Cancels the specified Spot Fleet requests. After you cancel a Spot Fleet
  request, the Spot Fleet launches no new instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelSpotFleetRequests&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_spot_fleet_requests_request`)
    %{
      optional("DryRun") => boolean(),
      required("SpotFleetRequestIds") => list(String.t()()),
      required("TerminateInstances") => boolean()
    }
  """

  @spec cancel_spot_fleet_requests(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, cancel_spot_fleet_requests_response(), any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_spot_fleet_requests(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelSpotFleetRequests", input, options)
  end

  @doc """
  Cancels one or more Spot Instance requests.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CancelSpotInstanceRequests&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:cancel_spot_instance_requests_request`)
    %{
      optional("DryRun") => boolean(),
      required("SpotInstanceRequestIds") => list(String.t()())
    }
  """

  @spec cancel_spot_instance_requests(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, cancel_spot_instance_requests_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def cancel_spot_instance_requests(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CancelSpotInstanceRequests", input, options)
  end

  @doc """
  Determines whether a product code is associated with an instance. This action
  can only be used by the owner of the product code. It is useful when a product
  code owner must verify whether another user's instance is eligible for
  support.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ConfirmProductInstance&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:confirm_product_instance_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t(),
      required("ProductCode") => String.t()
    }
  """

  @spec confirm_product_instance(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, confirm_product_instance_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def confirm_product_instance(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ConfirmProductInstance", input, options)
  end

  @doc """
  Copies the specified Amazon FPGA Image (AFI) to the current Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CopyFpgaImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:copy_fpga_image_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("Name") => String.t(),
      required("SourceFpgaImageId") => String.t(),
      required("SourceRegion") => String.t()
    }
  """

  @spec copy_fpga_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, copy_fpga_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def copy_fpga_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CopyFpgaImage", input, options)
  end

  @doc """
  Initiates the copy of an AMI. You can copy an AMI from one Region to another, or
  from a Region to an Outpost. You can't copy an AMI from an Outpost to a
  Region, from one Outpost to another, or within the same Outpost. To copy an
  AMI to another partition, see
  [CreateStoreImageTask](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html).
  To copy an AMI from one Region to another, specify the source Region using the
  **SourceRegion** parameter, and specify the destination Region using its
  endpoint. Copies of encrypted backing snapshots for the AMI are encrypted.
  Copies of unencrypted backing snapshots remain unencrypted, unless you set
  `Encrypted` during the copy operation. You cannot create an unencrypted copy
  of an encrypted backing snapshot. To copy an AMI from a Region to an Outpost,
  specify the source Region using the **SourceRegion** parameter, and specify
  the ARN of the destination Outpost using **DestinationOutpostArn**. Backing
  snapshots copied to an Outpost are encrypted by default using the default
  encryption key for the Region, or a different key that you specify in the
  request using **KmsKeyId**. Outposts do not support unencrypted snapshots. For
  more information, [ Amazon EBS local snapshots on
  Outposts](https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#ami)
  in the *Amazon EBS User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CopyImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:copy_image_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("CopyImageTags") => boolean(),
      optional("Description") => String.t(),
      optional("DestinationOutpostArn") => String.t(),
      optional("DryRun") => boolean(),
      optional("Encrypted") => boolean(),
      optional("KmsKeyId") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("Name") => String.t(),
      required("SourceImageId") => String.t(),
      required("SourceRegion") => String.t()
    }
  """

  @spec copy_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, copy_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def copy_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CopyImage", input, options)
  end

  @doc """
  Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You
  can copy a snapshot within the same Region, from one Region to another, or
  from a Region to an Outpost. You can't copy a snapshot from an Outpost to a
  Region, from one Outpost to another, or within the same Outpost. You can use
  the snapshot to create EBS volumes or Amazon Machine Images (AMIs).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CopySnapshot&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:copy_snapshot_request`)
    %{
      optional("Description") => String.t(),
      optional("DestinationOutpostArn") => String.t(),
      optional("DestinationRegion") => String.t(),
      optional("DryRun") => boolean(),
      optional("Encrypted") => boolean(),
      optional("KmsKeyId") => String.t(),
      optional("PresignedUrl") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("SourceRegion") => String.t(),
      required("SourceSnapshotId") => String.t()
    }
  """

  @spec copy_snapshot(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, copy_snapshot_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def copy_snapshot(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CopySnapshot", input, options)
  end

  @doc """
  Creates a new Capacity Reservation with the specified attributes. Capacity
  Reservations enable you to reserve capacity for your Amazon EC2 instances in a
  specific Availability Zone for any duration. This gives you the flexibility to
  selectively add capacity reservations and still get the Regional RI discounts
  for that usage. By creating Capacity Reservations, you ensure that you always
  have access to Amazon EC2 capacity when you need it, for as long as you need
  it. For more information, see [Capacity
  Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html)
  in the *Amazon EC2 User Guide*. Your request to create a Capacity Reservation
  could fail if Amazon EC2 does not have sufficient capacity to fulfill the
  request. If your request fails due to Amazon EC2 capacity constraints, either
  try again at a later time, try in a different Availability Zone, or request a
  smaller capacity reservation. If your application is flexible across instance
  types and sizes, try to create a Capacity Reservation with different instance
  attributes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateCapacityReservation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_capacity_reservation_request`)
    %{
      optional("AvailabilityZone") => String.t(),
      optional("AvailabilityZoneId") => String.t(),
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("EbsOptimized") => boolean(),
      optional("EndDate") => non_neg_integer(),
      optional("EndDateType") => list(any()),
      optional("EphemeralStorage") => boolean(),
      optional("InstanceMatchCriteria") => list(any()),
      optional("OutpostArn") => String.t(),
      optional("PlacementGroupArn") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("Tenancy") => list(any()),
      required("InstanceCount") => integer(),
      required("InstancePlatform") => list(any()),
      required("InstanceType") => String.t()
    }
  """

  @spec create_capacity_reservation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_capacity_reservation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_capacity_reservation(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateCapacityReservation", input, options)
  end

  @doc """
  Creates a Capacity Reservation Fleet. For more information, see [Create a
  Capacity Reservation
  Fleet](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-cr-fleets.html#create-crfleet)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateCapacityReservationFleet&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_capacity_reservation_fleet_request`)
    %{
      optional("AllocationStrategy") => String.t(),
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("EndDate") => non_neg_integer(),
      optional("InstanceMatchCriteria") => list(any()),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("Tenancy") => list(any()),
      required("InstanceTypeSpecifications") => list(reservation_fleet_instance_specification()()),
      required("TotalTargetCapacity") => integer()
    }
  """

  @spec create_capacity_reservation_fleet(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_capacity_reservation_fleet_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_capacity_reservation_fleet(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateCapacityReservationFleet", input, options)
  end

  @doc """
  Creates a carrier gateway. For more information about carrier gateways, see
  [Carrier
  gateways](https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#wavelength-carrier-gateway)
  in the *Amazon Web Services Wavelength Developer Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateCarrierGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_carrier_gateway_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("VpcId") => String.t()
    }
  """

  @spec create_carrier_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_carrier_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_carrier_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateCarrierGateway", input, options)
  end

  @doc """
  Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create
  and configure to enable and manage client VPN sessions. It is the destination
  endpoint at which all client VPN sessions are terminated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateClientVpnEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_client_vpn_endpoint_request`)
    %{
      optional("ClientConnectOptions") => client_connect_options(),
      optional("ClientLoginBannerOptions") => client_login_banner_options(),
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DnsServers") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("SecurityGroupIds") => list(String.t()()),
      optional("SelfServicePortal") => list(any()),
      optional("SessionTimeoutHours") => integer(),
      optional("SplitTunnel") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("TransportProtocol") => list(any()),
      optional("VpcId") => String.t(),
      optional("VpnPort") => integer(),
      required("AuthenticationOptions") => list(client_vpn_authentication_request()()),
      required("ClientCidrBlock") => String.t(),
      required("ConnectionLogOptions") => connection_log_options(),
      required("ServerCertificateArn") => String.t()
    }
  """

  @spec create_client_vpn_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_client_vpn_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_client_vpn_endpoint(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateClientVpnEndpoint", input, options)
  end

  @doc """
  Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has
  a route table that describes the available destination network routes. Each
  route in the route table specifies the path for traﬃc to speciﬁc resources or
  networks.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateClientVpnRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_client_vpn_route_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      required("ClientVpnEndpointId") => String.t(),
      required("DestinationCidrBlock") => String.t(),
      required("TargetVpcSubnetId") => String.t()
    }
  """

  @spec create_client_vpn_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_client_vpn_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_client_vpn_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateClientVpnRoute", input, options)
  end

  @doc """
  Creates a range of customer-owned IP addresses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateCoipCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_coip_cidr_request`)
    %{
      optional("DryRun") => boolean(),
      required("Cidr") => String.t(),
      required("CoipPoolId") => String.t()
    }
  """

  @spec create_coip_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_coip_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_coip_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateCoipCidr", input, options)
  end

  @doc """
  Creates a pool of customer-owned IP (CoIP) addresses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateCoipPool&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_coip_pool_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("LocalGatewayRouteTableId") => String.t()
    }
  """

  @spec create_coip_pool(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_coip_pool_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_coip_pool(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateCoipPool", input, options)
  end

  @doc """
  Provides information to Amazon Web Services about your customer gateway device.
  The customer gateway device is the appliance at your end of the VPN
  connection. You must provide the IP address of the customer gateway device’s
  external interface. The IP address must be static and can be behind a device
  performing network address translation (NAT). For devices that use Border
  Gateway Protocol (BGP), you can also provide the device's BGP Autonomous
  System Number (ASN). You can use an existing ASN assigned to your network. If
  you don't have an ASN already, you can use a private ASN. For more
  information, see [Customer gateway options for your Site-to-Site VPN
  connection](https://docs.aws.amazon.com/vpn/latest/s2svpn/cgw-options.html) in
  the *Amazon Web Services Site-to-Site VPN User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateCustomerGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_customer_gateway_request`)
    %{
      optional("BgpAsn") => integer(),
      optional("BgpAsnExtended") => float(),
      optional("CertificateArn") => String.t(),
      optional("DeviceName") => String.t(),
      optional("DryRun") => boolean(),
      optional("IpAddress") => String.t(),
      optional("PublicIp") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("Type") => list(any())
    }
  """

  @spec create_customer_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_customer_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_customer_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateCustomerGateway", input, options)
  end

  @doc """
  Creates a default subnet with a size `/20` IPv4 CIDR block in the specified
  Availability Zone in your default VPC. You can have only one default subnet
  per Availability Zone. For more information, see [Create a default
  subnet](https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateDefaultSubnet&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_default_subnet_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Ipv6Native") => boolean(),
      required("AvailabilityZone") => String.t()
    }
  """

  @spec create_default_subnet(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_default_subnet_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_default_subnet(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateDefaultSubnet", input, options)
  end

  @doc """
  Creates a default VPC with a size `/16` IPv4 CIDR block and a default subnet in
  each Availability Zone. For more information about the components of a default
  VPC, see [Default
  VPCs](https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html) in
  the *Amazon VPC User Guide*. You cannot specify the components of the default
  VPC yourself.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateDefaultVpc&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_default_vpc_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec create_default_vpc(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_default_vpc_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_default_vpc(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateDefaultVpc", input, options)
  end

  @doc """
  Creates a custom set of DHCP options. After you create a DHCP option set, you
  associate it with a VPC. After you associate a DHCP option set with a VPC, all
  existing and newly launched instances in the VPC use this set of DHCP options.
  The following are the individual DHCP options you can specify. For more
  information, see [DHCP option
  sets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateDhcpOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_dhcp_options_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("DhcpConfigurations") => list(new_dhcp_configuration()())
    }
  """

  @spec create_dhcp_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_dhcp_options_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_dhcp_options(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateDhcpOptions", input, options)
  end

  @doc """
  [IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only
  internet gateway is used to enable outbound communication over IPv6 from
  instances in your VPC to the internet, and prevents hosts outside of your VPC
  from initiating an IPv6 connection with your instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateEgressOnlyInternetGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_egress_only_internet_gateway_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("VpcId") => String.t()
    }
  """

  @spec create_egress_only_internet_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_egress_only_internet_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_egress_only_internet_gateway(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateEgressOnlyInternetGateway", input, options)
  end

  @doc """
  Creates an EC2 Fleet that contains the configuration information for On-Demand
  Instances and Spot Instances. Instances are launched immediately if there is
  available capacity. A single EC2 Fleet can include multiple launch
  specifications that vary by instance type, AMI, Availability Zone, or subnet.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateFleet&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_fleet_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Context") => String.t(),
      optional("DryRun") => boolean(),
      optional("ExcessCapacityTerminationPolicy") => list(any()),
      optional("OnDemandOptions") => on_demand_options_request(),
      optional("ReplaceUnhealthyInstances") => boolean(),
      optional("SpotOptions") => spot_options_request(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("TerminateInstancesWithExpiration") => boolean(),
      optional("Type") => list(any()),
      optional("ValidFrom") => non_neg_integer(),
      optional("ValidUntil") => non_neg_integer(),
      required("LaunchTemplateConfigs") => list(fleet_launch_template_config_request()()),
      required("TargetCapacitySpecification") => target_capacity_specification_request()
    }
  """

  @spec create_fleet(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_fleet_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_fleet(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateFleet", input, options)
  end

  @doc """
  Creates one or more flow logs to capture information about IP traffic for a
  specific network interface, subnet, or VPC. Flow log data for a monitored
  network interface is recorded as flow log records, which are log events
  consisting of fields that describe the traffic flow. For more information, see
  [Flow log
  records](https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records)
  in the *Amazon VPC User Guide*. When publishing to CloudWatch Logs, flow log
  records are published to a log group, and each network interface has a unique
  log stream in the log group. When publishing to Amazon S3, flow log records
  for all of the monitored network interfaces are published to a single log file
  object that is stored in the specified bucket.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateFlowLogs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_flow_logs_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DeliverCrossAccountRole") => String.t(),
      optional("DeliverLogsPermissionArn") => String.t(),
      optional("DestinationOptions") => destination_options_request(),
      optional("DryRun") => boolean(),
      optional("LogDestination") => String.t(),
      optional("LogDestinationType") => list(any()),
      optional("LogFormat") => String.t(),
      optional("LogGroupName") => String.t(),
      optional("MaxAggregationInterval") => integer(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("TrafficType") => list(any()),
      required("ResourceIds") => list(String.t()()),
      required("ResourceType") => list(any())
    }
  """

  @spec create_flow_logs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_flow_logs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_flow_logs(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateFlowLogs", input, options)
  end

  @doc """
  Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).
  The create operation is asynchronous. To verify that the AFI is ready for use,
  check the output logs.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateFpgaImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_fpga_image_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("LogsStorageLocation") => storage_location(),
      optional("Name") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("InputStorageLocation") => storage_location()
    }
  """

  @spec create_fpga_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_fpga_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_fpga_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateFpgaImage", input, options)
  end

  @doc """
  Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is
  either running or stopped. If you customized your instance with instance store
  volumes or Amazon EBS volumes in addition to the root device volume, the new
  AMI contains block device mapping information for those volumes. When you
  launch an instance from this new AMI, the instance automatically launches with
  those additional volumes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_image_request`)
    %{
      optional("BlockDeviceMappings") => list(block_device_mapping()()),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("NoReboot") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("InstanceId") => String.t(),
      required("Name") => String.t()
    }
  """

  @spec create_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateImage", input, options)
  end

  @doc """
  Creates an EC2 Instance Connect Endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateInstanceConnectEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_instance_connect_endpoint_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("PreserveClientIp") => boolean(),
      optional("SecurityGroupIds") => list(String.t()()),
      optional("TagSpecifications") => list(tag_specification()()),
      required("SubnetId") => String.t()
    }
  """

  @spec create_instance_connect_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_instance_connect_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_instance_connect_endpoint(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateInstanceConnectEndpoint", input, options)
  end

  @doc """
  Creates an event window in which scheduled events for the associated Amazon EC2
  instances can run. You can define either a set of time ranges or a cron
  expression when creating the event window, but not both. All event window
  times are in UTC.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateInstanceEventWindow&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_instance_event_window_request`)
    %{
      optional("CronExpression") => String.t(),
      optional("DryRun") => boolean(),
      optional("Name") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("TimeRanges") => list(instance_event_window_time_range_request()())
    }
  """

  @spec create_instance_event_window(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_instance_event_window_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_instance_event_window(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateInstanceEventWindow", input, options)
  end

  @doc """
  Exports a running or stopped instance to an Amazon S3 bucket.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateInstanceExportTask&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_instance_export_task_request`)
    %{
      optional("Description") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("ExportToS3Task") => export_to_s3_task_specification(),
      required("InstanceId") => String.t(),
      required("TargetEnvironment") => list(any())
    }
  """

  @spec create_instance_export_task(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_instance_export_task_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_instance_export_task(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateInstanceExportTask", input, options)
  end

  @doc """
  Creates an internet gateway for use with a VPC. After creating the internet
  gateway, you attach it to a VPC using `AttachInternetGateway`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateInternetGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_internet_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_internet_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_internet_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_internet_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateInternetGateway", input, options)
  end

  @doc """
  Create an IPAM. Amazon VPC IP Address Manager (IPAM) is a VPC feature that you
  can use to automate your IP address management workflows including assigning,
  tracking, troubleshooting, and auditing IP addresses across Amazon Web
  Services Regions and accounts throughout your Amazon Web Services
  Organization.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateIpam&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_ipam_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("OperatingRegions") => list(add_ipam_operating_region()()),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("Tier") => list(any())
    }
  """

  @spec create_ipam(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_ipam_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_ipam(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateIpam", input, options)
  end

  @doc """
  Create a verification token. A verification token is an Amazon Web
  Services-generated random value that you can use to prove ownership of an
  external resource. For example, you can use a verification token to validate
  that you control a public IP address range when you bring an IP address range
  to Amazon Web Services (BYOIP).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateIpamExternalResourceVerificationToken&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_ipam_external_resource_verification_token_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("IpamId") => String.t()
    }
  """

  @spec create_ipam_external_resource_verification_token(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, create_ipam_external_resource_verification_token_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_ipam_external_resource_verification_token(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "CreateIpamExternalResourceVerificationToken",
      input,
      options
    )
  end

  @doc """
  Create an IP address pool for Amazon VPC IP Address Manager (IPAM). In IPAM, a
  pool is a collection of contiguous IP addresses CIDRs. Pools enable you to
  organize your IP addresses according to your routing and security needs. For
  example, if you have separate routing and security needs for development and
  production applications, you can create a pool for each.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateIpamPool&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_ipam_pool_request`)
    %{
      optional("AllocationDefaultNetmaskLength") => integer(),
      optional("AllocationMaxNetmaskLength") => integer(),
      optional("AllocationMinNetmaskLength") => integer(),
      optional("AllocationResourceTags") => list(request_ipam_resource_tag()()),
      optional("AutoImport") => boolean(),
      optional("AwsService") => list(any()),
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("Locale") => String.t(),
      optional("PublicIpSource") => list(any()),
      optional("PubliclyAdvertisable") => boolean(),
      optional("SourceIpamPoolId") => String.t(),
      optional("SourceResource") => ipam_pool_source_resource_request(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("AddressFamily") => list(any()),
      required("IpamScopeId") => String.t()
    }
  """

  @spec create_ipam_pool(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_ipam_pool_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_ipam_pool(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateIpamPool", input, options)
  end

  @doc """
  Creates an IPAM resource discovery. A resource discovery is an IPAM component
  that enables IPAM to manage and monitor resources that belong to the owning
  account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateIpamResourceDiscovery&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_ipam_resource_discovery_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("OperatingRegions") => list(add_ipam_operating_region()()),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_ipam_resource_discovery(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_ipam_resource_discovery_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_ipam_resource_discovery(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateIpamResourceDiscovery", input, options)
  end

  @doc """
  Create an IPAM scope. In IPAM, a scope is the highest-level container within
  IPAM. An IPAM contains two default scopes. Each scope represents the IP space
  for a single network. The private scope is intended for all private IP address
  space. The public scope is intended for all public IP address space. Scopes
  enable you to reuse IP addresses across multiple unconnected networks without
  causing IP address overlap or conflict.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateIpamScope&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_ipam_scope_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("IpamId") => String.t()
    }
  """

  @spec create_ipam_scope(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_ipam_scope_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_ipam_scope(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateIpamScope", input, options)
  end

  @doc """
  Creates an ED25519 or 2048-bit RSA key pair with the specified name and in the
  specified PEM or PPK format. Amazon EC2 stores the public key and displays the
  private key for you to save to a file. The private key is returned as an
  unencrypted PEM encoded PKCS#1 private key or an unencrypted PPK formatted
  private key for use with PuTTY. If a key with the specified name already
  exists, Amazon EC2 returns an error. The key pair returned to you is available
  only in the Amazon Web Services Region in which you create it. If you prefer,
  you can create your own key pair using a third-party tool and upload it to any
  Region using `ImportKeyPair`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateKeyPair&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_key_pair_request`)
    %{
      optional("DryRun") => boolean(),
      optional("KeyFormat") => list(any()),
      optional("KeyType") => list(any()),
      optional("TagSpecifications") => list(tag_specification()()),
      required("KeyName") => String.t()
    }
  """

  @spec create_key_pair(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, key_pair(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_key_pair(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateKeyPair", input, options)
  end

  @doc """
  Creates a launch template.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateLaunchTemplate&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_launch_template_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("VersionDescription") => String.t(),
      required("LaunchTemplateData") => request_launch_template_data(),
      required("LaunchTemplateName") => String.t()
    }
  """

  @spec create_launch_template(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_launch_template_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_launch_template(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateLaunchTemplate", input, options)
  end

  @doc """
  Creates a new version of a launch template. You must specify an existing launch
  template, either by name or ID. You can determine whether the new version
  inherits parameters from a source version, and add or overwrite parameters as
  needed. Launch template versions are numbered in the order in which they are
  created. You can't specify, change, or replace the numbering of launch
  template versions.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateLaunchTemplateVersion&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_launch_template_version_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("LaunchTemplateId") => String.t(),
      optional("LaunchTemplateName") => String.t(),
      optional("ResolveAlias") => boolean(),
      optional("SourceVersion") => String.t(),
      optional("VersionDescription") => String.t(),
      required("LaunchTemplateData") => request_launch_template_data()
    }
  """

  @spec create_launch_template_version(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_launch_template_version_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_launch_template_version(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateLaunchTemplateVersion", input, options)
  end

  @doc """
  Creates a static route for the specified local gateway route table. You must
  specify one of the following targets:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateLocalGatewayRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_local_gateway_route_request`)
    %{
      optional("DestinationCidrBlock") => String.t(),
      optional("DestinationPrefixListId") => String.t(),
      optional("DryRun") => boolean(),
      optional("LocalGatewayVirtualInterfaceGroupId") => String.t(),
      optional("NetworkInterfaceId") => String.t(),
      required("LocalGatewayRouteTableId") => String.t()
    }
  """

  @spec create_local_gateway_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_local_gateway_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_local_gateway_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateLocalGatewayRoute", input, options)
  end

  @doc """
  Creates a local gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateLocalGatewayRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_local_gateway_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Mode") => list(any()),
      optional("TagSpecifications") => list(tag_specification()()),
      required("LocalGatewayId") => String.t()
    }
  """

  @spec create_local_gateway_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_local_gateway_route_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_local_gateway_route_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateLocalGatewayRouteTable", input, options)
  end

  @doc """
  Creates a local gateway route table virtual interface group association.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_local_gateway_route_table_virtual_interface_group_association_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("LocalGatewayRouteTableId") => String.t(),
      required("LocalGatewayVirtualInterfaceGroupId") => String.t()
    }
  """

  @spec create_local_gateway_route_table_virtual_interface_group_association(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, create_local_gateway_route_table_virtual_interface_group_association_result(),
           any()}
          | {:error, {:unexpected_response, any()}}

  def create_local_gateway_route_table_virtual_interface_group_association(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
      input,
      options
    )
  end

  @doc """
  Associates the specified VPC with the specified local gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateLocalGatewayRouteTableVpcAssociation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_local_gateway_route_table_vpc_association_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("LocalGatewayRouteTableId") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec create_local_gateway_route_table_vpc_association(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, create_local_gateway_route_table_vpc_association_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_local_gateway_route_table_vpc_association(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "CreateLocalGatewayRouteTableVpcAssociation",
      input,
      options
    )
  end

  @doc """
  Creates a managed prefix list. You can specify one or more entries for the
  prefix list. Each entry consists of a CIDR block and an optional description.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateManagedPrefixList&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_managed_prefix_list_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("Entries") => list(add_prefix_list_entry()()),
      optional("TagSpecifications") => list(tag_specification()()),
      required("AddressFamily") => String.t(),
      required("MaxEntries") => integer(),
      required("PrefixListName") => String.t()
    }
  """

  @spec create_managed_prefix_list(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_managed_prefix_list_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_managed_prefix_list(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateManagedPrefixList", input, options)
  end

  @doc """
  Creates a NAT gateway in the specified subnet. This action creates a network
  interface in the specified subnet with a private IP address from the IP
  address range of the subnet. You can create either a public NAT gateway or a
  private NAT gateway. With a public NAT gateway, internet-bound traffic from a
  private subnet can be routed to the NAT gateway, so that instances in a
  private subnet can connect to the internet.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateNatGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_nat_gateway_request`)
    %{
      optional("AllocationId") => String.t(),
      optional("ClientToken") => String.t(),
      optional("ConnectivityType") => list(any()),
      optional("DryRun") => boolean(),
      optional("PrivateIpAddress") => String.t(),
      optional("SecondaryAllocationIds") => list(String.t()()),
      optional("SecondaryPrivateIpAddressCount") => integer(),
      optional("SecondaryPrivateIpAddresses") => list(String.t()()),
      optional("TagSpecifications") => list(tag_specification()()),
      required("SubnetId") => String.t()
    }
  """

  @spec create_nat_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_nat_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_nat_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateNatGateway", input, options)
  end

  @doc """
  Creates a network ACL in a VPC. Network ACLs provide an optional layer of
  security (in addition to security groups) for the instances in your VPC.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateNetworkAcl&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_network_acl_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("VpcId") => String.t()
    }
  """

  @spec create_network_acl(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_network_acl_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_network_acl(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateNetworkAcl", input, options)
  end

  @doc """
  Creates an entry (a rule) in a network ACL with the specified rule number. Each
  network ACL has a set of numbered ingress rules and a separate set of numbered
  egress rules. When determining whether a packet should be allowed in or out of
  a subnet associated with the ACL, we process the entries in the ACL according
  to the rule numbers, in ascending order. Each network ACL has a set of ingress
  rules and a separate set of egress rules. We recommend that you leave room
  between the rule numbers (for example, 100, 110, 120, ...), and not number
  them one right after the other (for example, 101, 102, 103, ...). This makes
  it easier to add a rule between existing ones without having to renumber the
  rules.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateNetworkAclEntry&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_network_acl_entry_request`)
    %{
      optional("CidrBlock") => String.t(),
      optional("DryRun") => boolean(),
      optional("IcmpTypeCode") => icmp_type_code(),
      optional("Ipv6CidrBlock") => String.t(),
      optional("PortRange") => port_range(),
      required("Egress") => boolean(),
      required("NetworkAclId") => String.t(),
      required("Protocol") => String.t(),
      required("RuleAction") => list(any()),
      required("RuleNumber") => integer()
    }
  """

  @spec create_network_acl_entry(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def create_network_acl_entry(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateNetworkAclEntry", input, options)
  end

  @doc """
  Creates a Network Access Scope.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateNetworkInsightsAccessScope&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_network_insights_access_scope_request`)
    %{
      optional("DryRun") => boolean(),
      optional("ExcludePaths") => list(access_scope_path_request()()),
      optional("MatchPaths") => list(access_scope_path_request()()),
      optional("TagSpecifications") => list(tag_specification()()),
      required("ClientToken") => String.t()
    }
  """

  @spec create_network_insights_access_scope(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_network_insights_access_scope_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_network_insights_access_scope(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateNetworkInsightsAccessScope", input, options)
  end

  @doc """
  Creates a path to analyze for reachability.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateNetworkInsightsPath&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_network_insights_path_request`)
    %{
      optional("Destination") => String.t(),
      optional("DestinationIp") => String.t(),
      optional("DestinationPort") => integer(),
      optional("DryRun") => boolean(),
      optional("FilterAtDestination") => path_request_filter(),
      optional("FilterAtSource") => path_request_filter(),
      optional("SourceIp") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("ClientToken") => String.t(),
      required("Protocol") => list(any()),
      required("Source") => String.t()
    }
  """

  @spec create_network_insights_path(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_network_insights_path_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_network_insights_path(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateNetworkInsightsPath", input, options)
  end

  @doc """
  Creates a network interface in the specified subnet. The number of IP addresses
  you can assign to a network interface varies by instance type.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateNetworkInterface&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_network_interface_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("ConnectionTrackingSpecification") => connection_tracking_specification_request(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("EnablePrimaryIpv6") => boolean(),
      optional("Groups") => list(String.t()()),
      optional("InterfaceType") => list(any()),
      optional("Ipv4PrefixCount") => integer(),
      optional("Ipv4Prefixes") => list(ipv4_prefix_specification_request()()),
      optional("Ipv6AddressCount") => integer(),
      optional("Ipv6Addresses") => list(instance_ipv6_address()()),
      optional("Ipv6PrefixCount") => integer(),
      optional("Ipv6Prefixes") => list(ipv6_prefix_specification_request()()),
      optional("PrivateIpAddress") => String.t(),
      optional("PrivateIpAddresses") => list(private_ip_address_specification()()),
      optional("SecondaryPrivateIpAddressCount") => integer(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("SubnetId") => String.t()
    }
  """

  @spec create_network_interface(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_network_interface_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_network_interface(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateNetworkInterface", input, options)
  end

  @doc """
  Grants an Amazon Web Services-authorized account permission to attach the
  specified network interface to an instance in their account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateNetworkInterfacePermission&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_network_interface_permission_request`)
    %{
      optional("AwsAccountId") => String.t(),
      optional("AwsService") => String.t(),
      optional("DryRun") => boolean(),
      required("NetworkInterfaceId") => String.t(),
      required("Permission") => list(any())
    }
  """

  @spec create_network_interface_permission(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_network_interface_permission_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_network_interface_permission(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateNetworkInterfacePermission", input, options)
  end

  @doc """
  Creates a placement group in which to launch instances. The strategy of the
  placement group determines how the instances are organized within the group. A
  `cluster` placement group is a logical grouping of instances within a single
  Availability Zone that benefit from low network latency, high network
  throughput. A `spread` placement group places instances on distinct hardware.
  A `partition` placement group places groups of instances in different
  partitions, where instances in one partition do not share the same hardware
  with instances in another partition.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreatePlacementGroup&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_placement_group_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GroupName") => String.t(),
      optional("PartitionCount") => integer(),
      optional("SpreadLevel") => list(any()),
      optional("Strategy") => list(any()),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_placement_group(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_placement_group_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_placement_group(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreatePlacementGroup", input, options)
  end

  @doc """
  Creates a public IPv4 address pool. A public IPv4 pool is an EC2 IP address pool
  required for the public IPv4 CIDRs that you own and bring to Amazon Web
  Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services,
  however, use IPAM pools only. To monitor the status of pool creation, use
  [DescribePublicIpv4Pools](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribePublicIpv4Pools.html).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreatePublicIpv4Pool&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_public_ipv4_pool_request`)
    %{
      optional("DryRun") => boolean(),
      optional("NetworkBorderGroup") => String.t(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_public_ipv4_pool(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_public_ipv4_pool_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_public_ipv4_pool(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreatePublicIpv4Pool", input, options)
  end

  @doc """
  Replaces the EBS-backed root volume for a `running` instance with a new volume
  that is restored to the original root volume's launch state, that is restored
  to a specific snapshot taken from the original root volume, or that is
  restored from an AMI that has the same key characteristics as that of the
  instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateReplaceRootVolumeTask&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_replace_root_volume_task_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DeleteReplacedRootVolume") => boolean(),
      optional("DryRun") => boolean(),
      optional("ImageId") => String.t(),
      optional("SnapshotId") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("InstanceId") => String.t()
    }
  """

  @spec create_replace_root_volume_task(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_replace_root_volume_task_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_replace_root_volume_task(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateReplaceRootVolumeTask", input, options)
  end

  @doc """
  Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the
  Reserved Instance Marketplace. You can submit one Standard Reserved Instance
  listing at a time. To get a list of your Standard Reserved Instances, you can
  use the `DescribeReservedInstances` operation. Only Standard Reserved
  Instances can be sold in the Reserved Instance Marketplace. Convertible
  Reserved Instances cannot be sold.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateReservedInstancesListing&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_reserved_instances_listing_request`)
    %{
      required("ClientToken") => String.t(),
      required("InstanceCount") => integer(),
      required("PriceSchedules") => list(price_schedule_specification()()),
      required("ReservedInstancesId") => String.t()
    }
  """

  @spec create_reserved_instances_listing(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_reserved_instances_listing_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_reserved_instances_listing(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateReservedInstancesListing", input, options)
  end

  @doc """
  Starts a task that restores an AMI from an Amazon S3 object that was previously
  created by using
  [CreateStoreImageTask](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html).
  To use this API, you must have the required permissions. For more information,
  see [Permissions for storing and restoring AMIs using Amazon
  S3](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateRestoreImageTask&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_restore_image_task_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Name") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("Bucket") => String.t(),
      required("ObjectKey") => String.t()
    }
  """

  @spec create_restore_image_task(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_restore_image_task_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_restore_image_task(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateRestoreImageTask", input, options)
  end

  @doc """
  Creates a route in a route table within a VPC. You must specify either a
  destination CIDR block or a prefix list ID. You must also specify exactly one
  of the resources from the parameter list.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_route_request`)
    %{
      optional("CarrierGatewayId") => String.t(),
      optional("CoreNetworkArn") => String.t(),
      optional("DestinationCidrBlock") => String.t(),
      optional("DestinationIpv6CidrBlock") => String.t(),
      optional("DestinationPrefixListId") => String.t(),
      optional("DryRun") => boolean(),
      optional("EgressOnlyInternetGatewayId") => String.t(),
      optional("GatewayId") => String.t(),
      optional("InstanceId") => String.t(),
      optional("LocalGatewayId") => String.t(),
      optional("NatGatewayId") => String.t(),
      optional("NetworkInterfaceId") => String.t(),
      optional("TransitGatewayId") => String.t(),
      optional("VpcEndpointId") => String.t(),
      optional("VpcPeeringConnectionId") => String.t(),
      required("RouteTableId") => String.t()
    }
  """

  @spec create_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateRoute", input, options)
  end

  @doc """
  Creates a route table for the specified VPC. After you create a route table, you
  can add routes and associate the table with a subnet.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_route_table_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("VpcId") => String.t()
    }
  """

  @spec create_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_route_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_route_table(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateRouteTable", input, options)
  end

  @doc """
  Creates a security group. A security group acts as a virtual firewall for your
  instance to control inbound and outbound traffic. For more information, see
  [Amazon EC2 security
  groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html)
  in the *Amazon Elastic Compute Cloud User Guide* and [Security groups for your
  VPC](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html)
  in the *Amazon Virtual Private Cloud User Guide*. When you create a security
  group, you specify a friendly name of your choice. You can't have two security
  groups for the same VPC with the same name.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateSecurityGroup&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_security_group_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("VpcId") => String.t(),
      required("Description") => String.t(),
      required("GroupName") => String.t()
    }
  """

  @spec create_security_group(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_security_group_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_security_group(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateSecurityGroup", input, options)
  end

  @doc """
  Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use
  snapshots for backups, to make copies of EBS volumes, and to save data before
  shutting down an instance. You can create snapshots of volumes in a Region and
  volumes on an Outpost. If you create a snapshot of a volume in a Region, the
  snapshot must be stored in the same Region as the volume. If you create a
  snapshot of a volume on an Outpost, the snapshot can be stored on the same
  Outpost as the volume, or in the Region for that Outpost.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateSnapshot&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_snapshot_request`)
    %{
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("OutpostArn") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("VolumeId") => String.t()
    }
  """

  @spec create_snapshot(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, snapshot(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_snapshot(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateSnapshot", input, options)
  end

  @doc """
  Creates crash-consistent snapshots of multiple EBS volumes and stores the data
  in S3. Volumes are chosen by specifying an instance. Any attached volumes will
  produce one snapshot each that is crash-consistent across the instance. You
  can include all of the volumes currently attached to the instance, or you can
  exclude the root volume or specific data (non-root) volumes from the
  multi-volume snapshot set.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateSnapshots&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_snapshots_request`)
    %{
      optional("CopyTagsFromSource") => list(any()),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("OutpostArn") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("InstanceSpecification") => instance_specification()
    }
  """

  @spec create_snapshots(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_snapshots_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_snapshots(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateSnapshots", input, options)
  end

  @doc """
  Creates a data feed for Spot Instances, enabling you to view Spot Instance usage
  logs. You can create one data feed per Amazon Web Services account. For more
  information, see [Spot Instance data
  feed](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateSpotDatafeedSubscription&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_spot_datafeed_subscription_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Prefix") => String.t(),
      required("Bucket") => String.t()
    }
  """

  @spec create_spot_datafeed_subscription(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_spot_datafeed_subscription_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_spot_datafeed_subscription(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateSpotDatafeedSubscription", input, options)
  end

  @doc """
  Stores an AMI as a single object in an Amazon S3 bucket.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateStoreImageTask&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_store_image_task_request`)
    %{
      optional("DryRun") => boolean(),
      optional("S3ObjectTags") => list(s3_object_tag()()),
      required("Bucket") => String.t(),
      required("ImageId") => String.t()
    }
  """

  @spec create_store_image_task(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_store_image_task_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_store_image_task(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateStoreImageTask", input, options)
  end

  @doc """
  Creates a subnet in the specified VPC. For an IPv4 only subnet, specify an IPv4
  CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only
  subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an
  IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and
  an IPv6 CIDR block. A subnet CIDR block must not overlap the CIDR block of an
  existing subnet in the VPC. After you create a subnet, you can't change its
  CIDR block.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateSubnet&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_subnet_request`)
    %{
      optional("AvailabilityZone") => String.t(),
      optional("AvailabilityZoneId") => String.t(),
      optional("CidrBlock") => String.t(),
      optional("DryRun") => boolean(),
      optional("Ipv4IpamPoolId") => String.t(),
      optional("Ipv4NetmaskLength") => integer(),
      optional("Ipv6CidrBlock") => String.t(),
      optional("Ipv6IpamPoolId") => String.t(),
      optional("Ipv6Native") => boolean(),
      optional("Ipv6NetmaskLength") => integer(),
      optional("OutpostArn") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("VpcId") => String.t()
    }
  """

  @spec create_subnet(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_subnet_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_subnet(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateSubnet", input, options)
  end

  @doc """
  Creates a subnet CIDR reservation. For more information, see [Subnet CIDR
  reservations](https://docs.aws.amazon.com/vpc/latest/userguide/subnet-cidr-reservation.html)
  in the *Amazon VPC User Guide* and [Assign prefixes to network
  interfaces](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateSubnetCidrReservation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_subnet_cidr_reservation_request`)
    %{
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("Cidr") => String.t(),
      required("ReservationType") => list(any()),
      required("SubnetId") => String.t()
    }
  """

  @spec create_subnet_cidr_reservation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_subnet_cidr_reservation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_subnet_cidr_reservation(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateSubnetCidrReservation", input, options)
  end

  @doc """
  Adds or overwrites only the specified tags for the specified Amazon EC2 resource
  or resources. When you specify an existing tag key, the value is overwritten
  with the new value. Each resource can have a maximum of 50 tags. Each tag
  consists of a key and optional value. Tag keys must be unique per resource.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTags&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_tags_request`)
    %{
      optional("DryRun") => boolean(),
      required("Resources") => list(String.t()()),
      required("Tags") => list(tag()())
    }
  """

  @spec create_tags(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def create_tags(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTags", input, options)
  end

  @doc """
  Creates a Traffic Mirror filter. A Traffic Mirror filter is a set of rules that
  defines the traffic to mirror.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTrafficMirrorFilter&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_traffic_mirror_filter_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_traffic_mirror_filter(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_traffic_mirror_filter_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_traffic_mirror_filter(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTrafficMirrorFilter", input, options)
  end

  @doc """
  Creates a Traffic Mirror filter rule. A Traffic Mirror rule defines the Traffic
  Mirror source traffic to mirror.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTrafficMirrorFilterRule&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_traffic_mirror_filter_rule_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DestinationPortRange") => traffic_mirror_port_range_request(),
      optional("DryRun") => boolean(),
      optional("Protocol") => integer(),
      optional("SourcePortRange") => traffic_mirror_port_range_request(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("DestinationCidrBlock") => String.t(),
      required("RuleAction") => list(any()),
      required("RuleNumber") => integer(),
      required("SourceCidrBlock") => String.t(),
      required("TrafficDirection") => list(any()),
      required("TrafficMirrorFilterId") => String.t()
    }
  """

  @spec create_traffic_mirror_filter_rule(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_traffic_mirror_filter_rule_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_traffic_mirror_filter_rule(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTrafficMirrorFilterRule", input, options)
  end

  @doc """
  Creates a Traffic Mirror session. A Traffic Mirror session actively copies
  packets from a Traffic Mirror source to a Traffic Mirror target. Create a
  filter, and then assign it to the session to define a subset of the traffic to
  mirror, for example all TCP traffic.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTrafficMirrorSession&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_traffic_mirror_session_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("PacketLength") => integer(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("VirtualNetworkId") => integer(),
      required("NetworkInterfaceId") => String.t(),
      required("SessionNumber") => integer(),
      required("TrafficMirrorFilterId") => String.t(),
      required("TrafficMirrorTargetId") => String.t()
    }
  """

  @spec create_traffic_mirror_session(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_traffic_mirror_session_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_traffic_mirror_session(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTrafficMirrorSession", input, options)
  end

  @doc """
  Creates a target for your Traffic Mirror session. A Traffic Mirror target is the
  destination for mirrored traffic. The Traffic Mirror source and the Traffic
  Mirror target (monitoring appliances) can be in the same VPC, or in different
  VPCs connected via VPC peering or a transit gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTrafficMirrorTarget&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_traffic_mirror_target_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("GatewayLoadBalancerEndpointId") => String.t(),
      optional("NetworkInterfaceId") => String.t(),
      optional("NetworkLoadBalancerArn") => String.t(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_traffic_mirror_target(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_traffic_mirror_target_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_traffic_mirror_target(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTrafficMirrorTarget", input, options)
  end

  @doc """
  Creates a transit gateway. You can use a transit gateway to interconnect your
  virtual private clouds (VPC) and on-premises networks. After the transit
  gateway enters the `available` state, you can attach your VPCs and VPN
  connections to the transit gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_request`)
    %{
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("Options") => transit_gateway_request_options(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_transit_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGateway", input, options)
  end

  @doc """
  Creates a Connect attachment from a specified transit gateway attachment. A
  Connect attachment is a GRE-based tunnel attachment that you can use to
  establish a connection between a transit gateway and an appliance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayConnect&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_connect_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("Options") => create_transit_gateway_connect_request_options(),
      required("TransportTransitGatewayAttachmentId") => String.t()
    }
  """

  @spec create_transit_gateway_connect(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_connect_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_connect(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayConnect", input, options)
  end

  @doc """
  Creates a Connect peer for a specified transit gateway Connect attachment
  between a transit gateway and an appliance. The peer address and transit
  gateway address must be the same IP address family (IPv4 or IPv6).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayConnectPeer&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_connect_peer_request`)
    %{
      optional("BgpOptions") => transit_gateway_connect_request_bgp_options(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("TransitGatewayAddress") => String.t(),
      required("InsideCidrBlocks") => list(String.t()()),
      required("PeerAddress") => String.t(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec create_transit_gateway_connect_peer(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_connect_peer_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_connect_peer(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayConnectPeer", input, options)
  end

  @doc """
  Creates a multicast domain using the specified transit gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayMulticastDomain&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_multicast_domain_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Options") => create_transit_gateway_multicast_domain_request_options(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("TransitGatewayId") => String.t()
    }
  """

  @spec create_transit_gateway_multicast_domain(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_multicast_domain_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_multicast_domain(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayMulticastDomain", input, options)
  end

  @doc """
  Requests a transit gateway peering attachment between the specified transit
  gateway (requester) and a peer transit gateway (accepter). The peer transit
  gateway can be in your account or a different Amazon Web Services account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayPeeringAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_peering_attachment_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Options") => create_transit_gateway_peering_attachment_request_options(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("PeerAccountId") => String.t(),
      required("PeerRegion") => String.t(),
      required("PeerTransitGatewayId") => String.t(),
      required("TransitGatewayId") => String.t()
    }
  """

  @spec create_transit_gateway_peering_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_peering_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_peering_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayPeeringAttachment", input, options)
  end

  @doc """
  Creates a transit gateway policy table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayPolicyTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_policy_table_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("TransitGatewayId") => String.t()
    }
  """

  @spec create_transit_gateway_policy_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_policy_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_policy_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayPolicyTable", input, options)
  end

  @doc """
  Creates a reference (route) to a prefix list in a specified transit gateway
  route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayPrefixListReference&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_prefix_list_reference_request`)
    %{
      optional("Blackhole") => boolean(),
      optional("DryRun") => boolean(),
      optional("TransitGatewayAttachmentId") => String.t(),
      required("PrefixListId") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec create_transit_gateway_prefix_list_reference(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_prefix_list_reference_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_prefix_list_reference(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayPrefixListReference", input, options)
  end

  @doc """
  Creates a static route for the specified transit gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_route_request`)
    %{
      optional("Blackhole") => boolean(),
      optional("DryRun") => boolean(),
      optional("TransitGatewayAttachmentId") => String.t(),
      required("DestinationCidrBlock") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec create_transit_gateway_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayRoute", input, options)
  end

  @doc """
  Creates a route table for the specified transit gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("TransitGatewayId") => String.t()
    }
  """

  @spec create_transit_gateway_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_route_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_route_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayRouteTable", input, options)
  end

  @doc """
  Advertises a new transit gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayRouteTableAnnouncement&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_route_table_announcement_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("PeeringAttachmentId") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec create_transit_gateway_route_table_announcement(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, create_transit_gateway_route_table_announcement_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_route_table_announcement(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "CreateTransitGatewayRouteTableAnnouncement",
      input,
      options
    )
  end

  @doc """
  Attaches the specified VPC to the specified transit gateway. If you attach a VPC
  with a CIDR range that overlaps the CIDR range of a VPC that is already
  attached, the new VPC CIDR range is not propagated to the default propagation
  route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateTransitGatewayVpcAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_transit_gateway_vpc_attachment_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Options") => create_transit_gateway_vpc_attachment_request_options(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("SubnetIds") => list(String.t()()),
      required("TransitGatewayId") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec create_transit_gateway_vpc_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_transit_gateway_vpc_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_transit_gateway_vpc_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateTransitGatewayVpcAttachment", input, options)
  end

  @doc """
  An Amazon Web Services Verified Access endpoint is where you define your
  application along with an optional endpoint-level access policy.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVerifiedAccessEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_verified_access_endpoint_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("LoadBalancerOptions") => create_verified_access_endpoint_load_balancer_options(),
      optional("NetworkInterfaceOptions") => create_verified_access_endpoint_eni_options(),
      optional("PolicyDocument") => String.t(),
      optional("SecurityGroupIds") => list(String.t()()),
      optional("SseSpecification") => verified_access_sse_specification_request(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("ApplicationDomain") => String.t(),
      required("AttachmentType") => list(any()),
      required("DomainCertificateArn") => String.t(),
      required("EndpointDomainPrefix") => String.t(),
      required("EndpointType") => list(any()),
      required("VerifiedAccessGroupId") => String.t()
    }
  """

  @spec create_verified_access_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_verified_access_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_verified_access_endpoint(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVerifiedAccessEndpoint", input, options)
  end

  @doc """
  An Amazon Web Services Verified Access group is a collection of Amazon Web
  Services Verified Access endpoints who's associated applications have similar
  security requirements. Each instance within a Verified Access group shares an
  Verified Access policy. For example, you can group all Verified Access
  instances associated with "sales" applications together and use one common
  Verified Access policy.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVerifiedAccessGroup&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_verified_access_group_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("PolicyDocument") => String.t(),
      optional("SseSpecification") => verified_access_sse_specification_request(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("VerifiedAccessInstanceId") => String.t()
    }
  """

  @spec create_verified_access_group(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_verified_access_group_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_verified_access_group(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVerifiedAccessGroup", input, options)
  end

  @doc """
  An Amazon Web Services Verified Access instance is a regional entity that
  evaluates application requests and grants access only when your security
  requirements are met.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVerifiedAccessInstance&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_verified_access_instance_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("FIPSEnabled") => boolean(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_verified_access_instance(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_verified_access_instance_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_verified_access_instance(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVerifiedAccessInstance", input, options)
  end

  @doc """
  A trust provider is a third-party entity that creates, maintains, and manages
  identity information for users and devices. When an application request is
  made, the identity information sent by the trust provider is evaluated by
  Verified Access before allowing or denying the application request.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVerifiedAccessTrustProvider&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_verified_access_trust_provider_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DeviceOptions") => create_verified_access_trust_provider_device_options(),
      optional("DeviceTrustProviderType") => list(any()),
      optional("DryRun") => boolean(),
      optional("OidcOptions") => create_verified_access_trust_provider_oidc_options(),
      optional("SseSpecification") => verified_access_sse_specification_request(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("UserTrustProviderType") => list(any()),
      required("PolicyReferenceName") => String.t(),
      required("TrustProviderType") => list(any())
    }
  """

  @spec create_verified_access_trust_provider(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_verified_access_trust_provider_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_verified_access_trust_provider(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVerifiedAccessTrustProvider", input, options)
  end

  @doc """
  Creates an EBS volume that can be attached to an instance in the same
  Availability Zone. You can create a new empty volume or restore a volume from
  an EBS snapshot. Any Amazon Web Services Marketplace product codes from the
  snapshot are propagated to the volume.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVolume&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_volume_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("Encrypted") => boolean(),
      optional("Iops") => integer(),
      optional("KmsKeyId") => String.t(),
      optional("MultiAttachEnabled") => boolean(),
      optional("OutpostArn") => String.t(),
      optional("Size") => integer(),
      optional("SnapshotId") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("Throughput") => integer(),
      optional("VolumeType") => list(any()),
      required("AvailabilityZone") => String.t()
    }
  """

  @spec create_volume(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, volume(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_volume(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVolume", input, options)
  end

  @doc """
  Creates a VPC with the specified CIDR blocks. For more information, see [IP
  addressing for your VPCs and
  subnets](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html)
  in the *Amazon VPC User Guide*. You can optionally request an IPv6 CIDR block
  for the VPC. You can request an Amazon-provided IPv6 CIDR block from Amazon's
  pool of IPv6 addresses or an IPv6 CIDR block from an IPv6 address pool that
  you provisioned through bring your own IP addresses
  ([BYOIP](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html)).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVpc&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_vpc_request`)
    %{
      optional("AmazonProvidedIpv6CidrBlock") => boolean(),
      optional("CidrBlock") => String.t(),
      optional("DryRun") => boolean(),
      optional("InstanceTenancy") => list(any()),
      optional("Ipv4IpamPoolId") => String.t(),
      optional("Ipv4NetmaskLength") => integer(),
      optional("Ipv6CidrBlock") => String.t(),
      optional("Ipv6CidrBlockNetworkBorderGroup") => String.t(),
      optional("Ipv6IpamPoolId") => String.t(),
      optional("Ipv6NetmaskLength") => integer(),
      optional("Ipv6Pool") => String.t(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_vpc(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_vpc_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_vpc(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVpc", input, options)
  end

  @doc """
  Creates a VPC endpoint. A VPC endpoint provides a private connection between the
  specified VPC and the specified endpoint service. You can use an endpoint
  service provided by Amazon Web Services, an Amazon Web Services Marketplace
  Partner, or another Amazon Web Services account. For more information, see the
  [Amazon Web Services PrivateLink User
  Guide](https://docs.aws.amazon.com/vpc/latest/privatelink/).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVpcEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_vpc_endpoint_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DnsOptions") => dns_options_specification(),
      optional("DryRun") => boolean(),
      optional("IpAddressType") => list(any()),
      optional("PolicyDocument") => String.t(),
      optional("PrivateDnsEnabled") => boolean(),
      optional("RouteTableIds") => list(String.t()()),
      optional("SecurityGroupIds") => list(String.t()()),
      optional("SubnetConfigurations") => list(subnet_configuration()()),
      optional("SubnetIds") => list(String.t()()),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("VpcEndpointType") => list(any()),
      required("ServiceName") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec create_vpc_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_vpc_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_vpc_endpoint(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVpcEndpoint", input, options)
  end

  @doc """
  Creates a connection notification for a specified VPC endpoint or VPC endpoint
  service. A connection notification notifies you of specific endpoint events.
  You must create an SNS topic to receive notifications. For more information,
  see [Creating an Amazon SNS
  topic](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html) in the
  *Amazon SNS Developer Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVpcEndpointConnectionNotification&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_vpc_endpoint_connection_notification_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("ServiceId") => String.t(),
      optional("VpcEndpointId") => String.t(),
      required("ConnectionEvents") => list(String.t()()),
      required("ConnectionNotificationArn") => String.t()
    }
  """

  @spec create_vpc_endpoint_connection_notification(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_vpc_endpoint_connection_notification_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_vpc_endpoint_connection_notification(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVpcEndpointConnectionNotification", input, options)
  end

  @doc """
  Creates a VPC endpoint service to which service consumers (Amazon Web Services
  accounts, users, and IAM roles) can connect. Before you create an endpoint
  service, you must create one of the following for your service:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVpcEndpointServiceConfiguration&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_vpc_endpoint_service_configuration_request`)
    %{
      optional("AcceptanceRequired") => boolean(),
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("GatewayLoadBalancerArns") => list(String.t()()),
      optional("NetworkLoadBalancerArns") => list(String.t()()),
      optional("PrivateDnsName") => String.t(),
      optional("SupportedIpAddressTypes") => list(String.t()()),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec create_vpc_endpoint_service_configuration(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_vpc_endpoint_service_configuration_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_vpc_endpoint_service_configuration(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVpcEndpointServiceConfiguration", input, options)
  end

  @doc """
  Requests a VPC peering connection between two VPCs: a requester VPC that you own
  and an accepter VPC with which to create the connection. The accepter VPC can
  belong to another Amazon Web Services account and can be in a different Region
  to the requester VPC. The requester VPC and accepter VPC cannot have
  overlapping CIDR blocks. Limitations and rules apply to a VPC peering
  connection. For more information, see the [VPC peering
  limitations](https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations)
  in the *VPC Peering Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVpcPeeringConnection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_vpc_peering_connection_request`)
    %{
      optional("DryRun") => boolean(),
      optional("PeerOwnerId") => String.t(),
      optional("PeerRegion") => String.t(),
      optional("PeerVpcId") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("VpcId") => String.t()
    }
  """

  @spec create_vpc_peering_connection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_vpc_peering_connection_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_vpc_peering_connection(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVpcPeeringConnection", input, options)
  end

  @doc """
  Creates a VPN connection between an existing virtual private gateway or transit
  gateway and a customer gateway. The supported connection type is `ipsec.1`.
  The response includes information that you need to give to your network
  administrator to configure your customer gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVpnConnection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_vpn_connection_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Options") => vpn_connection_options_specification(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("TransitGatewayId") => String.t(),
      optional("VpnGatewayId") => String.t(),
      required("CustomerGatewayId") => String.t(),
      required("Type") => String.t()
    }
  """

  @spec create_vpn_connection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_vpn_connection_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_vpn_connection(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVpnConnection", input, options)
  end

  @doc """
  Creates a static route associated with a VPN connection between an existing
  virtual private gateway and a VPN customer gateway. The static route allows
  traffic to be routed from the virtual private gateway to the VPN customer
  gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVpnConnectionRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_vpn_connection_route_request`)
    %{
      required("DestinationCidrBlock") => String.t(),
      required("VpnConnectionId") => String.t()
    }
  """

  @spec create_vpn_connection_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def create_vpn_connection_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVpnConnectionRoute", input, options)
  end

  @doc """
  Creates a virtual private gateway. A virtual private gateway is the endpoint on
  the VPC side of your VPN connection. You can create a virtual private gateway
  before creating the VPC itself.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20CreateVpnGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:create_vpn_gateway_request`)
    %{
      optional("AmazonSideAsn") => float(),
      optional("AvailabilityZone") => String.t(),
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("Type") => list(any())
    }
  """

  @spec create_vpn_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, create_vpn_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def create_vpn_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "CreateVpnGateway", input, options)
  end

  @doc """
  Deletes a carrier gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteCarrierGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_carrier_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("CarrierGatewayId") => String.t()
    }
  """

  @spec delete_carrier_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_carrier_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_carrier_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteCarrierGateway", input, options)
  end

  @doc """
  Deletes the specified Client VPN endpoint. You must disassociate all target
  networks before you can delete a Client VPN endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteClientVpnEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_client_vpn_endpoint_request`)
    %{
      optional("DryRun") => boolean(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec delete_client_vpn_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_client_vpn_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_client_vpn_endpoint(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteClientVpnEndpoint", input, options)
  end

  @doc """
  Deletes a route from a Client VPN endpoint. You can only delete routes that you
  manually added using the **CreateClientVpnRoute** action. You cannot delete
  routes that were automatically added when associating a subnet. To remove
  routes that have been automatically added, disassociate the target subnet from
  the Client VPN endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteClientVpnRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_client_vpn_route_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TargetVpcSubnetId") => String.t(),
      required("ClientVpnEndpointId") => String.t(),
      required("DestinationCidrBlock") => String.t()
    }
  """

  @spec delete_client_vpn_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_client_vpn_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_client_vpn_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteClientVpnRoute", input, options)
  end

  @doc """
  Deletes a range of customer-owned IP addresses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteCoipCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_coip_cidr_request`)
    %{
      optional("DryRun") => boolean(),
      required("Cidr") => String.t(),
      required("CoipPoolId") => String.t()
    }
  """

  @spec delete_coip_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_coip_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_coip_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteCoipCidr", input, options)
  end

  @doc """
  Deletes a pool of customer-owned IP (CoIP) addresses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteCoipPool&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_coip_pool_request`)
    %{
      optional("DryRun") => boolean(),
      required("CoipPoolId") => String.t()
    }
  """

  @spec delete_coip_pool(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_coip_pool_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_coip_pool(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteCoipPool", input, options)
  end

  @doc """
  Deletes the specified customer gateway. You must delete the VPN connection
  before you can delete the customer gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteCustomerGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_customer_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("CustomerGatewayId") => String.t()
    }
  """

  @spec delete_customer_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_customer_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteCustomerGateway", input, options)
  end

  @doc """
  Deletes the specified set of DHCP options. You must disassociate the set of DHCP
  options before you can delete it. You can disassociate the set of DHCP options
  by associating either a new set of options or the default set of options with
  the VPC.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteDhcpOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_dhcp_options_request`)
    %{
      optional("DryRun") => boolean(),
      required("DhcpOptionsId") => String.t()
    }
  """

  @spec delete_dhcp_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_dhcp_options(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteDhcpOptions", input, options)
  end

  @doc """
  Deletes an egress-only internet gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteEgressOnlyInternetGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_egress_only_internet_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("EgressOnlyInternetGatewayId") => String.t()
    }
  """

  @spec delete_egress_only_internet_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_egress_only_internet_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_egress_only_internet_gateway(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteEgressOnlyInternetGateway", input, options)
  end

  @doc """
  Deletes the specified EC2 Fleets. After you delete an EC2 Fleet, it launches no
  new instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteFleets&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_fleets_request`)
    %{
      optional("DryRun") => boolean(),
      required("FleetIds") => list(String.t()()),
      required("TerminateInstances") => boolean()
    }
  """

  @spec delete_fleets(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_fleets_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_fleets(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteFleets", input, options)
  end

  @doc """
  Deletes one or more flow logs.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteFlowLogs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_flow_logs_request`)
    %{
      optional("DryRun") => boolean(),
      required("FlowLogIds") => list(String.t()())
    }
  """

  @spec delete_flow_logs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_flow_logs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_flow_logs(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteFlowLogs", input, options)
  end

  @doc """
  Deletes the specified Amazon FPGA Image (AFI).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteFpgaImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_fpga_image_request`)
    %{
      optional("DryRun") => boolean(),
      required("FpgaImageId") => String.t()
    }
  """

  @spec delete_fpga_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_fpga_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_fpga_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteFpgaImage", input, options)
  end

  @doc """
  Deletes the specified EC2 Instance Connect Endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteInstanceConnectEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_instance_connect_endpoint_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceConnectEndpointId") => String.t()
    }
  """

  @spec delete_instance_connect_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_instance_connect_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_instance_connect_endpoint(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteInstanceConnectEndpoint", input, options)
  end

  @doc """
  Deletes the specified event window.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteInstanceEventWindow&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_instance_event_window_request`)
    %{
      optional("DryRun") => boolean(),
      optional("ForceDelete") => boolean(),
      required("InstanceEventWindowId") => String.t()
    }
  """

  @spec delete_instance_event_window(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_instance_event_window_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_instance_event_window(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteInstanceEventWindow", input, options)
  end

  @doc """
  Deletes the specified internet gateway. You must detach the internet gateway
  from the VPC before you can delete it.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteInternetGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_internet_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("InternetGatewayId") => String.t()
    }
  """

  @spec delete_internet_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_internet_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteInternetGateway", input, options)
  end

  @doc """
  Delete an IPAM. Deleting an IPAM removes all monitored data associated with the
  IPAM including the historical data for CIDRs.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteIpam&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_ipam_request`)
    %{
      optional("Cascade") => boolean(),
      optional("DryRun") => boolean(),
      required("IpamId") => String.t()
    }
  """

  @spec delete_ipam(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_ipam_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_ipam(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteIpam", input, options)
  end

  @doc """
  Delete a verification token. A verification token is an Amazon Web
  Services-generated random value that you can use to prove ownership of an
  external resource. For example, you can use a verification token to validate
  that you control a public IP address range when you bring an IP address range
  to Amazon Web Services (BYOIP).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteIpamExternalResourceVerificationToken&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_ipam_external_resource_verification_token_request`)
    %{
      optional("DryRun") => boolean(),
      required("IpamExternalResourceVerificationTokenId") => String.t()
    }
  """

  @spec delete_ipam_external_resource_verification_token(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, delete_ipam_external_resource_verification_token_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_ipam_external_resource_verification_token(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DeleteIpamExternalResourceVerificationToken",
      input,
      options
    )
  end

  @doc """
  Delete an IPAM pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteIpamPool&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_ipam_pool_request`)
    %{
      optional("Cascade") => boolean(),
      optional("DryRun") => boolean(),
      required("IpamPoolId") => String.t()
    }
  """

  @spec delete_ipam_pool(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_ipam_pool_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_ipam_pool(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteIpamPool", input, options)
  end

  @doc """
  Deletes an IPAM resource discovery. A resource discovery is an IPAM component
  that enables IPAM to manage and monitor resources that belong to the owning
  account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteIpamResourceDiscovery&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_ipam_resource_discovery_request`)
    %{
      optional("DryRun") => boolean(),
      required("IpamResourceDiscoveryId") => String.t()
    }
  """

  @spec delete_ipam_resource_discovery(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_ipam_resource_discovery_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_ipam_resource_discovery(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteIpamResourceDiscovery", input, options)
  end

  @doc """
  Delete the scope for an IPAM. You cannot delete the default scopes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteIpamScope&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_ipam_scope_request`)
    %{
      optional("DryRun") => boolean(),
      required("IpamScopeId") => String.t()
    }
  """

  @spec delete_ipam_scope(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_ipam_scope_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_ipam_scope(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteIpamScope", input, options)
  end

  @doc """
  Deletes the specified key pair, by removing the public key from Amazon EC2.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteKeyPair&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_key_pair_request`)
    %{
      optional("DryRun") => boolean(),
      optional("KeyName") => String.t(),
      optional("KeyPairId") => String.t()
    }
  """

  @spec delete_key_pair(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_key_pair_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_key_pair(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteKeyPair", input, options)
  end

  @doc """
  Deletes a launch template. Deleting a launch template deletes all of its
  versions.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteLaunchTemplate&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_launch_template_request`)
    %{
      optional("DryRun") => boolean(),
      optional("LaunchTemplateId") => String.t(),
      optional("LaunchTemplateName") => String.t()
    }
  """

  @spec delete_launch_template(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_launch_template_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_launch_template(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteLaunchTemplate", input, options)
  end

  @doc """
  Deletes one or more versions of a launch template. You can't delete the default
  version of a launch template; you must first assign a different version as the
  default. If the default version is the only version for the launch template,
  you must delete the entire launch template using `DeleteLaunchTemplate`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteLaunchTemplateVersions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_launch_template_versions_request`)
    %{
      optional("DryRun") => boolean(),
      optional("LaunchTemplateId") => String.t(),
      optional("LaunchTemplateName") => String.t(),
      required("Versions") => list(String.t()())
    }
  """

  @spec delete_launch_template_versions(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_launch_template_versions_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_launch_template_versions(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteLaunchTemplateVersions", input, options)
  end

  @doc """
  Deletes the specified route from the specified local gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteLocalGatewayRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_local_gateway_route_request`)
    %{
      optional("DestinationCidrBlock") => String.t(),
      optional("DestinationPrefixListId") => String.t(),
      optional("DryRun") => boolean(),
      required("LocalGatewayRouteTableId") => String.t()
    }
  """

  @spec delete_local_gateway_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_local_gateway_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_local_gateway_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteLocalGatewayRoute", input, options)
  end

  @doc """
  Deletes a local gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteLocalGatewayRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_local_gateway_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("LocalGatewayRouteTableId") => String.t()
    }
  """

  @spec delete_local_gateway_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_local_gateway_route_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_local_gateway_route_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteLocalGatewayRouteTable", input, options)
  end

  @doc """
  Deletes a local gateway route table virtual interface group association.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_local_gateway_route_table_virtual_interface_group_association_request`)
    %{
      optional("DryRun") => boolean(),
      required("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId") => String.t()
    }
  """

  @spec delete_local_gateway_route_table_virtual_interface_group_association(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, delete_local_gateway_route_table_virtual_interface_group_association_result(),
           any()}
          | {:error, {:unexpected_response, any()}}

  def delete_local_gateway_route_table_virtual_interface_group_association(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
      input,
      options
    )
  end

  @doc """
  Deletes the specified association between a VPC and local gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteLocalGatewayRouteTableVpcAssociation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_local_gateway_route_table_vpc_association_request`)
    %{
      optional("DryRun") => boolean(),
      required("LocalGatewayRouteTableVpcAssociationId") => String.t()
    }
  """

  @spec delete_local_gateway_route_table_vpc_association(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, delete_local_gateway_route_table_vpc_association_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_local_gateway_route_table_vpc_association(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DeleteLocalGatewayRouteTableVpcAssociation",
      input,
      options
    )
  end

  @doc """
  Deletes the specified managed prefix list. You must first remove all references
  to the prefix list in your resources.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteManagedPrefixList&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_managed_prefix_list_request`)
    %{
      optional("DryRun") => boolean(),
      required("PrefixListId") => String.t()
    }
  """

  @spec delete_managed_prefix_list(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_managed_prefix_list_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_managed_prefix_list(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteManagedPrefixList", input, options)
  end

  @doc """
  Deletes the specified NAT gateway. Deleting a public NAT gateway disassociates
  its Elastic IP address, but does not release the address from your account.
  Deleting a NAT gateway does not delete any NAT gateway routes in your route
  tables.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNatGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_nat_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("NatGatewayId") => String.t()
    }
  """

  @spec delete_nat_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_nat_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_nat_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNatGateway", input, options)
  end

  @doc """
  Deletes the specified network ACL. You can't delete the ACL if it's associated
  with any subnets. You can't delete the default network ACL.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNetworkAcl&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_network_acl_request`)
    %{
      optional("DryRun") => boolean(),
      required("NetworkAclId") => String.t()
    }
  """

  @spec delete_network_acl(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_network_acl(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNetworkAcl", input, options)
  end

  @doc """
  Deletes the specified ingress or egress entry (rule) from the specified network
  ACL.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNetworkAclEntry&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_network_acl_entry_request`)
    %{
      optional("DryRun") => boolean(),
      required("Egress") => boolean(),
      required("NetworkAclId") => String.t(),
      required("RuleNumber") => integer()
    }
  """

  @spec delete_network_acl_entry(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_network_acl_entry(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNetworkAclEntry", input, options)
  end

  @doc """
  Deletes the specified Network Access Scope.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNetworkInsightsAccessScope&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_network_insights_access_scope_request`)
    %{
      optional("DryRun") => boolean(),
      required("NetworkInsightsAccessScopeId") => String.t()
    }
  """

  @spec delete_network_insights_access_scope(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_network_insights_access_scope_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_network_insights_access_scope(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNetworkInsightsAccessScope", input, options)
  end

  @doc """
  Deletes the specified Network Access Scope analysis.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNetworkInsightsAccessScopeAnalysis&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_network_insights_access_scope_analysis_request`)
    %{
      optional("DryRun") => boolean(),
      required("NetworkInsightsAccessScopeAnalysisId") => String.t()
    }
  """

  @spec delete_network_insights_access_scope_analysis(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_network_insights_access_scope_analysis_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_network_insights_access_scope_analysis(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNetworkInsightsAccessScopeAnalysis", input, options)
  end

  @doc """
  Deletes the specified network insights analysis.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNetworkInsightsAnalysis&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_network_insights_analysis_request`)
    %{
      optional("DryRun") => boolean(),
      required("NetworkInsightsAnalysisId") => String.t()
    }
  """

  @spec delete_network_insights_analysis(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_network_insights_analysis_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_network_insights_analysis(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNetworkInsightsAnalysis", input, options)
  end

  @doc """
  Deletes the specified path.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNetworkInsightsPath&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_network_insights_path_request`)
    %{
      optional("DryRun") => boolean(),
      required("NetworkInsightsPathId") => String.t()
    }
  """

  @spec delete_network_insights_path(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_network_insights_path_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_network_insights_path(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNetworkInsightsPath", input, options)
  end

  @doc """
  Deletes the specified network interface. You must detach the network interface
  before you can delete it.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNetworkInterface&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_network_interface_request`)
    %{
      optional("DryRun") => boolean(),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec delete_network_interface(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_network_interface(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNetworkInterface", input, options)
  end

  @doc """
  Deletes a permission for a network interface. By default, you cannot delete the
  permission if the account for which you're removing the permission has
  attached the network interface to an instance. However, you can force delete
  the permission, regardless of any attachment.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteNetworkInterfacePermission&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_network_interface_permission_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Force") => boolean(),
      required("NetworkInterfacePermissionId") => String.t()
    }
  """

  @spec delete_network_interface_permission(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_network_interface_permission_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_network_interface_permission(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteNetworkInterfacePermission", input, options)
  end

  @doc """
  Deletes the specified placement group. You must terminate all instances in the
  placement group before you can delete the placement group. For more
  information, see [Placement
  groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeletePlacementGroup&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_placement_group_request`)
    %{
      optional("DryRun") => boolean(),
      required("GroupName") => String.t()
    }
  """

  @spec delete_placement_group(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_placement_group(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeletePlacementGroup", input, options)
  end

  @doc """
  Delete a public IPv4 pool. A public IPv4 pool is an EC2 IP address pool required
  for the public IPv4 CIDRs that you own and bring to Amazon Web Services to
  manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however,
  use IPAM pools only.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeletePublicIpv4Pool&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_public_ipv4_pool_request`)
    %{
      optional("DryRun") => boolean(),
      optional("NetworkBorderGroup") => String.t(),
      required("PoolId") => String.t()
    }
  """

  @spec delete_public_ipv4_pool(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_public_ipv4_pool_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_public_ipv4_pool(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeletePublicIpv4Pool", input, options)
  end

  @doc """
  Deletes the queued purchases for the specified Reserved Instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteQueuedReservedInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_queued_reserved_instances_request`)
    %{
      optional("DryRun") => boolean(),
      required("ReservedInstancesIds") => list(String.t()())
    }
  """

  @spec delete_queued_reserved_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_queued_reserved_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_queued_reserved_instances(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteQueuedReservedInstances", input, options)
  end

  @doc """
  Deletes the specified route from the specified route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_route_request`)
    %{
      optional("DestinationCidrBlock") => String.t(),
      optional("DestinationIpv6CidrBlock") => String.t(),
      optional("DestinationPrefixListId") => String.t(),
      optional("DryRun") => boolean(),
      required("RouteTableId") => String.t()
    }
  """

  @spec delete_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteRoute", input, options)
  end

  @doc """
  Deletes the specified route table. You must disassociate the route table from
  any subnets before you can delete it. You can't delete the main route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("RouteTableId") => String.t()
    }
  """

  @spec delete_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_route_table(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteRouteTable", input, options)
  end

  @doc """
  Deletes a security group.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteSecurityGroup&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_security_group_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GroupId") => String.t(),
      optional("GroupName") => String.t()
    }
  """

  @spec delete_security_group(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_security_group(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteSecurityGroup", input, options)
  end

  @doc """
  Deletes the specified snapshot. When you make periodic snapshots of a volume,
  the snapshots are incremental, and only the blocks on the device that have
  changed since your last snapshot are saved in the new snapshot. When you
  delete a snapshot, only the data not needed for any other snapshot is removed.
  So regardless of which prior snapshots have been deleted, all active snapshots
  will have access to all the information needed to restore the volume.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteSnapshot&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_snapshot_request`)
    %{
      optional("DryRun") => boolean(),
      required("SnapshotId") => String.t()
    }
  """

  @spec delete_snapshot(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_snapshot(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteSnapshot", input, options)
  end

  @doc """
  Deletes the data feed for Spot Instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteSpotDatafeedSubscription&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_spot_datafeed_subscription_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec delete_spot_datafeed_subscription(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_spot_datafeed_subscription(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteSpotDatafeedSubscription", input, options)
  end

  @doc """
  Deletes the specified subnet. You must terminate all running instances in the
  subnet before you can delete the subnet.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteSubnet&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_subnet_request`)
    %{
      optional("DryRun") => boolean(),
      required("SubnetId") => String.t()
    }
  """

  @spec delete_subnet(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_subnet(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteSubnet", input, options)
  end

  @doc """
  Deletes a subnet CIDR reservation.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteSubnetCidrReservation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_subnet_cidr_reservation_request`)
    %{
      optional("DryRun") => boolean(),
      required("SubnetCidrReservationId") => String.t()
    }
  """

  @spec delete_subnet_cidr_reservation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_subnet_cidr_reservation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_subnet_cidr_reservation(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteSubnetCidrReservation", input, options)
  end

  @doc """
  Deletes the specified set of tags from the specified set of resources.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTags&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_tags_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Tags") => list(tag()()),
      required("Resources") => list(String.t()())
    }
  """

  @spec delete_tags(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_tags(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTags", input, options)
  end

  @doc """
  Deletes the specified Traffic Mirror filter.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTrafficMirrorFilter&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_traffic_mirror_filter_request`)
    %{
      optional("DryRun") => boolean(),
      required("TrafficMirrorFilterId") => String.t()
    }
  """

  @spec delete_traffic_mirror_filter(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_traffic_mirror_filter_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_traffic_mirror_filter(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTrafficMirrorFilter", input, options)
  end

  @doc """
  Deletes the specified Traffic Mirror rule.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTrafficMirrorFilterRule&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_traffic_mirror_filter_rule_request`)
    %{
      optional("DryRun") => boolean(),
      required("TrafficMirrorFilterRuleId") => String.t()
    }
  """

  @spec delete_traffic_mirror_filter_rule(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_traffic_mirror_filter_rule_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_traffic_mirror_filter_rule(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTrafficMirrorFilterRule", input, options)
  end

  @doc """
  Deletes the specified Traffic Mirror session.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTrafficMirrorSession&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_traffic_mirror_session_request`)
    %{
      optional("DryRun") => boolean(),
      required("TrafficMirrorSessionId") => String.t()
    }
  """

  @spec delete_traffic_mirror_session(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_traffic_mirror_session_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_traffic_mirror_session(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTrafficMirrorSession", input, options)
  end

  @doc """
  Deletes the specified Traffic Mirror target.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTrafficMirrorTarget&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_traffic_mirror_target_request`)
    %{
      optional("DryRun") => boolean(),
      required("TrafficMirrorTargetId") => String.t()
    }
  """

  @spec delete_traffic_mirror_target(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_traffic_mirror_target_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_traffic_mirror_target(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTrafficMirrorTarget", input, options)
  end

  @doc """
  Deletes the specified transit gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayId") => String.t()
    }
  """

  @spec delete_transit_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGateway", input, options)
  end

  @doc """
  Deletes the specified Connect attachment. You must first delete any Connect
  peers for the attachment.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayConnect&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_connect_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec delete_transit_gateway_connect(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_connect_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_connect(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayConnect", input, options)
  end

  @doc """
  Deletes the specified Connect peer.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayConnectPeer&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_connect_peer_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayConnectPeerId") => String.t()
    }
  """

  @spec delete_transit_gateway_connect_peer(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_connect_peer_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_connect_peer(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayConnectPeer", input, options)
  end

  @doc """
  Deletes the specified transit gateway multicast domain.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayMulticastDomain&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_multicast_domain_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec delete_transit_gateway_multicast_domain(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_multicast_domain_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_multicast_domain(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayMulticastDomain", input, options)
  end

  @doc """
  Deletes a transit gateway peering attachment.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayPeeringAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_peering_attachment_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec delete_transit_gateway_peering_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_peering_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_peering_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayPeeringAttachment", input, options)
  end

  @doc """
  Deletes the specified transit gateway policy table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayPolicyTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_policy_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayPolicyTableId") => String.t()
    }
  """

  @spec delete_transit_gateway_policy_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_policy_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_policy_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayPolicyTable", input, options)
  end

  @doc """
  Deletes a reference (route) to a prefix list in a specified transit gateway
  route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayPrefixListReference&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_prefix_list_reference_request`)
    %{
      optional("DryRun") => boolean(),
      required("PrefixListId") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec delete_transit_gateway_prefix_list_reference(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_prefix_list_reference_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_prefix_list_reference(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayPrefixListReference", input, options)
  end

  @doc """
  Deletes the specified route from the specified transit gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_route_request`)
    %{
      optional("DryRun") => boolean(),
      required("DestinationCidrBlock") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec delete_transit_gateway_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayRoute", input, options)
  end

  @doc """
  Deletes the specified transit gateway route table. If there are any route tables
  associated with the transit gateway route table, you must first run
  `DisassociateRouteTable` before you can delete the transit gateway route
  table. This removes any route tables associated with the transit gateway route
  table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec delete_transit_gateway_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_route_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_route_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayRouteTable", input, options)
  end

  @doc """
  Advertises to the transit gateway that a transit gateway route table is deleted.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayRouteTableAnnouncement&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_route_table_announcement_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayRouteTableAnnouncementId") => String.t()
    }
  """

  @spec delete_transit_gateway_route_table_announcement(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, delete_transit_gateway_route_table_announcement_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_route_table_announcement(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DeleteTransitGatewayRouteTableAnnouncement",
      input,
      options
    )
  end

  @doc """
  Deletes the specified VPC attachment.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteTransitGatewayVpcAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_transit_gateway_vpc_attachment_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec delete_transit_gateway_vpc_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_transit_gateway_vpc_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_transit_gateway_vpc_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteTransitGatewayVpcAttachment", input, options)
  end

  @doc """
  Delete an Amazon Web Services Verified Access endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVerifiedAccessEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_verified_access_endpoint_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("VerifiedAccessEndpointId") => String.t()
    }
  """

  @spec delete_verified_access_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_verified_access_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_verified_access_endpoint(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVerifiedAccessEndpoint", input, options)
  end

  @doc """
  Delete an Amazon Web Services Verified Access group.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVerifiedAccessGroup&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_verified_access_group_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("VerifiedAccessGroupId") => String.t()
    }
  """

  @spec delete_verified_access_group(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_verified_access_group_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_verified_access_group(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVerifiedAccessGroup", input, options)
  end

  @doc """
  Delete an Amazon Web Services Verified Access instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVerifiedAccessInstance&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_verified_access_instance_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("VerifiedAccessInstanceId") => String.t()
    }
  """

  @spec delete_verified_access_instance(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_verified_access_instance_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_verified_access_instance(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVerifiedAccessInstance", input, options)
  end

  @doc """
  Delete an Amazon Web Services Verified Access trust provider.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVerifiedAccessTrustProvider&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_verified_access_trust_provider_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("VerifiedAccessTrustProviderId") => String.t()
    }
  """

  @spec delete_verified_access_trust_provider(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_verified_access_trust_provider_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_verified_access_trust_provider(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVerifiedAccessTrustProvider", input, options)
  end

  @doc """
  Deletes the specified EBS volume. The volume must be in the `available` state
  (not attached to an instance). The volume can remain in the `deleting` state
  for several minutes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVolume&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_volume_request`)
    %{
      optional("DryRun") => boolean(),
      required("VolumeId") => String.t()
    }
  """

  @spec delete_volume(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_volume(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVolume", input, options)
  end

  @doc """
  Deletes the specified VPC. You must detach or delete all gateways and resources
  that are associated with the VPC before you can delete it. For example, you
  must terminate all instances running in the VPC, delete all security groups
  associated with the VPC (except the default one), delete all route tables
  associated with the VPC (except the default one), and so on. When you delete
  the VPC, it deletes the VPC's default security group, network ACL, and route
  table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVpc&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_vpc_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcId") => String.t()
    }
  """

  @spec delete_vpc(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_vpc(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVpc", input, options)
  end

  @doc """
  Deletes the specified VPC endpoint connection notifications.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVpcEndpointConnectionNotifications&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_vpc_endpoint_connection_notifications_request`)
    %{
      optional("DryRun") => boolean(),
      required("ConnectionNotificationIds") => list(String.t()())
    }
  """

  @spec delete_vpc_endpoint_connection_notifications(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_vpc_endpoint_connection_notifications_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_vpc_endpoint_connection_notifications(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVpcEndpointConnectionNotifications", input, options)
  end

  @doc """
  Deletes the specified VPC endpoint service configurations. Before you can delete
  an endpoint service configuration, you must reject any `Available` or
  `PendingAcceptance` interface endpoint connections that are attached to the
  service.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVpcEndpointServiceConfigurations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_vpc_endpoint_service_configurations_request`)
    %{
      optional("DryRun") => boolean(),
      required("ServiceIds") => list(String.t()())
    }
  """

  @spec delete_vpc_endpoint_service_configurations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_vpc_endpoint_service_configurations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_vpc_endpoint_service_configurations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVpcEndpointServiceConfigurations", input, options)
  end

  @doc """
  Deletes the specified VPC endpoints. When you delete a gateway endpoint, we
  delete the endpoint routes in the route tables for the endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVpcEndpoints&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_vpc_endpoints_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcEndpointIds") => list(String.t()())
    }
  """

  @spec delete_vpc_endpoints(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_vpc_endpoints_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_vpc_endpoints(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVpcEndpoints", input, options)
  end

  @doc """
  Deletes a VPC peering connection. Either the owner of the requester VPC or the
  owner of the accepter VPC can delete the VPC peering connection if it's in the
  `active` state. The owner of the requester VPC can delete a VPC peering
  connection in the `pending-acceptance` state. You cannot delete a VPC peering
  connection that's in the `failed` or `rejected` state.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVpcPeeringConnection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_vpc_peering_connection_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcPeeringConnectionId") => String.t()
    }
  """

  @spec delete_vpc_peering_connection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, delete_vpc_peering_connection_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def delete_vpc_peering_connection(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVpcPeeringConnection", input, options)
  end

  @doc """
  Deletes the specified VPN connection. If you're deleting the VPC and its
  associated components, we recommend that you detach the virtual private
  gateway from the VPC and delete the VPC before deleting the VPN connection. If
  you believe that the tunnel credentials for your VPN connection have been
  compromised, you can delete the VPN connection and create a new one that has
  new keys, without needing to delete the VPC or virtual private gateway. If you
  create a new VPN connection, you must reconfigure the customer gateway device
  using the new configuration information returned with the new VPN connection
  ID.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVpnConnection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_vpn_connection_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpnConnectionId") => String.t()
    }
  """

  @spec delete_vpn_connection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_vpn_connection(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVpnConnection", input, options)
  end

  @doc """
  Deletes the specified static route associated with a VPN connection between an
  existing virtual private gateway and a VPN customer gateway. The static route
  allows traffic to be routed from the virtual private gateway to the VPN
  customer gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVpnConnectionRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_vpn_connection_route_request`)
    %{
      required("DestinationCidrBlock") => String.t(),
      required("VpnConnectionId") => String.t()
    }
  """

  @spec delete_vpn_connection_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_vpn_connection_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVpnConnectionRoute", input, options)
  end

  @doc """
  Deletes the specified virtual private gateway. You must first detach the virtual
  private gateway from the VPC. Note that you don't need to delete the virtual
  private gateway if you plan to delete and recreate the VPN connection between
  your VPC and your network.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeleteVpnGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:delete_vpn_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpnGatewayId") => String.t()
    }
  """

  @spec delete_vpn_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def delete_vpn_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeleteVpnGateway", input, options)
  end

  @doc """
  Releases the specified address range that you provisioned for use with your
  Amazon Web Services resources through bring your own IP addresses (BYOIP) and
  deletes the corresponding address pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeprovisionByoipCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:deprovision_byoip_cidr_request`)
    %{
      optional("DryRun") => boolean(),
      required("Cidr") => String.t()
    }
  """

  @spec deprovision_byoip_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, deprovision_byoip_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def deprovision_byoip_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeprovisionByoipCidr", input, options)
  end

  @doc """
  Deprovisions your Autonomous System Number (ASN) from your Amazon Web Services
  account. This action can only be called after any BYOIP CIDR associations are
  removed from your Amazon Web Services account with
  [DisassociateIpamByoasn](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIpamByoasn.html).
  For more information, see [Tutorial: Bring your ASN to
  IPAM](https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html) in
  the *Amazon VPC IPAM guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeprovisionIpamByoasn&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:deprovision_ipam_byoasn_request`)
    %{
      optional("DryRun") => boolean(),
      required("Asn") => String.t(),
      required("IpamId") => String.t()
    }
  """

  @spec deprovision_ipam_byoasn(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, deprovision_ipam_byoasn_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def deprovision_ipam_byoasn(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeprovisionIpamByoasn", input, options)
  end

  @doc """
  Deprovision a CIDR provisioned from an IPAM pool. If you deprovision a CIDR from
  a pool that has a source pool, the CIDR is recycled back into the source pool.
  For more information, see [Deprovision pool
  CIDRs](https://docs.aws.amazon.com/vpc/latest/ipam/depro-pool-cidr-ipam.html)
  in the *Amazon VPC IPAM User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeprovisionIpamPoolCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:deprovision_ipam_pool_cidr_request`)
    %{
      optional("Cidr") => String.t(),
      optional("DryRun") => boolean(),
      required("IpamPoolId") => String.t()
    }
  """

  @spec deprovision_ipam_pool_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, deprovision_ipam_pool_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def deprovision_ipam_pool_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeprovisionIpamPoolCidr", input, options)
  end

  @doc """
  Deprovision a CIDR from a public IPv4 pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeprovisionPublicIpv4PoolCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:deprovision_public_ipv4_pool_cidr_request`)
    %{
      optional("DryRun") => boolean(),
      required("Cidr") => String.t(),
      required("PoolId") => String.t()
    }
  """

  @spec deprovision_public_ipv4_pool_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, deprovision_public_ipv4_pool_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def deprovision_public_ipv4_pool_cidr(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeprovisionPublicIpv4PoolCidr", input, options)
  end

  @doc """
  Deregisters the specified AMI. After you deregister an AMI, it can't be used to
  launch new instances. If you deregister an AMI that matches a Recycle Bin
  retention rule, the AMI is retained in the Recycle Bin for the specified
  retention period. For more information, see [Recycle
  Bin](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html) in
  the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeregisterImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:deregister_image_request`)
    %{
      optional("DryRun") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec deregister_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def deregister_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DeregisterImage", input, options)
  end

  @doc """
  Deregisters tag keys to prevent tags that have the specified tag keys from being
  included in scheduled event notifications for resources in the Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeregisterInstanceEventNotificationAttributes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:deregister_instance_event_notification_attributes_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceTagAttribute") => deregister_instance_tag_attribute_request()
    }
  """

  @spec deregister_instance_event_notification_attributes(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, deregister_instance_event_notification_attributes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def deregister_instance_event_notification_attributes(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DeregisterInstanceEventNotificationAttributes",
      input,
      options
    )
  end

  @doc """
  Deregisters the specified members (network interfaces) from the transit gateway
  multicast group.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeregisterTransitGatewayMulticastGroupMembers&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:deregister_transit_gateway_multicast_group_members_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GroupIpAddress") => String.t(),
      optional("NetworkInterfaceIds") => list(String.t()()),
      optional("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec deregister_transit_gateway_multicast_group_members(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, deregister_transit_gateway_multicast_group_members_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def deregister_transit_gateway_multicast_group_members(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DeregisterTransitGatewayMulticastGroupMembers",
      input,
      options
    )
  end

  @doc """
  Deregisters the specified sources (network interfaces) from the transit gateway
  multicast group.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DeregisterTransitGatewayMulticastGroupSources&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:deregister_transit_gateway_multicast_group_sources_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GroupIpAddress") => String.t(),
      optional("NetworkInterfaceIds") => list(String.t()()),
      optional("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec deregister_transit_gateway_multicast_group_sources(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, deregister_transit_gateway_multicast_group_sources_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def deregister_transit_gateway_multicast_group_sources(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DeregisterTransitGatewayMulticastGroupSources",
      input,
      options
    )
  end

  @doc """
  Describes attributes of your Amazon Web Services account. The following are the
  supported account attributes:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeAccountAttributes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_account_attributes_request`)
    %{
      optional("AttributeNames") => list(list(any())()),
      optional("DryRun") => boolean()
    }
  """

  @spec describe_account_attributes(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_account_attributes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_account_attributes(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeAccountAttributes", input, options)
  end

  @doc """
  Describes an Elastic IP address transfer. For more information, see [Transfer
  Elastic IP
  addresses](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeAddressTransfers&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_address_transfers_request`)
    %{
      optional("AllocationIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_address_transfers(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_address_transfers_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_address_transfers(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeAddressTransfers", input, options)
  end

  @doc """
  Describes the specified Elastic IP addresses or all of your Elastic IP
  addresses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeAddresses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_addresses_request`)
    %{
      optional("AllocationIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("PublicIps") => list(String.t()())
    }
  """

  @spec describe_addresses(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_addresses_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_addresses(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeAddresses", input, options)
  end

  @doc """
  Describes the attributes of the specified Elastic IP addresses. For
  requirements, see [Using reverse DNS for email
  applications](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeAddressesAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_addresses_attribute_request`)
    %{
      optional("AllocationIds") => list(String.t()()),
      optional("Attribute") => list(any()),
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_addresses_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_addresses_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_addresses_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeAddressesAttribute", input, options)
  end

  @doc """
  Describes the longer ID format settings for all resource types in a specific
  Region. This request is useful for performing a quick audit to determine
  whether a specific Region is fully opted in for longer IDs (17-character IDs).
  This request only returns information about resource types that support longer
  IDs.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeAggregateIdFormat&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_aggregate_id_format_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec describe_aggregate_id_format(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_aggregate_id_format_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_aggregate_id_format(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeAggregateIdFormat", input, options)
  end

  @doc """
  Describes the Availability Zones, Local Zones, and Wavelength Zones that are
  available to you. If there is an event impacting a zone, you can use this
  request to view the state and any provided messages for that zone. For more
  information about Availability Zones, Local Zones, and Wavelength Zones, see
  [Regions and
  zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeAvailabilityZones&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_availability_zones_request`)
    %{
      optional("AllAvailabilityZones") => boolean(),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("ZoneIds") => list(String.t()()),
      optional("ZoneNames") => list(String.t()())
    }
  """

  @spec describe_availability_zones(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_availability_zones_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_availability_zones(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeAvailabilityZones", input, options)
  end

  @doc """
  Describes the current Infrastructure Performance metric subscriptions.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeAwsNetworkPerformanceMetricSubscriptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_aws_network_performance_metric_subscriptions_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_aws_network_performance_metric_subscriptions(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_aws_network_performance_metric_subscriptions_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_aws_network_performance_metric_subscriptions(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeAwsNetworkPerformanceMetricSubscriptions",
      input,
      options
    )
  end

  @doc """
  Describes the specified bundle tasks or all of your bundle tasks. Completed
  bundle tasks are listed for only a limited time. If your bundle task is no
  longer in the list, you can still register an AMI from it. Just use
  `RegisterImage` with the Amazon S3 bucket name and image manifest name you
  provided to the bundle task.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeBundleTasks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_bundle_tasks_request`)
    %{
      optional("BundleIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()())
    }
  """

  @spec describe_bundle_tasks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_bundle_tasks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_bundle_tasks(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeBundleTasks", input, options)
  end

  @doc """
  Describes the IP address ranges that were specified in calls to
  `ProvisionByoipCidr`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeByoipCidrs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_byoip_cidrs_request`)
    %{
      optional("DryRun") => boolean(),
      optional("NextToken") => String.t(),
      required("MaxResults") => integer()
    }
  """

  @spec describe_byoip_cidrs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_byoip_cidrs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_byoip_cidrs(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeByoipCidrs", input, options)
  end

  @doc """
  Describes Capacity Block offerings available for purchase in the Amazon Web
  Services Region that you're currently using. With Capacity Blocks, you
  purchase a specific instance type for a period of time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeCapacityBlockOfferings&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_capacity_block_offerings_request`)
    %{
      optional("DryRun") => boolean(),
      optional("EndDateRange") => non_neg_integer(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("StartDateRange") => non_neg_integer(),
      required("CapacityDurationHours") => integer(),
      required("InstanceCount") => integer(),
      required("InstanceType") => String.t()
    }
  """

  @spec describe_capacity_block_offerings(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_capacity_block_offerings_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_capacity_block_offerings(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeCapacityBlockOfferings", input, options)
  end

  @doc """
  Describes one or more Capacity Reservation Fleets.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeCapacityReservationFleets&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_capacity_reservation_fleets_request`)
    %{
      optional("CapacityReservationFleetIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_capacity_reservation_fleets(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_capacity_reservation_fleets_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_capacity_reservation_fleets(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeCapacityReservationFleets", input, options)
  end

  @doc """
  Describes one or more of your Capacity Reservations. The results describe only
  the Capacity Reservations in the Amazon Web Services Region that you're
  currently using.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeCapacityReservations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_capacity_reservations_request`)
    %{
      optional("CapacityReservationIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_capacity_reservations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_capacity_reservations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_capacity_reservations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeCapacityReservations", input, options)
  end

  @doc """
  Describes one or more of your carrier gateways.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeCarrierGateways&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_carrier_gateways_request`)
    %{
      optional("CarrierGatewayIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_carrier_gateways(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_carrier_gateways_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_carrier_gateways(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeCarrierGateways", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeClassicLinkInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_classic_link_instances_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("InstanceIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_classic_link_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_classic_link_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_classic_link_instances(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeClassicLinkInstances", input, options)
  end

  @doc """
  Describes the authorization rules for a specified Client VPN endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeClientVpnAuthorizationRules&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_client_vpn_authorization_rules_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec describe_client_vpn_authorization_rules(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_client_vpn_authorization_rules_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_client_vpn_authorization_rules(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeClientVpnAuthorizationRules", input, options)
  end

  @doc """
  Describes active client connections and connections that have been terminated
  within the last 60 minutes for the specified Client VPN endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeClientVpnConnections&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_client_vpn_connections_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec describe_client_vpn_connections(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_client_vpn_connections_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_client_vpn_connections(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeClientVpnConnections", input, options)
  end

  @doc """
  Describes one or more Client VPN endpoints in the account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeClientVpnEndpoints&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_client_vpn_endpoints_request`)
    %{
      optional("ClientVpnEndpointIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_client_vpn_endpoints(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_client_vpn_endpoints_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_client_vpn_endpoints(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeClientVpnEndpoints", input, options)
  end

  @doc """
  Describes the routes for the specified Client VPN endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeClientVpnRoutes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_client_vpn_routes_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec describe_client_vpn_routes(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_client_vpn_routes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_client_vpn_routes(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeClientVpnRoutes", input, options)
  end

  @doc """
  Describes the target networks associated with the specified Client VPN endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeClientVpnTargetNetworks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_client_vpn_target_networks_request`)
    %{
      optional("AssociationIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec describe_client_vpn_target_networks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_client_vpn_target_networks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_client_vpn_target_networks(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeClientVpnTargetNetworks", input, options)
  end

  @doc """
  Describes the specified customer-owned address pools or all of your
  customer-owned address pools.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeCoipPools&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_coip_pools_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("PoolIds") => list(String.t()())
    }
  """

  @spec describe_coip_pools(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_coip_pools_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_coip_pools(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeCoipPools", input, options)
  end

  @doc """
  Describes the specified conversion tasks or all your conversion tasks. For more
  information, see the [VM Import/Export User
  Guide](https://docs.aws.amazon.com/vm-import/latest/userguide/). For
  information about the import manifest referenced by this API action, see [VM
  Import
  Manifest](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeConversionTasks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_conversion_tasks_request`)
    %{
      optional("ConversionTaskIds") => list(String.t()()),
      optional("DryRun") => boolean()
    }
  """

  @spec describe_conversion_tasks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_conversion_tasks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_conversion_tasks(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeConversionTasks", input, options)
  end

  @doc """
  Describes one or more of your VPN customer gateways.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeCustomerGateways&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_customer_gateways_request`)
    %{
      optional("CustomerGatewayIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()())
    }
  """

  @spec describe_customer_gateways(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_customer_gateways_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_customer_gateways(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeCustomerGateways", input, options)
  end

  @doc """
  Describes your DHCP option sets. The default is to describe all your DHCP option
  sets. Alternatively, you can specify specific DHCP option set IDs or filter
  the results to include only the DHCP option sets that match specific criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeDhcpOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_dhcp_options_request`)
    %{
      optional("DhcpOptionsIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_dhcp_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_dhcp_options_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_dhcp_options(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeDhcpOptions", input, options)
  end

  @doc """
  Describes your egress-only internet gateways. The default is to describe all
  your egress-only internet gateways. Alternatively, you can specify specific
  egress-only internet gateway IDs or filter the results to include only the
  egress-only internet gateways that match specific criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeEgressOnlyInternetGateways&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_egress_only_internet_gateways_request`)
    %{
      optional("DryRun") => boolean(),
      optional("EgressOnlyInternetGatewayIds") => list(String.t()()),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_egress_only_internet_gateways(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_egress_only_internet_gateways_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_egress_only_internet_gateways(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeEgressOnlyInternetGateways", input, options)
  end

  @doc """
  Amazon Elastic Graphics reached end of life on January 8, 2024. For workloads
  that require graphics acceleration, we recommend that you use Amazon EC2 G4,
  G5, or G6 instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeElasticGpus&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_elastic_gpus_request`)
    %{
      optional("DryRun") => boolean(),
      optional("ElasticGpuIds") => list(String.t()()),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_elastic_gpus(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_elastic_gpus_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_elastic_gpus(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeElasticGpus", input, options)
  end

  @doc """
  Describes the specified export image tasks or all of your export image tasks.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeExportImageTasks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_export_image_tasks_request`)
    %{
      optional("DryRun") => boolean(),
      optional("ExportImageTaskIds") => list(String.t()()),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_export_image_tasks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_export_image_tasks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_export_image_tasks(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeExportImageTasks", input, options)
  end

  @doc """
  Describes the specified export instance tasks or all of your export instance
  tasks.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeExportTasks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_export_tasks_request`)
    %{
      optional("ExportTaskIds") => list(String.t()()),
      optional("Filters") => list(filter()())
    }
  """

  @spec describe_export_tasks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_export_tasks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_export_tasks(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeExportTasks", input, options)
  end

  @doc """
  Describe details for Windows AMIs that are configured for Windows fast launch.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeFastLaunchImages&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_fast_launch_images_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("ImageIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_fast_launch_images(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_fast_launch_images_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_fast_launch_images(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeFastLaunchImages", input, options)
  end

  @doc """
  Describes the state of fast snapshot restores for your snapshots.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeFastSnapshotRestores&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_fast_snapshot_restores_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_fast_snapshot_restores(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_fast_snapshot_restores_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_fast_snapshot_restores(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeFastSnapshotRestores", input, options)
  end

  @doc """
  Describes the events for the specified EC2 Fleet during the specified time. EC2
  Fleet events are delayed by up to 30 seconds before they can be described.
  This ensures that you can query by the last evaluated time and not miss a
  recorded event. EC2 Fleet events are available for 48 hours.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeFleetHistory&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_fleet_history_request`)
    %{
      optional("DryRun") => boolean(),
      optional("EventType") => list(any()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("FleetId") => String.t(),
      required("StartTime") => non_neg_integer()
    }
  """

  @spec describe_fleet_history(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_fleet_history_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_fleet_history(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeFleetHistory", input, options)
  end

  @doc """
  Describes the running instances for the specified EC2 Fleet. Currently,
  `DescribeFleetInstances` does not support fleets of type `instant`. Instead,
  use `DescribeFleets`, specifying the `instant` fleet ID in the request.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeFleetInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_fleet_instances_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("FleetId") => String.t()
    }
  """

  @spec describe_fleet_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_fleet_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_fleet_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeFleetInstances", input, options)
  end

  @doc """
  Describes the specified EC2 Fleet or all of your EC2 Fleets. If a fleet is of
  type `instant`, you must specify the fleet ID in the request, otherwise the
  fleet does not appear in the response.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeFleets&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_fleets_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("FleetIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_fleets(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_fleets_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_fleets(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeFleets", input, options)
  end

  @doc """
  Describes one or more flow logs.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeFlowLogs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_flow_logs_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filter") => list(filter()()),
      optional("FlowLogIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_flow_logs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_flow_logs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_flow_logs(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeFlowLogs", input, options)
  end

  @doc """
  Describes the specified attribute of the specified Amazon FPGA Image (AFI).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeFpgaImageAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_fpga_image_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("FpgaImageId") => String.t()
    }
  """

  @spec describe_fpga_image_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_fpga_image_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_fpga_image_attribute(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeFpgaImageAttribute", input, options)
  end

  @doc """
  Describes the Amazon FPGA Images (AFIs) available to you. These include public
  AFIs, private AFIs that you own, and AFIs owned by other Amazon Web Services
  accounts for which you have load permissions.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeFpgaImages&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_fpga_images_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("FpgaImageIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("Owners") => list(String.t()())
    }
  """

  @spec describe_fpga_images(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_fpga_images_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_fpga_images(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeFpgaImages", input, options)
  end

  @doc """
  Describes the Dedicated Host reservations that are available to purchase.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeHostReservationOfferings&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_host_reservation_offerings_request`)
    %{
      optional("Filter") => list(filter()()),
      optional("MaxDuration") => integer(),
      optional("MaxResults") => integer(),
      optional("MinDuration") => integer(),
      optional("NextToken") => String.t(),
      optional("OfferingId") => String.t()
    }
  """

  @spec describe_host_reservation_offerings(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_host_reservation_offerings_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_host_reservation_offerings(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeHostReservationOfferings", input, options)
  end

  @doc """
  Describes reservations that are associated with Dedicated Hosts in your account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeHostReservations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_host_reservations_request`)
    %{
      optional("Filter") => list(filter()()),
      optional("HostReservationIdSet") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_host_reservations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_host_reservations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_host_reservations(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeHostReservations", input, options)
  end

  @doc """
  Describes the specified Dedicated Hosts or all your Dedicated Hosts.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeHosts&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_hosts_request`)
    %{
      optional("Filter") => list(filter()()),
      optional("HostIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_hosts(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_hosts_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_hosts(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeHosts", input, options)
  end

  @doc """
  Describes your IAM instance profile associations.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIamInstanceProfileAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_iam_instance_profile_associations_request`)
    %{
      optional("AssociationIds") => list(String.t()()),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_iam_instance_profile_associations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_iam_instance_profile_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_iam_instance_profile_associations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIamInstanceProfileAssociations", input, options)
  end

  @doc """
  Describes the ID format settings for your resources on a per-Region basis, for
  example, to view which resource types are enabled for longer IDs. This request
  only returns information about resource types whose ID formats can be
  modified; it does not return information about other resource types. The
  following resource types support longer IDs: `bundle` | `conversion-task` |
  `customer-gateway` | `dhcp-options` | `elastic-ip-allocation` |
  `elastic-ip-association` | `export-task` | `flow-log` | `image` |
  `import-task` | `instance` | `internet-gateway` | `network-acl` |
  `network-acl-association` | `network-interface` |
  `network-interface-attachment` | `prefix-list` | `reservation` | `route-table`
  | `route-table-association` | `security-group` | `snapshot` | `subnet` |
  `subnet-cidr-block-association` | `volume` | `vpc` |
  `vpc-cidr-block-association` | `vpc-endpoint` | `vpc-peering-connection` |
  `vpn-connection` | `vpn-gateway`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIdFormat&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_id_format_request`)
    %{
      optional("Resource") => String.t()
    }
  """

  @spec describe_id_format(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_id_format_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_id_format(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIdFormat", input, options)
  end

  @doc """
  Describes the ID format settings for resources for the specified IAM user, IAM
  role, or root user. For example, you can view the resource types that are
  enabled for longer IDs. This request only returns information about resource
  types whose ID formats can be modified; it does not return information about
  other resource types. For more information, see [Resource
  IDs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html) in
  the *Amazon Elastic Compute Cloud User Guide*. The following resource types
  support longer IDs: `bundle` | `conversion-task` | `customer-gateway` |
  `dhcp-options` | `elastic-ip-allocation` | `elastic-ip-association` |
  `export-task` | `flow-log` | `image` | `import-task` | `instance` |
  `internet-gateway` | `network-acl` | `network-acl-association` |
  `network-interface` | `network-interface-attachment` | `prefix-list` |
  `reservation` | `route-table` | `route-table-association` | `security-group` |
  `snapshot` | `subnet` | `subnet-cidr-block-association` | `volume` | `vpc` |
  `vpc-cidr-block-association` | `vpc-endpoint` | `vpc-peering-connection` |
  `vpn-connection` | `vpn-gateway`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIdentityIdFormat&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_identity_id_format_request`)
    %{
      optional("Resource") => String.t(),
      required("PrincipalArn") => String.t()
    }
  """

  @spec describe_identity_id_format(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_identity_id_format_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_identity_id_format(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIdentityIdFormat", input, options)
  end

  @doc """
  Describes the specified attribute of the specified AMI. You can specify only one
  attribute at a time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeImageAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_image_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("ImageId") => String.t()
    }
  """

  @spec describe_image_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, image_attribute(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_image_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeImageAttribute", input, options)
  end

  @doc """
  Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of
  the images available to you. The images available to you include public
  images, private images that you own, and private images owned by other Amazon
  Web Services accounts for which you have explicit launch permissions.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeImages&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_images_request`)
    %{
      optional("DryRun") => boolean(),
      optional("ExecutableUsers") => list(String.t()()),
      optional("Filters") => list(filter()()),
      optional("ImageIds") => list(String.t()()),
      optional("IncludeDeprecated") => boolean(),
      optional("IncludeDisabled") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("Owners") => list(String.t()())
    }
  """

  @spec describe_images(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_images_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_images(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeImages", input, options)
  end

  @doc """
  Displays details about an import virtual machine or import snapshot tasks that
  are already created.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeImportImageTasks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_import_image_tasks_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("ImportTaskIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_import_image_tasks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_import_image_tasks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_import_image_tasks(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeImportImageTasks", input, options)
  end

  @doc """
  Describes your import snapshot tasks.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeImportSnapshotTasks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_import_snapshot_tasks_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("ImportTaskIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_import_snapshot_tasks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_import_snapshot_tasks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_import_snapshot_tasks(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeImportSnapshotTasks", input, options)
  end

  @doc """
  Describes the specified attribute of the specified instance. You can specify
  only one attribute at a time. Valid attribute values are: `instanceType` |
  `kernel` | `ramdisk` | `userData` | `disableApiTermination` |
  `instanceInitiatedShutdownBehavior` | `rootDeviceName` | `blockDeviceMapping`
  | `productCodes` | `sourceDestCheck` | `groupSet` | `ebsOptimized` |
  `sriovNetSupport`

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("InstanceId") => String.t()
    }
  """

  @spec describe_instance_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, instance_attribute(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstanceAttribute", input, options)
  end

  @doc """
  Describes the specified EC2 Instance Connect Endpoints or all EC2 Instance
  Connect Endpoints.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceConnectEndpoints&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_connect_endpoints_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("InstanceConnectEndpointIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_instance_connect_endpoints(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_instance_connect_endpoints_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_connect_endpoints(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstanceConnectEndpoints", input, options)
  end

  @doc """
  Describes the credit option for CPU usage of the specified burstable performance
  instances. The credit options are `standard` and `unlimited`. If you do not
  specify an instance ID, Amazon EC2 returns burstable performance instances
  with the `unlimited` credit option, as well as instances that were previously
  configured as T2, T3, and T3a with the `unlimited` credit option. For example,
  if you resize a T2 instance, while it is configured as `unlimited`, to an M4
  instance, Amazon EC2 returns the M4 instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceCreditSpecifications&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_credit_specifications_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("InstanceIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_instance_credit_specifications(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_instance_credit_specifications_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_credit_specifications(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstanceCreditSpecifications", input, options)
  end

  @doc """
  Describes the tag keys that are registered to appear in scheduled event
  notifications for resources in the current Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceEventNotificationAttributes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_event_notification_attributes_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec describe_instance_event_notification_attributes(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_instance_event_notification_attributes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_event_notification_attributes(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeInstanceEventNotificationAttributes",
      input,
      options
    )
  end

  @doc """
  Describes the specified event windows or all event windows. If you specify event
  window IDs, the output includes information for only the specified event
  windows. If you specify filters, the output includes information for only
  those event windows that meet the filter criteria. If you do not specify event
  windows IDs or filters, the output includes information for all event windows,
  which can affect performance. We recommend that you use pagination to ensure
  that the operation returns quickly and successfully.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceEventWindows&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_event_windows_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("InstanceEventWindowIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_instance_event_windows(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_instance_event_windows_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_event_windows(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstanceEventWindows", input, options)
  end

  @doc """
  Describes the status of the specified instances or all of your instances. By
  default, only running instances are described, unless you specifically
  indicate to return the status of all instances. Instance status includes the
  following components:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceStatus&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_status_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IncludeAllInstances") => boolean(),
      optional("InstanceIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_instance_status(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_instance_status_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_status(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstanceStatus", input, options)
  end

  @doc """
  Describes a tree-based hierarchy that represents the physical host placement of
  your EC2 instances within an Availability Zone or Local Zone. You can use this
  information to determine the relative proximity of your EC2 instances within
  the Amazon Web Services network to support your tightly coupled workloads.
  **Limitations**

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceTopology&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_topology_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("GroupNames") => list(String.t()()),
      optional("InstanceIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_instance_topology(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_instance_topology_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_topology(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstanceTopology", input, options)
  end

  @doc """
  Lists the instance types that are offered for the specified location. If no
  location is specified, the default is to list the instance types that are
  offered in the current Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceTypeOfferings&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_type_offerings_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LocationType") => list(any()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_instance_type_offerings(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_instance_type_offerings_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_type_offerings(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstanceTypeOfferings", input, options)
  end

  @doc """
  Describes the specified instance types. By default, all instance types for the
  current Region are described. Alternatively, you can filter the results.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstanceTypes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instance_types_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("InstanceTypes") => list(list(any())()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_instance_types(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_instance_types_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instance_types(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstanceTypes", input, options)
  end

  @doc """
  Describes the specified instances or all instances. If you specify instance IDs,
  the output includes information for only the specified instances. If you
  specify filters, the output includes information for only those instances that
  meet the filter criteria. If you do not specify instance IDs or filters, the
  output includes information for all instances, which can affect performance.
  We recommend that you use pagination to ensure that the operation returns
  quickly and successfully.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_instances_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("InstanceIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInstances", input, options)
  end

  @doc """
  Describes your internet gateways. The default is to describe all your internet
  gateways. Alternatively, you can specify specific internet gateway IDs or
  filter the results to include only the internet gateways that match specific
  criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeInternetGateways&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_internet_gateways_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("InternetGatewayIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_internet_gateways(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_internet_gateways_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_internet_gateways(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeInternetGateways", input, options)
  end

  @doc """
  Describes your Autonomous System Numbers (ASNs), their provisioning statuses,
  and the BYOIP CIDRs with which they are associated. For more information, see
  [Tutorial: Bring your ASN to
  IPAM](https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html) in
  the *Amazon VPC IPAM guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIpamByoasn&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_ipam_byoasn_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_ipam_byoasn(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_ipam_byoasn_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_ipam_byoasn(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIpamByoasn", input, options)
  end

  @doc """
  Describe verification tokens. A verification token is an Amazon Web
  Services-generated random value that you can use to prove ownership of an
  external resource. For example, you can use a verification token to validate
  that you control a public IP address range when you bring an IP address range
  to Amazon Web Services (BYOIP).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIpamExternalResourceVerificationTokens&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_ipam_external_resource_verification_tokens_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IpamExternalResourceVerificationTokenIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_ipam_external_resource_verification_tokens(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_ipam_external_resource_verification_tokens_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_ipam_external_resource_verification_tokens(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeIpamExternalResourceVerificationTokens",
      input,
      options
    )
  end

  @doc """
  Get information about your IPAM pools.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIpamPools&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_ipam_pools_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IpamPoolIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_ipam_pools(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_ipam_pools_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_ipam_pools(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIpamPools", input, options)
  end

  @doc """
  Describes IPAM resource discoveries. A resource discovery is an IPAM component
  that enables IPAM to manage and monitor resources that belong to the owning
  account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIpamResourceDiscoveries&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_ipam_resource_discoveries_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IpamResourceDiscoveryIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_ipam_resource_discoveries(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_ipam_resource_discoveries_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_ipam_resource_discoveries(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIpamResourceDiscoveries", input, options)
  end

  @doc """
  Describes resource discovery association with an Amazon VPC IPAM. An associated
  resource discovery is a resource discovery that has been associated with an
  IPAM..

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIpamResourceDiscoveryAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_ipam_resource_discovery_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IpamResourceDiscoveryAssociationIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_ipam_resource_discovery_associations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_ipam_resource_discovery_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_ipam_resource_discovery_associations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeIpamResourceDiscoveryAssociations",
      input,
      options
    )
  end

  @doc """
  Get information about your IPAM scopes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIpamScopes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_ipam_scopes_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IpamScopeIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_ipam_scopes(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_ipam_scopes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_ipam_scopes(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIpamScopes", input, options)
  end

  @doc """
  Get information about your IPAM pools.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIpams&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_ipams_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IpamIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_ipams(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_ipams_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_ipams(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIpams", input, options)
  end

  @doc """
  Describes your IPv6 address pools.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeIpv6Pools&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_ipv6_pools_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("PoolIds") => list(String.t()())
    }
  """

  @spec describe_ipv6_pools(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_ipv6_pools_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_ipv6_pools(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeIpv6Pools", input, options)
  end

  @doc """
  Describes the specified key pairs or all of your key pairs.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeKeyPairs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_key_pairs_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IncludePublicKey") => boolean(),
      optional("KeyNames") => list(String.t()()),
      optional("KeyPairIds") => list(String.t()())
    }
  """

  @spec describe_key_pairs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_key_pairs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_key_pairs(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeKeyPairs", input, options)
  end

  @doc """
  Describes one or more versions of a specified launch template. You can describe
  all versions, individual versions, or a range of versions. You can also
  describe all the latest versions or all the default versions of all the launch
  templates in your account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLaunchTemplateVersions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_launch_template_versions_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LaunchTemplateId") => String.t(),
      optional("LaunchTemplateName") => String.t(),
      optional("MaxResults") => integer(),
      optional("MaxVersion") => String.t(),
      optional("MinVersion") => String.t(),
      optional("NextToken") => String.t(),
      optional("ResolveAlias") => boolean(),
      optional("Versions") => list(String.t()())
    }
  """

  @spec describe_launch_template_versions(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_launch_template_versions_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_launch_template_versions(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeLaunchTemplateVersions", input, options)
  end

  @doc """
  Describes one or more launch templates.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLaunchTemplates&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_launch_templates_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LaunchTemplateIds") => list(String.t()()),
      optional("LaunchTemplateNames") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_launch_templates(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_launch_templates_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_launch_templates(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeLaunchTemplates", input, options)
  end

  @doc """
  Describes the associations between virtual interface groups and local gateway
  route tables.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_local_gateway_route_table_virtual_interface_group_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_local_gateway_route_table_virtual_interface_group_associations(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_local_gateway_route_table_virtual_interface_group_associations_result(),
           any()}
          | {:error, {:unexpected_response, any()}}

  def describe_local_gateway_route_table_virtual_interface_group_associations(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
      input,
      options
    )
  end

  @doc """
  Describes the specified associations between VPCs and local gateway route
  tables.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLocalGatewayRouteTableVpcAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_local_gateway_route_table_vpc_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LocalGatewayRouteTableVpcAssociationIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_local_gateway_route_table_vpc_associations(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_local_gateway_route_table_vpc_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_local_gateway_route_table_vpc_associations(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeLocalGatewayRouteTableVpcAssociations",
      input,
      options
    )
  end

  @doc """
  Describes one or more local gateway route tables. By default, all local gateway
  route tables are described. Alternatively, you can filter the results.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLocalGatewayRouteTables&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_local_gateway_route_tables_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LocalGatewayRouteTableIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_local_gateway_route_tables(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_local_gateway_route_tables_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_local_gateway_route_tables(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeLocalGatewayRouteTables", input, options)
  end

  @doc """
  Describes the specified local gateway virtual interface groups.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLocalGatewayVirtualInterfaceGroups&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_local_gateway_virtual_interface_groups_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LocalGatewayVirtualInterfaceGroupIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_local_gateway_virtual_interface_groups(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_local_gateway_virtual_interface_groups_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_local_gateway_virtual_interface_groups(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeLocalGatewayVirtualInterfaceGroups",
      input,
      options
    )
  end

  @doc """
  Describes the specified local gateway virtual interfaces.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLocalGatewayVirtualInterfaces&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_local_gateway_virtual_interfaces_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LocalGatewayVirtualInterfaceIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_local_gateway_virtual_interfaces(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_local_gateway_virtual_interfaces_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_local_gateway_virtual_interfaces(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeLocalGatewayVirtualInterfaces", input, options)
  end

  @doc """
  Describes one or more local gateways. By default, all local gateways are
  described. Alternatively, you can filter the results.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLocalGateways&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_local_gateways_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("LocalGatewayIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_local_gateways(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_local_gateways_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_local_gateways(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeLocalGateways", input, options)
  end

  @doc """
  Describes the lock status for a snapshot.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeLockedSnapshots&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_locked_snapshots_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("SnapshotIds") => list(String.t()())
    }
  """

  @spec describe_locked_snapshots(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_locked_snapshots_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_locked_snapshots(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeLockedSnapshots", input, options)
  end

  @doc """
  Describes the specified EC2 Mac Dedicated Host or all of your EC2 Mac Dedicated
  Hosts.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeMacHosts&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_mac_hosts_request`)
    %{
      optional("Filters") => list(filter()()),
      optional("HostIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_mac_hosts(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_mac_hosts_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_mac_hosts(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeMacHosts", input, options)
  end

  @doc """
  Describes your managed prefix lists and any Amazon Web Services-managed prefix
  lists.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeManagedPrefixLists&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_managed_prefix_lists_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("PrefixListIds") => list(String.t()())
    }
  """

  @spec describe_managed_prefix_lists(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_managed_prefix_lists_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_managed_prefix_lists(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeManagedPrefixLists", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeMovingAddresses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_moving_addresses_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("PublicIps") => list(String.t()())
    }
  """

  @spec describe_moving_addresses(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_moving_addresses_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_moving_addresses(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeMovingAddresses", input, options)
  end

  @doc """
  Describes your NAT gateways. The default is to describe all your NAT gateways.
  Alternatively, you can specify specific NAT gateway IDs or filter the results
  to include only the NAT gateways that match specific criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNatGateways&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_nat_gateways_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filter") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NatGatewayIds") => list(String.t()()),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_nat_gateways(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_nat_gateways_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_nat_gateways(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeNatGateways", input, options)
  end

  @doc """
  Describes your network ACLs. The default is to describe all your network ACLs.
  Alternatively, you can specify specific network ACL IDs or filter the results
  to include only the network ACLs that match specific criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNetworkAcls&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_network_acls_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NetworkAclIds") => list(String.t()()),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_network_acls(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_network_acls_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_network_acls(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeNetworkAcls", input, options)
  end

  @doc """
  Describes the specified Network Access Scope analyses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNetworkInsightsAccessScopeAnalyses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_network_insights_access_scope_analyses_request`)
    %{
      optional("AnalysisStartTimeBegin") => non_neg_integer(),
      optional("AnalysisStartTimeEnd") => non_neg_integer(),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NetworkInsightsAccessScopeAnalysisIds") => list(String.t()()),
      optional("NetworkInsightsAccessScopeId") => String.t(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_network_insights_access_scope_analyses(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_network_insights_access_scope_analyses_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_network_insights_access_scope_analyses(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeNetworkInsightsAccessScopeAnalyses",
      input,
      options
    )
  end

  @doc """
  Describes the specified Network Access Scopes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNetworkInsightsAccessScopes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_network_insights_access_scopes_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NetworkInsightsAccessScopeIds") => list(String.t()()),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_network_insights_access_scopes(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_network_insights_access_scopes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_network_insights_access_scopes(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeNetworkInsightsAccessScopes", input, options)
  end

  @doc """
  Describes one or more of your network insights analyses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNetworkInsightsAnalyses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_network_insights_analyses_request`)
    %{
      optional("AnalysisEndTime") => non_neg_integer(),
      optional("AnalysisStartTime") => non_neg_integer(),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NetworkInsightsAnalysisIds") => list(String.t()()),
      optional("NetworkInsightsPathId") => String.t(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_network_insights_analyses(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_network_insights_analyses_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_network_insights_analyses(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeNetworkInsightsAnalyses", input, options)
  end

  @doc """
  Describes one or more of your paths.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNetworkInsightsPaths&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_network_insights_paths_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NetworkInsightsPathIds") => list(String.t()()),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_network_insights_paths(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_network_insights_paths_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_network_insights_paths(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeNetworkInsightsPaths", input, options)
  end

  @doc """
  Describes a network interface attribute. You can specify only one attribute at a
  time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNetworkInterfaceAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_network_interface_attribute_request`)
    %{
      optional("Attribute") => list(any()),
      optional("DryRun") => boolean(),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec describe_network_interface_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_network_interface_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_network_interface_attribute(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeNetworkInterfaceAttribute", input, options)
  end

  @doc """
  Describes the permissions for your network interfaces.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNetworkInterfacePermissions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_network_interface_permissions_request`)
    %{
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NetworkInterfacePermissionIds") => list(String.t()()),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_network_interface_permissions(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_network_interface_permissions_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_network_interface_permissions(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeNetworkInterfacePermissions", input, options)
  end

  @doc """
  Describes one or more of your network interfaces. If you have a large number of
  network interfaces, the operation fails unless you use pagination or one of
  the following filters: `group-id`, `mac-address`, `private-dns-name`,
  `private-ip-address`, `private-dns-name`, `subnet-id`, or `vpc-id`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeNetworkInterfaces&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_network_interfaces_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NetworkInterfaceIds") => list(String.t()()),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_network_interfaces(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_network_interfaces_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_network_interfaces(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeNetworkInterfaces", input, options)
  end

  @doc """
  Describes the specified placement groups or all of your placement groups. To
  describe a specific placement group that is *shared* with your account, you
  must specify the ID of the placement group using the `GroupId` parameter.
  Specifying the name of a *shared* placement group using the `GroupNames`
  parameter will result in an error.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribePlacementGroups&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_placement_groups_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("GroupIds") => list(String.t()()),
      optional("GroupNames") => list(String.t()())
    }
  """

  @spec describe_placement_groups(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_placement_groups_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_placement_groups(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribePlacementGroups", input, options)
  end

  @doc """
  Describes available Amazon Web Services services in a prefix list format, which
  includes the prefix list name and prefix list ID of the service and the IP
  address range for the service.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribePrefixLists&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_prefix_lists_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("PrefixListIds") => list(String.t()())
    }
  """

  @spec describe_prefix_lists(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_prefix_lists_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_prefix_lists(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribePrefixLists", input, options)
  end

  @doc """
  Describes the ID format settings for the root user and all IAM roles and IAM
  users that have explicitly specified a longer ID (17-character ID) preference.
  By default, all IAM roles and IAM users default to the same ID settings as the
  root user, unless they explicitly override the settings. This request is
  useful for identifying those IAM users and IAM roles that have overridden the
  default ID settings.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribePrincipalIdFormat&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_principal_id_format_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("Resources") => list(String.t()())
    }
  """

  @spec describe_principal_id_format(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_principal_id_format_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_principal_id_format(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribePrincipalIdFormat", input, options)
  end

  @doc """
  Describes the specified IPv4 address pools.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribePublicIpv4Pools&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_public_ipv4_pools_request`)
    %{
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("PoolIds") => list(String.t()())
    }
  """

  @spec describe_public_ipv4_pools(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_public_ipv4_pools_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_public_ipv4_pools(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribePublicIpv4Pools", input, options)
  end

  @doc """
  Describes the Regions that are enabled for your account, or all Regions. For a
  list of the Regions supported by Amazon EC2, see [Amazon EC2 service
  endpoints](https://docs.aws.amazon.com/ec2/latest/devguide/ec2-endpoints.html).
  For information about enabling and disabling Regions for your account, see
  [Specify which Amazon Web Services Regions your account can
  use](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-regions.html)
  in the *Amazon Web Services Account Management Reference Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeRegions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_regions_request`)
    %{
      optional("AllRegions") => boolean(),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("RegionNames") => list(String.t()())
    }
  """

  @spec describe_regions(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_regions_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_regions(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeRegions", input, options)
  end

  @doc """
  Describes a root volume replacement task. For more information, see [Replace a
  root
  volume](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/replace-root.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeReplaceRootVolumeTasks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_replace_root_volume_tasks_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("ReplaceRootVolumeTaskIds") => list(String.t()())
    }
  """

  @spec describe_replace_root_volume_tasks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_replace_root_volume_tasks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_replace_root_volume_tasks(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeReplaceRootVolumeTasks", input, options)
  end

  @doc """
  Describes one or more of the Reserved Instances that you purchased. For more
  information about Reserved Instances, see [Reserved
  Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeReservedInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_reserved_instances_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("OfferingClass") => list(any()),
      optional("OfferingType") => list(any()),
      optional("ReservedInstancesIds") => list(String.t()())
    }
  """

  @spec describe_reserved_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_reserved_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_reserved_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeReservedInstances", input, options)
  end

  @doc """
  Describes your account's Reserved Instance listings in the Reserved Instance
  Marketplace. The Reserved Instance Marketplace matches sellers who want to
  resell Reserved Instance capacity that they no longer need with buyers who
  want to purchase additional capacity. Reserved Instances bought and sold
  through the Reserved Instance Marketplace work like any other Reserved
  Instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeReservedInstancesListings&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_reserved_instances_listings_request`)
    %{
      optional("Filters") => list(filter()()),
      optional("ReservedInstancesId") => String.t(),
      optional("ReservedInstancesListingId") => String.t()
    }
  """

  @spec describe_reserved_instances_listings(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_reserved_instances_listings_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_reserved_instances_listings(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeReservedInstancesListings", input, options)
  end

  @doc """
  Describes the modifications made to your Reserved Instances. If no parameter is
  specified, information about all your Reserved Instances modification requests
  is returned. If a modification ID is specified, only information about the
  specific modification is returned. For more information, see [Modify Reserved
  Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeReservedInstancesModifications&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_reserved_instances_modifications_request`)
    %{
      optional("Filters") => list(filter()()),
      optional("NextToken") => String.t(),
      optional("ReservedInstancesModificationIds") => list(String.t()())
    }
  """

  @spec describe_reserved_instances_modifications(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_reserved_instances_modifications_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_reserved_instances_modifications(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeReservedInstancesModifications", input, options)
  end

  @doc """
  Describes Reserved Instance offerings that are available for purchase. With
  Reserved Instances, you purchase the right to launch instances for a period of
  time. During that time period, you do not receive insufficient capacity
  errors, and you pay a lower usage rate than the rate charged for On-Demand
  instances for the actual time used. If you have listed your own Reserved
  Instances for sale in the Reserved Instance Marketplace, they will be excluded
  from these results. This is to ensure that you do not purchase your own
  Reserved Instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeReservedInstancesOfferings&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_reserved_instances_offerings_request`)
    %{
      optional("AvailabilityZone") => String.t(),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IncludeMarketplace") => boolean(),
      optional("InstanceTenancy") => list(any()),
      optional("InstanceType") => list(any()),
      optional("MaxDuration") => float(),
      optional("MaxInstanceCount") => integer(),
      optional("MaxResults") => integer(),
      optional("MinDuration") => float(),
      optional("NextToken") => String.t(),
      optional("OfferingClass") => list(any()),
      optional("OfferingType") => list(any()),
      optional("ProductDescription") => list(any()),
      optional("ReservedInstancesOfferingIds") => list(String.t()())
    }
  """

  @spec describe_reserved_instances_offerings(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_reserved_instances_offerings_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_reserved_instances_offerings(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeReservedInstancesOfferings", input, options)
  end

  @doc """
  Describes your route tables. The default is to describe all your route tables.
  Alternatively, you can specify specific route table IDs or filter the results
  to include only the route tables that match specific criteria. Each subnet in
  your VPC must be associated with a route table. If a subnet is not explicitly
  associated with any route table, it is implicitly associated with the main
  route table. This command does not return the subnet ID for implicit
  associations.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeRouteTables&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_route_tables_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("RouteTableIds") => list(String.t()())
    }
  """

  @spec describe_route_tables(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_route_tables_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_route_tables(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeRouteTables", input, options)
  end

  @doc """
  Finds available schedules that meet the specified criteria. You can search for
  an available schedule no more than 3 months in advance. You must meet the
  minimum required duration of 1,200 hours per year. For example, the minimum
  daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the
  minimum monthly schedule is 100 hours.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeScheduledInstanceAvailability&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_scheduled_instance_availability_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("MaxSlotDurationInHours") => integer(),
      optional("MinSlotDurationInHours") => integer(),
      optional("NextToken") => String.t(),
      required("FirstSlotStartTimeRange") => slot_date_time_range_request(),
      required("Recurrence") => scheduled_instance_recurrence_request()
    }
  """

  @spec describe_scheduled_instance_availability(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_scheduled_instance_availability_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_scheduled_instance_availability(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeScheduledInstanceAvailability", input, options)
  end

  @doc """
  Describes the specified Scheduled Instances or all your Scheduled Instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeScheduledInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_scheduled_instances_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("ScheduledInstanceIds") => list(String.t()()),
      optional("SlotStartTimeRange") => slot_start_time_range_request()
    }
  """

  @spec describe_scheduled_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_scheduled_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_scheduled_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeScheduledInstances", input, options)
  end

  @doc """
  Describes the VPCs on the other side of a VPC peering connection that are
  referencing the security groups you've specified in this request.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSecurityGroupReferences&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_security_group_references_request`)
    %{
      optional("DryRun") => boolean(),
      required("GroupId") => list(String.t()())
    }
  """

  @spec describe_security_group_references(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_security_group_references_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_security_group_references(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSecurityGroupReferences", input, options)
  end

  @doc """
  Describes one or more of your security group rules.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSecurityGroupRules&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_security_group_rules_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("SecurityGroupRuleIds") => list(String.t()())
    }
  """

  @spec describe_security_group_rules(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_security_group_rules_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_security_group_rules(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSecurityGroupRules", input, options)
  end

  @doc """
  Describes the specified security groups or all of your security groups.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSecurityGroups&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_security_groups_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("GroupIds") => list(String.t()()),
      optional("GroupNames") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_security_groups(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_security_groups_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_security_groups(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSecurityGroups", input, options)
  end

  @doc """
  Describes the specified attribute of the specified snapshot. You can specify
  only one attribute at a time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSnapshotAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_snapshot_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("SnapshotId") => String.t()
    }
  """

  @spec describe_snapshot_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_snapshot_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_snapshot_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSnapshotAttribute", input, options)
  end

  @doc """
  Describes the storage tier status of one or more Amazon EBS snapshots.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSnapshotTierStatus&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_snapshot_tier_status_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_snapshot_tier_status(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_snapshot_tier_status_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_snapshot_tier_status(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSnapshotTierStatus", input, options)
  end

  @doc """
  Describes the specified EBS snapshots available to you or all of the EBS
  snapshots available to you. The snapshots available to you include public
  snapshots, private snapshots that you own, and private snapshots owned by
  other Amazon Web Services accounts for which you have explicit create volume
  permissions.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSnapshots&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_snapshots_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("OwnerIds") => list(String.t()()),
      optional("RestorableByUserIds") => list(String.t()()),
      optional("SnapshotIds") => list(String.t()())
    }
  """

  @spec describe_snapshots(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_snapshots_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_snapshots(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSnapshots", input, options)
  end

  @doc """
  Describes the data feed for Spot Instances. For more information, see [Spot
  Instance data
  feed](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSpotDatafeedSubscription&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_spot_datafeed_subscription_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec describe_spot_datafeed_subscription(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_spot_datafeed_subscription_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_spot_datafeed_subscription(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSpotDatafeedSubscription", input, options)
  end

  @doc """
  Describes the running instances for the specified Spot Fleet.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSpotFleetInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_spot_fleet_instances_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("SpotFleetRequestId") => String.t()
    }
  """

  @spec describe_spot_fleet_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_spot_fleet_instances_response(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_spot_fleet_instances(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSpotFleetInstances", input, options)
  end

  @doc """
  Describes the events for the specified Spot Fleet request during the specified
  time. Spot Fleet events are delayed by up to 30 seconds before they can be
  described. This ensures that you can query by the last evaluated time and not
  miss a recorded event. Spot Fleet events are available for 48 hours.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSpotFleetRequestHistory&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_spot_fleet_request_history_request`)
    %{
      optional("DryRun") => boolean(),
      optional("EventType") => list(any()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("SpotFleetRequestId") => String.t(),
      required("StartTime") => non_neg_integer()
    }
  """

  @spec describe_spot_fleet_request_history(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_spot_fleet_request_history_response(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_spot_fleet_request_history(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSpotFleetRequestHistory", input, options)
  end

  @doc """
  Describes your Spot Fleet requests.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSpotFleetRequests&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_spot_fleet_requests_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("SpotFleetRequestIds") => list(String.t()())
    }
  """

  @spec describe_spot_fleet_requests(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_spot_fleet_requests_response(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_spot_fleet_requests(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSpotFleetRequests", input, options)
  end

  @doc """
  Describes the specified Spot Instance requests. You can use
  `DescribeSpotInstanceRequests` to find a running Spot Instance by examining
  the response. If the status of the Spot Instance is `fulfilled`, the instance
  ID appears in the response and contains the identifier of the instance.
  Alternatively, you can use
  [DescribeInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances)
  with a filter to look for instances where the instance lifecycle is `spot`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSpotInstanceRequests&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_spot_instance_requests_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("SpotInstanceRequestIds") => list(String.t()())
    }
  """

  @spec describe_spot_instance_requests(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_spot_instance_requests_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_spot_instance_requests(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSpotInstanceRequests", input, options)
  end

  @doc """
  Describes the Spot price history. For more information, see [Spot Instance
  pricing
  history](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSpotPriceHistory&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_spot_price_history_request`)
    %{
      optional("AvailabilityZone") => String.t(),
      optional("DryRun") => boolean(),
      optional("EndTime") => non_neg_integer(),
      optional("Filters") => list(filter()()),
      optional("InstanceTypes") => list(list(any())()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("ProductDescriptions") => list(String.t()()),
      optional("StartTime") => non_neg_integer()
    }
  """

  @spec describe_spot_price_history(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_spot_price_history_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_spot_price_history(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSpotPriceHistory", input, options)
  end

  @doc """
  Describes the stale security group rules for security groups in a specified VPC.
  Rules are stale when they reference a deleted security group in the same VPC
  or peered VPC. Rules can also be stale if they reference a security group in a
  peer VPC for which the VPC peering connection has been deleted.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeStaleSecurityGroups&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_stale_security_groups_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec describe_stale_security_groups(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_stale_security_groups_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_stale_security_groups(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeStaleSecurityGroups", input, options)
  end

  @doc """
  Describes the progress of the AMI store tasks. You can describe the store tasks
  for specified AMIs. If you don't specify the AMIs, you get a paginated list of
  store tasks from the last 31 days. For each AMI task, the response indicates
  if the task is `InProgress`, `Completed`, or `Failed`. For tasks `InProgress`,
  the response shows the estimated progress as a percentage.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeStoreImageTasks&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_store_image_tasks_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("ImageIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_store_image_tasks(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_store_image_tasks_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_store_image_tasks(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeStoreImageTasks", input, options)
  end

  @doc """
  Describes your subnets. The default is to describe all your subnets.
  Alternatively, you can specify specific subnet IDs or filter the results to
  include only the subnets that match specific criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeSubnets&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_subnets_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("SubnetIds") => list(String.t()())
    }
  """

  @spec describe_subnets(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_subnets_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_subnets(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeSubnets", input, options)
  end

  @doc """
  Describes the specified tags for your EC2 resources. For more information about
  tags, see [Tag your Amazon EC2
  resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html)
  in the *Amazon Elastic Compute Cloud User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTags&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_tags_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_tags(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_tags_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_tags(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTags", input, options)
  end

  @doc """
  Describe traffic mirror filters that determine the traffic that is mirrored.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTrafficMirrorFilterRules&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_traffic_mirror_filter_rules_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TrafficMirrorFilterId") => String.t(),
      optional("TrafficMirrorFilterRuleIds") => list(String.t()())
    }
  """

  @spec describe_traffic_mirror_filter_rules(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_traffic_mirror_filter_rules_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_traffic_mirror_filter_rules(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTrafficMirrorFilterRules", input, options)
  end

  @doc """
  Describes one or more Traffic Mirror filters.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTrafficMirrorFilters&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_traffic_mirror_filters_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TrafficMirrorFilterIds") => list(String.t()())
    }
  """

  @spec describe_traffic_mirror_filters(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_traffic_mirror_filters_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_traffic_mirror_filters(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTrafficMirrorFilters", input, options)
  end

  @doc """
  Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror
  sessions are described. Alternatively, you can filter the results.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTrafficMirrorSessions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_traffic_mirror_sessions_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TrafficMirrorSessionIds") => list(String.t()())
    }
  """

  @spec describe_traffic_mirror_sessions(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_traffic_mirror_sessions_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_traffic_mirror_sessions(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTrafficMirrorSessions", input, options)
  end

  @doc """
  Information about one or more Traffic Mirror targets.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTrafficMirrorTargets&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_traffic_mirror_targets_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TrafficMirrorTargetIds") => list(String.t()())
    }
  """

  @spec describe_traffic_mirror_targets(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_traffic_mirror_targets_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_traffic_mirror_targets(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTrafficMirrorTargets", input, options)
  end

  @doc """
  Describes one or more attachments between resources and transit gateways. By
  default, all attachments are described. Alternatively, you can filter the
  results by attachment ID, attachment state, resource ID, or resource owner.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayAttachments&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_attachments_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayAttachmentIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_attachments(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateway_attachments_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_attachments(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGatewayAttachments", input, options)
  end

  @doc """
  Describes one or more Connect peers.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayConnectPeers&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_connect_peers_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayConnectPeerIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_connect_peers(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateway_connect_peers_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_connect_peers(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGatewayConnectPeers", input, options)
  end

  @doc """
  Describes one or more Connect attachments.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayConnects&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_connects_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayAttachmentIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_connects(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateway_connects_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_connects(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGatewayConnects", input, options)
  end

  @doc """
  Describes one or more transit gateway multicast domains.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayMulticastDomains&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_multicast_domains_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayMulticastDomainIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_multicast_domains(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateway_multicast_domains_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_multicast_domains(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGatewayMulticastDomains", input, options)
  end

  @doc """
  Describes your transit gateway peering attachments.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayPeeringAttachments&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_peering_attachments_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayAttachmentIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_peering_attachments(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateway_peering_attachments_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_peering_attachments(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGatewayPeeringAttachments", input, options)
  end

  @doc """
  Describes one or more transit gateway route policy tables.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayPolicyTables&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_policy_tables_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayPolicyTableIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_policy_tables(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateway_policy_tables_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_policy_tables(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGatewayPolicyTables", input, options)
  end

  @doc """
  Describes one or more transit gateway route table advertisements.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayRouteTableAnnouncements&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_route_table_announcements_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayRouteTableAnnouncementIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_route_table_announcements(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_transit_gateway_route_table_announcements_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_route_table_announcements(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeTransitGatewayRouteTableAnnouncements",
      input,
      options
    )
  end

  @doc """
  Describes one or more transit gateway route tables. By default, all transit
  gateway route tables are described. Alternatively, you can filter the results.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayRouteTables&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_route_tables_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayRouteTableIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_route_tables(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateway_route_tables_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_route_tables(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGatewayRouteTables", input, options)
  end

  @doc """
  Describes one or more VPC attachments. By default, all VPC attachments are
  described. Alternatively, you can filter the results.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGatewayVpcAttachments&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateway_vpc_attachments_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayAttachmentIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateway_vpc_attachments(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateway_vpc_attachments_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateway_vpc_attachments(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGatewayVpcAttachments", input, options)
  end

  @doc """
  Describes one or more transit gateways. By default, all transit gateways are
  described. Alternatively, you can filter the results.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTransitGateways&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_transit_gateways_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TransitGatewayIds") => list(String.t()())
    }
  """

  @spec describe_transit_gateways(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_transit_gateways_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_transit_gateways(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTransitGateways", input, options)
  end

  @doc """
  Describes one or more network interface trunk associations.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeTrunkInterfaceAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_trunk_interface_associations_request`)
    %{
      optional("AssociationIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_trunk_interface_associations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_trunk_interface_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_trunk_interface_associations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeTrunkInterfaceAssociations", input, options)
  end

  @doc """
  Describes the specified Amazon Web Services Verified Access endpoints.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVerifiedAccessEndpoints&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_verified_access_endpoints_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VerifiedAccessEndpointIds") => list(String.t()()),
      optional("VerifiedAccessGroupId") => String.t(),
      optional("VerifiedAccessInstanceId") => String.t()
    }
  """

  @spec describe_verified_access_endpoints(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_verified_access_endpoints_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_verified_access_endpoints(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVerifiedAccessEndpoints", input, options)
  end

  @doc """
  Describes the specified Verified Access groups.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVerifiedAccessGroups&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_verified_access_groups_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VerifiedAccessGroupIds") => list(String.t()()),
      optional("VerifiedAccessInstanceId") => String.t()
    }
  """

  @spec describe_verified_access_groups(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_verified_access_groups_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_verified_access_groups(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVerifiedAccessGroups", input, options)
  end

  @doc """
  Describes the specified Amazon Web Services Verified Access instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVerifiedAccessInstanceLoggingConfigurations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_verified_access_instance_logging_configurations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VerifiedAccessInstanceIds") => list(String.t()())
    }
  """

  @spec describe_verified_access_instance_logging_configurations(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_verified_access_instance_logging_configurations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_verified_access_instance_logging_configurations(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeVerifiedAccessInstanceLoggingConfigurations",
      input,
      options
    )
  end

  @doc """
  Describes the specified Amazon Web Services Verified Access instances.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVerifiedAccessInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_verified_access_instances_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VerifiedAccessInstanceIds") => list(String.t()())
    }
  """

  @spec describe_verified_access_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_verified_access_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_verified_access_instances(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVerifiedAccessInstances", input, options)
  end

  @doc """
  Describes the specified Amazon Web Services Verified Access trust providers.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVerifiedAccessTrustProviders&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_verified_access_trust_providers_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VerifiedAccessTrustProviderIds") => list(String.t()())
    }
  """

  @spec describe_verified_access_trust_providers(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_verified_access_trust_providers_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_verified_access_trust_providers(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVerifiedAccessTrustProviders", input, options)
  end

  @doc """
  Describes the specified attribute of the specified volume. You can specify only
  one attribute at a time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVolumeAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_volume_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("VolumeId") => String.t()
    }
  """

  @spec describe_volume_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_volume_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_volume_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVolumeAttribute", input, options)
  end

  @doc """
  Describes the status of the specified volumes. Volume status provides the result
  of the checks performed on your volumes to determine events that can impair
  the performance of your volumes. The performance of a volume can be affected
  if an issue occurs on the volume's underlying host. If the volume's underlying
  host experiences a power outage or system issue, after the system is restored,
  there could be data inconsistencies on the volume. Volume events notify you if
  this occurs. Volume actions notify you if any action needs to be taken in
  response to the event. The `DescribeVolumeStatus` operation provides the
  following information about the specified volumes:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVolumeStatus&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_volume_status_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VolumeIds") => list(String.t()())
    }
  """

  @spec describe_volume_status(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_volume_status_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_volume_status(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVolumeStatus", input, options)
  end

  @doc """
  Describes the specified EBS volumes or all of your EBS volumes. If you are
  describing a long list of volumes, we recommend that you paginate the output
  to make the list more manageable. For more information, see
  [Pagination](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination).
  For more information about EBS volumes, see [Amazon EBS
  volumes](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes.html) in
  the *Amazon EBS User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVolumes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_volumes_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VolumeIds") => list(String.t()())
    }
  """

  @spec describe_volumes(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_volumes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_volumes(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVolumes", input, options)
  end

  @doc """
  Describes the most recent volume modification request for the specified EBS
  volumes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVolumesModifications&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_volumes_modifications_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VolumeIds") => list(String.t()())
    }
  """

  @spec describe_volumes_modifications(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_volumes_modifications_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_volumes_modifications(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVolumesModifications", input, options)
  end

  @doc """
  Describes the specified attribute of the specified VPC. You can specify only one
  attribute at a time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("VpcId") => String.t()
    }
  """

  @spec describe_vpc_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcAttribute", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcClassicLink&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_classic_link_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("VpcIds") => list(String.t()())
    }
  """

  @spec describe_vpc_classic_link(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_classic_link_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_classic_link(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcClassicLink", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcClassicLinkDnsSupport&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_classic_link_dns_support_request`)
    %{
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VpcIds") => list(String.t()())
    }
  """

  @spec describe_vpc_classic_link_dns_support(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_classic_link_dns_support_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_classic_link_dns_support(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcClassicLinkDnsSupport", input, options)
  end

  @doc """
  Describes the connection notifications for VPC endpoints and VPC endpoint
  services.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcEndpointConnectionNotifications&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_endpoint_connection_notifications_request`)
    %{
      optional("ConnectionNotificationId") => String.t(),
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_vpc_endpoint_connection_notifications(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, describe_vpc_endpoint_connection_notifications_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_endpoint_connection_notifications(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DescribeVpcEndpointConnectionNotifications",
      input,
      options
    )
  end

  @doc """
  Describes the VPC endpoint connections to your VPC endpoint services, including
  any endpoints that are pending your acceptance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcEndpointConnections&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_endpoint_connections_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec describe_vpc_endpoint_connections(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_endpoint_connections_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_endpoint_connections(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcEndpointConnections", input, options)
  end

  @doc """
  Describes the VPC endpoint service configurations in your account (your
  services).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcEndpointServiceConfigurations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_endpoint_service_configurations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("ServiceIds") => list(String.t()())
    }
  """

  @spec describe_vpc_endpoint_service_configurations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_endpoint_service_configurations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_endpoint_service_configurations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcEndpointServiceConfigurations", input, options)
  end

  @doc """
  Describes the principals (service consumers) that are permitted to discover your
  VPC endpoint service.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcEndpointServicePermissions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_endpoint_service_permissions_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("ServiceId") => String.t()
    }
  """

  @spec describe_vpc_endpoint_service_permissions(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_endpoint_service_permissions_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_endpoint_service_permissions(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcEndpointServicePermissions", input, options)
  end

  @doc """
  Describes available services to which you can create a VPC endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcEndpointServices&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_endpoint_services_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("ServiceNames") => list(String.t()())
    }
  """

  @spec describe_vpc_endpoint_services(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_endpoint_services_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_endpoint_services(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcEndpointServices", input, options)
  end

  @doc """
  Describes your VPC endpoints. The default is to describe all your VPC endpoints.
  Alternatively, you can specify specific VPC endpoint IDs or filter the results
  to include only the VPC endpoints that match specific criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcEndpoints&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_endpoints_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VpcEndpointIds") => list(String.t()())
    }
  """

  @spec describe_vpc_endpoints(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_endpoints_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_endpoints(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcEndpoints", input, options)
  end

  @doc """
  Describes your VPC peering connections. The default is to describe all your VPC
  peering connections. Alternatively, you can specify specific VPC peering
  connection IDs or filter the results to include only the VPC peering
  connections that match specific criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcPeeringConnections&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpc_peering_connections_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VpcPeeringConnectionIds") => list(String.t()())
    }
  """

  @spec describe_vpc_peering_connections(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpc_peering_connections_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpc_peering_connections(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcPeeringConnections", input, options)
  end

  @doc """
  Describes your VPCs. The default is to describe all your VPCs. Alternatively,
  you can specify specific VPC IDs or filter the results to include only the
  VPCs that match specific criteria.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpcs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpcs_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("VpcIds") => list(String.t()())
    }
  """

  @spec describe_vpcs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpcs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpcs(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpcs", input, options)
  end

  @doc """
  Describes one or more of your VPN connections.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpnConnections&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpn_connections_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("VpnConnectionIds") => list(String.t()())
    }
  """

  @spec describe_vpn_connections(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpn_connections_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpn_connections(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpnConnections", input, options)
  end

  @doc """
  Describes one or more of your virtual private gateways.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DescribeVpnGateways&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:describe_vpn_gateways_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("VpnGatewayIds") => list(String.t()())
    }
  """

  @spec describe_vpn_gateways(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, describe_vpn_gateways_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def describe_vpn_gateways(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DescribeVpnGateways", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DetachClassicLinkVpc&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:detach_classic_link_vpc_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec detach_classic_link_vpc(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, detach_classic_link_vpc_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def detach_classic_link_vpc(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DetachClassicLinkVpc", input, options)
  end

  @doc """
  Detaches an internet gateway from a VPC, disabling connectivity between the
  internet and the VPC. The VPC must not contain any running instances with
  Elastic IP addresses or public IPv4 addresses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DetachInternetGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:detach_internet_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("InternetGatewayId") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec detach_internet_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def detach_internet_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DetachInternetGateway", input, options)
  end

  @doc """
  Detaches a network interface from an instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DetachNetworkInterface&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:detach_network_interface_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Force") => boolean(),
      required("AttachmentId") => String.t()
    }
  """

  @spec detach_network_interface(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def detach_network_interface(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DetachNetworkInterface", input, options)
  end

  @doc """
  Detaches the specified Amazon Web Services Verified Access trust provider from
  the specified Amazon Web Services Verified Access instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DetachVerifiedAccessTrustProvider&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:detach_verified_access_trust_provider_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("VerifiedAccessInstanceId") => String.t(),
      required("VerifiedAccessTrustProviderId") => String.t()
    }
  """

  @spec detach_verified_access_trust_provider(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, detach_verified_access_trust_provider_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def detach_verified_access_trust_provider(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DetachVerifiedAccessTrustProvider", input, options)
  end

  @doc """
  Detaches an EBS volume from an instance. Make sure to unmount any file systems
  on the device within your operating system before detaching the volume.
  Failure to do so can result in the volume becoming stuck in the `busy` state
  while detaching. If this happens, detachment can be delayed indefinitely until
  you unmount the volume, force detachment, reboot the instance, or all three.
  If an EBS volume is the root device of an instance, it can't be detached while
  the instance is running. To detach the root volume, stop the instance first.
  When a volume with an Amazon Web Services Marketplace product code is detached
  from an instance, the product code is no longer associated with the instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DetachVolume&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:detach_volume_request`)
    %{
      optional("Device") => String.t(),
      optional("DryRun") => boolean(),
      optional("Force") => boolean(),
      optional("InstanceId") => String.t(),
      required("VolumeId") => String.t()
    }
  """

  @spec detach_volume(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, volume_attachment(), any()}
          | {:error, {:unexpected_response, any()}}

  def detach_volume(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DetachVolume", input, options)
  end

  @doc """
  Detaches a virtual private gateway from a VPC. You do this if you're planning to
  turn off the VPC and not use it anymore. You can confirm a virtual private
  gateway has been completely detached from a VPC by describing the virtual
  private gateway (any attachments to the virtual private gateway are also
  described).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DetachVpnGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:detach_vpn_gateway_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcId") => String.t(),
      required("VpnGatewayId") => String.t()
    }
  """

  @spec detach_vpn_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def detach_vpn_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DetachVpnGateway", input, options)
  end

  @doc """
  Disables Elastic IP address transfer. For more information, see [Transfer
  Elastic IP
  addresses](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableAddressTransfer&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_address_transfer_request`)
    %{
      optional("DryRun") => boolean(),
      required("AllocationId") => String.t()
    }
  """

  @spec disable_address_transfer(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_address_transfer_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_address_transfer(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableAddressTransfer", input, options)
  end

  @doc """
  Disables Infrastructure Performance metric subscriptions.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableAwsNetworkPerformanceMetricSubscription&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_aws_network_performance_metric_subscription_request`)
    %{
      optional("Destination") => String.t(),
      optional("DryRun") => boolean(),
      optional("Metric") => list(any()),
      optional("Source") => String.t(),
      optional("Statistic") => list(any())
    }
  """

  @spec disable_aws_network_performance_metric_subscription(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, disable_aws_network_performance_metric_subscription_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_aws_network_performance_metric_subscription(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DisableAwsNetworkPerformanceMetricSubscription",
      input,
      options
    )
  end

  @doc """
  Disables EBS encryption by default for your account in the current Region. After
  you disable encryption by default, you can still create encrypted volumes by
  enabling encryption when you create each volume.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableEbsEncryptionByDefault&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_ebs_encryption_by_default_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec disable_ebs_encryption_by_default(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_ebs_encryption_by_default_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_ebs_encryption_by_default(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableEbsEncryptionByDefault", input, options)
  end

  @doc """
  Discontinue Windows fast launch for a Windows AMI, and clean up existing
  pre-provisioned snapshots. After you disable Windows fast launch, the AMI uses
  the standard launch process for each new instance. Amazon EC2 must remove all
  pre-provisioned snapshots before you can enable Windows fast launch again.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableFastLaunch&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_fast_launch_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Force") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec disable_fast_launch(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_fast_launch_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_fast_launch(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableFastLaunch", input, options)
  end

  @doc """
  Disables fast snapshot restores for the specified snapshots in the specified
  Availability Zones.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableFastSnapshotRestores&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_fast_snapshot_restores_request`)
    %{
      optional("DryRun") => boolean(),
      required("AvailabilityZones") => list(String.t()()),
      required("SourceSnapshotIds") => list(String.t()())
    }
  """

  @spec disable_fast_snapshot_restores(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_fast_snapshot_restores_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_fast_snapshot_restores(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableFastSnapshotRestores", input, options)
  end

  @doc """
  Sets the AMI state to `disabled` and removes all launch permissions from the
  AMI. A disabled AMI can't be used for instance launches. A disabled AMI can't
  be shared. If an AMI was public or previously shared, it is made private. If
  an AMI was shared with an Amazon Web Services account, organization, or
  Organizational Unit, they lose access to the disabled AMI.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_image_request`)
    %{
      optional("DryRun") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec disable_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableImage", input, options)
  end

  @doc """
  Disables *block public access for AMIs* at the account level in the specified
  Amazon Web Services Region. This removes the *block public access* restriction
  from your account. With the restriction removed, you can publicly share your
  AMIs in the specified Amazon Web Services Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableImageBlockPublicAccess&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_image_block_public_access_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec disable_image_block_public_access(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_image_block_public_access_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_image_block_public_access(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableImageBlockPublicAccess", input, options)
  end

  @doc """
  Cancels the deprecation of the specified AMI.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableImageDeprecation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_image_deprecation_request`)
    %{
      optional("DryRun") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec disable_image_deprecation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_image_deprecation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_image_deprecation(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableImageDeprecation", input, options)
  end

  @doc """
  Disables deregistration protection for an AMI. When deregistration protection is
  disabled, the AMI can be deregistered. If you chose to include a 24-hour
  cooldown period when you enabled deregistration protection for the AMI, then,
  when you disable deregistration protection, you won’t immediately be able to
  deregister the AMI.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableImageDeregistrationProtection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_image_deregistration_protection_request`)
    %{
      optional("DryRun") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec disable_image_deregistration_protection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_image_deregistration_protection_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_image_deregistration_protection(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableImageDeregistrationProtection", input, options)
  end

  @doc """
  Disable the IPAM account. For more information, see [Enable integration with
  Organizations](https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html)
  in the *Amazon VPC IPAM User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableIpamOrganizationAdminAccount&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_ipam_organization_admin_account_request`)
    %{
      optional("DryRun") => boolean(),
      required("DelegatedAdminAccountId") => String.t()
    }
  """

  @spec disable_ipam_organization_admin_account(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_ipam_organization_admin_account_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_ipam_organization_admin_account(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableIpamOrganizationAdminAccount", input, options)
  end

  @doc """
  Disables access to the EC2 serial console of all instances for your account. By
  default, access to the EC2 serial console is disabled for your account. For
  more information, see [Manage account access to the EC2 serial
  console](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableSerialConsoleAccess&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_serial_console_access_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec disable_serial_console_access(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_serial_console_access_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_serial_console_access(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableSerialConsoleAccess", input, options)
  end

  @doc """
  Disables the *block public access for snapshots* setting at the account level
  for the specified Amazon Web Services Region. After you disable block public
  access for snapshots in a Region, users can publicly share snapshots in that
  Region. If block public access is enabled in `block-all-sharing` mode, and you
  disable block public access, all snapshots that were previously publicly
  shared are no longer treated as private and they become publicly accessible
  again.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableSnapshotBlockPublicAccess&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_snapshot_block_public_access_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec disable_snapshot_block_public_access(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_snapshot_block_public_access_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_snapshot_block_public_access(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableSnapshotBlockPublicAccess", input, options)
  end

  @doc """
  Disables the specified resource attachment from propagating routes to the
  specified propagation route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableTransitGatewayRouteTablePropagation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_transit_gateway_route_table_propagation_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TransitGatewayAttachmentId") => String.t(),
      optional("TransitGatewayRouteTableAnnouncementId") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec disable_transit_gateway_route_table_propagation(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, disable_transit_gateway_route_table_propagation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_transit_gateway_route_table_propagation(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DisableTransitGatewayRouteTablePropagation",
      input,
      options
    )
  end

  @doc """
  Disables a virtual private gateway (VGW) from propagating routes to a specified
  route table of a VPC.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableVgwRoutePropagation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_vgw_route_propagation_request`)
    %{
      optional("DryRun") => boolean(),
      required("GatewayId") => String.t(),
      required("RouteTableId") => String.t()
    }
  """

  @spec disable_vgw_route_propagation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def disable_vgw_route_propagation(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableVgwRoutePropagation", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableVpcClassicLink&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_vpc_classic_link_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcId") => String.t()
    }
  """

  @spec disable_vpc_classic_link(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_vpc_classic_link_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_vpc_classic_link(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableVpcClassicLink", input, options)
  end

  @doc """
  This action is deprecated. Disables ClassicLink DNS support for a VPC. If
  disabled, DNS hostnames resolve to public IP addresses when addressed between
  a linked EC2-Classic instance and instances in the VPC to which it's linked.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisableVpcClassicLinkDnsSupport&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disable_vpc_classic_link_dns_support_request`)
    %{
      optional("VpcId") => String.t()
    }
  """

  @spec disable_vpc_classic_link_dns_support(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disable_vpc_classic_link_dns_support_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disable_vpc_classic_link_dns_support(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisableVpcClassicLinkDnsSupport", input, options)
  end

  @doc """
  Disassociates an Elastic IP address from the instance or network interface it's
  associated with.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateAddress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_address_request`)
    %{
      optional("AssociationId") => String.t(),
      optional("DryRun") => boolean(),
      optional("PublicIp") => String.t()
    }
  """

  @spec disassociate_address(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_address(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateAddress", input, options)
  end

  @doc """
  Disassociates a target network from the specified Client VPN endpoint. When you
  disassociate the last target network from a Client VPN, the following happens:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateClientVpnTargetNetwork&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_client_vpn_target_network_request`)
    %{
      optional("DryRun") => boolean(),
      required("AssociationId") => String.t(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec disassociate_client_vpn_target_network(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_client_vpn_target_network_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_client_vpn_target_network(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateClientVpnTargetNetwork", input, options)
  end

  @doc """
  Disassociates an IAM role from an Certificate Manager (ACM) certificate.
  Disassociating an IAM role from an ACM certificate removes the Amazon S3
  object that contains the certificate, certificate chain, and encrypted private
  key from the Amazon S3 bucket. It also revokes the IAM role's permission to
  use the KMS key used to encrypt the private key. This effectively revokes the
  role's permission to use the certificate.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateEnclaveCertificateIamRole&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_enclave_certificate_iam_role_request`)
    %{
      optional("DryRun") => boolean(),
      required("CertificateArn") => String.t(),
      required("RoleArn") => String.t()
    }
  """

  @spec disassociate_enclave_certificate_iam_role(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_enclave_certificate_iam_role_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_enclave_certificate_iam_role(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateEnclaveCertificateIamRole", input, options)
  end

  @doc """
  Disassociates an IAM instance profile from a running or stopped instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateIamInstanceProfile&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_iam_instance_profile_request`)
    %{
      required("AssociationId") => String.t()
    }
  """

  @spec disassociate_iam_instance_profile(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_iam_instance_profile_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_iam_instance_profile(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateIamInstanceProfile", input, options)
  end

  @doc """
  Disassociates one or more targets from an event window.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateInstanceEventWindow&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_instance_event_window_request`)
    %{
      optional("DryRun") => boolean(),
      required("AssociationTarget") => instance_event_window_disassociation_request(),
      required("InstanceEventWindowId") => String.t()
    }
  """

  @spec disassociate_instance_event_window(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_instance_event_window_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_instance_event_window(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateInstanceEventWindow", input, options)
  end

  @doc """
  Remove the association between your Autonomous System Number (ASN) and your
  BYOIP CIDR. You may want to use this action to disassociate an ASN from a CIDR
  or if you want to swap ASNs. For more information, see [Tutorial: Bring your
  ASN to
  IPAM](https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html) in
  the *Amazon VPC IPAM guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateIpamByoasn&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_ipam_byoasn_request`)
    %{
      optional("DryRun") => boolean(),
      required("Asn") => String.t(),
      required("Cidr") => String.t()
    }
  """

  @spec disassociate_ipam_byoasn(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_ipam_byoasn_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_ipam_byoasn(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateIpamByoasn", input, options)
  end

  @doc """
  Disassociates a resource discovery from an Amazon VPC IPAM. A resource discovery
  is an IPAM component that enables IPAM to manage and monitor resources that
  belong to the owning account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateIpamResourceDiscovery&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_ipam_resource_discovery_request`)
    %{
      optional("DryRun") => boolean(),
      required("IpamResourceDiscoveryAssociationId") => String.t()
    }
  """

  @spec disassociate_ipam_resource_discovery(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_ipam_resource_discovery_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_ipam_resource_discovery(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateIpamResourceDiscovery", input, options)
  end

  @doc """
  Disassociates secondary Elastic IP addresses (EIPs) from a public NAT gateway.
  You cannot disassociate your primary EIP. For more information, see [Edit
  secondary IP address
  associations](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-edit-secondary)
  in the *Amazon VPC User Guide*. While disassociating is in progress, you
  cannot associate/disassociate additional EIPs while the connections are being
  drained. You are, however, allowed to delete the NAT gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateNatGatewayAddress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_nat_gateway_address_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxDrainDurationSeconds") => integer(),
      required("AssociationIds") => list(String.t()()),
      required("NatGatewayId") => String.t()
    }
  """

  @spec disassociate_nat_gateway_address(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_nat_gateway_address_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_nat_gateway_address(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateNatGatewayAddress", input, options)
  end

  @doc """
  Disassociates a subnet or gateway from a route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("AssociationId") => String.t()
    }
  """

  @spec disassociate_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_route_table(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateRouteTable", input, options)
  end

  @doc """
  Disassociates a CIDR block from a subnet. Currently, you can disassociate an
  IPv6 CIDR block only. You must detach or delete all gateways and resources
  that are associated with the CIDR block before you can disassociate it.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateSubnetCidrBlock&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_subnet_cidr_block_request`)
    %{
      required("AssociationId") => String.t()
    }
  """

  @spec disassociate_subnet_cidr_block(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_subnet_cidr_block_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_subnet_cidr_block(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateSubnetCidrBlock", input, options)
  end

  @doc """
  Disassociates the specified subnets from the transit gateway multicast domain.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateTransitGatewayMulticastDomain&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_transit_gateway_multicast_domain_request`)
    %{
      optional("DryRun") => boolean(),
      required("SubnetIds") => list(String.t()()),
      required("TransitGatewayAttachmentId") => String.t(),
      required("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec disassociate_transit_gateway_multicast_domain(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_transit_gateway_multicast_domain_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_transit_gateway_multicast_domain(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "DisassociateTransitGatewayMulticastDomain",
      input,
      options
    )
  end

  @doc """
  Removes the association between an an attachment and a policy table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateTransitGatewayPolicyTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_transit_gateway_policy_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t(),
      required("TransitGatewayPolicyTableId") => String.t()
    }
  """

  @spec disassociate_transit_gateway_policy_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_transit_gateway_policy_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_transit_gateway_policy_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateTransitGatewayPolicyTable", input, options)
  end

  @doc """
  Disassociates a resource attachment from a transit gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateTransitGatewayRouteTable&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_transit_gateway_route_table_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec disassociate_transit_gateway_route_table(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_transit_gateway_route_table_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_transit_gateway_route_table(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateTransitGatewayRouteTable", input, options)
  end

  @doc """
  Removes an association between a branch network interface with a trunk network
  interface.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateTrunkInterface&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_trunk_interface_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("AssociationId") => String.t()
    }
  """

  @spec disassociate_trunk_interface(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_trunk_interface_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_trunk_interface(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateTrunkInterface", input, options)
  end

  @doc """
  Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must
  specify its association ID. You can get the association ID by using
  `DescribeVpcs`. You must detach or delete all gateways and resources that are
  associated with the CIDR block before you can disassociate it.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20DisassociateVpcCidrBlock&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:disassociate_vpc_cidr_block_request`)
    %{
      required("AssociationId") => String.t()
    }
  """

  @spec disassociate_vpc_cidr_block(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, disassociate_vpc_cidr_block_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def disassociate_vpc_cidr_block(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "DisassociateVpcCidrBlock", input, options)
  end

  @doc """
  Enables Elastic IP address transfer. For more information, see [Transfer Elastic
  IP
  addresses](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableAddressTransfer&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_address_transfer_request`)
    %{
      optional("DryRun") => boolean(),
      required("AllocationId") => String.t(),
      required("TransferAccountId") => String.t()
    }
  """

  @spec enable_address_transfer(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_address_transfer_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_address_transfer(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableAddressTransfer", input, options)
  end

  @doc """
  Enables Infrastructure Performance subscriptions.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableAwsNetworkPerformanceMetricSubscription&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_aws_network_performance_metric_subscription_request`)
    %{
      optional("Destination") => String.t(),
      optional("DryRun") => boolean(),
      optional("Metric") => list(any()),
      optional("Source") => String.t(),
      optional("Statistic") => list(any())
    }
  """

  @spec enable_aws_network_performance_metric_subscription(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, enable_aws_network_performance_metric_subscription_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_aws_network_performance_metric_subscription(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "EnableAwsNetworkPerformanceMetricSubscription",
      input,
      options
    )
  end

  @doc """
  Enables EBS encryption by default for your account in the current Region. After
  you enable encryption by default, the EBS volumes that you create are always
  encrypted, either using the default KMS key or the KMS key that you specified
  when you created each volume. For more information, see [Amazon EBS
  encryption](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html)
  in the *Amazon EBS User Guide*. You can specify the default KMS key for
  encryption by default using `ModifyEbsDefaultKmsKeyId` or
  `ResetEbsDefaultKmsKeyId`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableEbsEncryptionByDefault&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_ebs_encryption_by_default_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec enable_ebs_encryption_by_default(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_ebs_encryption_by_default_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_ebs_encryption_by_default(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableEbsEncryptionByDefault", input, options)
  end

  @doc """
  When you enable Windows fast launch for a Windows AMI, images are
  pre-provisioned, using snapshots to launch instances up to 65% faster. To
  create the optimized Windows image, Amazon EC2 launches an instance and runs
  through Sysprep steps, rebooting as required. Then it creates a set of
  reserved snapshots that are used for subsequent launches. The reserved
  snapshots are automatically replenished as they are used, depending on your
  settings for launch frequency.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableFastLaunch&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_fast_launch_request`)
    %{
      optional("DryRun") => boolean(),
      optional("LaunchTemplate") => fast_launch_launch_template_specification_request(),
      optional("MaxParallelLaunches") => integer(),
      optional("ResourceType") => String.t(),
      optional("SnapshotConfiguration") => fast_launch_snapshot_configuration_request(),
      required("ImageId") => String.t()
    }
  """

  @spec enable_fast_launch(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_fast_launch_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_fast_launch(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableFastLaunch", input, options)
  end

  @doc """
  Enables fast snapshot restores for the specified snapshots in the specified
  Availability Zones. You get the full benefit of fast snapshot restores after
  they enter the `enabled` state. To get the current state of fast snapshot
  restores, use `DescribeFastSnapshotRestores`. To disable fast snapshot
  restores, use `DisableFastSnapshotRestores`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableFastSnapshotRestores&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_fast_snapshot_restores_request`)
    %{
      optional("DryRun") => boolean(),
      required("AvailabilityZones") => list(String.t()()),
      required("SourceSnapshotIds") => list(String.t()())
    }
  """

  @spec enable_fast_snapshot_restores(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_fast_snapshot_restores_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_fast_snapshot_restores(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableFastSnapshotRestores", input, options)
  end

  @doc """
  Re-enables a disabled AMI. The re-enabled AMI is marked as `available` and can
  be used for instance launches, appears in describe operations, and can be
  shared. Amazon Web Services accounts, organizations, and Organizational Units
  that lost access to the AMI when it was disabled do not regain access
  automatically. Once the AMI is available, it can be shared with them again.
  Only the AMI owner can re-enable a disabled AMI.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_image_request`)
    %{
      optional("DryRun") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec enable_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableImage", input, options)
  end

  @doc """
  Enables *block public access for AMIs* at the account level in the specified
  Amazon Web Services Region. This prevents the public sharing of your AMIs.
  However, if you already have public AMIs, they will remain publicly available.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableImageBlockPublicAccess&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_image_block_public_access_request`)
    %{
      optional("DryRun") => boolean(),
      required("ImageBlockPublicAccessState") => list(any())
    }
  """

  @spec enable_image_block_public_access(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_image_block_public_access_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_image_block_public_access(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableImageBlockPublicAccess", input, options)
  end

  @doc """
  Enables deprecation of the specified AMI at the specified date and time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableImageDeprecation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_image_deprecation_request`)
    %{
      optional("DryRun") => boolean(),
      required("DeprecateAt") => non_neg_integer(),
      required("ImageId") => String.t()
    }
  """

  @spec enable_image_deprecation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_image_deprecation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_image_deprecation(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableImageDeprecation", input, options)
  end

  @doc """
  Enables deregistration protection for an AMI. When deregistration protection is
  enabled, the AMI can't be deregistered. To allow the AMI to be deregistered,
  you must first disable deregistration protection using
  `DisableImageDeregistrationProtection`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableImageDeregistrationProtection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_image_deregistration_protection_request`)
    %{
      optional("DryRun") => boolean(),
      optional("WithCooldown") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec enable_image_deregistration_protection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_image_deregistration_protection_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_image_deregistration_protection(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableImageDeregistrationProtection", input, options)
  end

  @doc """
  Enable an Organizations member account as the IPAM admin account. You cannot
  select the Organizations management account as the IPAM admin account. For
  more information, see [Enable integration with
  Organizations](https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html)
  in the *Amazon VPC IPAM User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableIpamOrganizationAdminAccount&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_ipam_organization_admin_account_request`)
    %{
      optional("DryRun") => boolean(),
      required("DelegatedAdminAccountId") => String.t()
    }
  """

  @spec enable_ipam_organization_admin_account(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_ipam_organization_admin_account_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_ipam_organization_admin_account(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableIpamOrganizationAdminAccount", input, options)
  end

  @doc """
  Establishes a trust relationship between Reachability Analyzer and
  Organizations. This operation must be performed by the management account for
  the organization.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableReachabilityAnalyzerOrganizationSharing&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_reachability_analyzer_organization_sharing_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec enable_reachability_analyzer_organization_sharing(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, enable_reachability_analyzer_organization_sharing_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_reachability_analyzer_organization_sharing(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "EnableReachabilityAnalyzerOrganizationSharing",
      input,
      options
    )
  end

  @doc """
  Enables access to the EC2 serial console of all instances for your account. By
  default, access to the EC2 serial console is disabled for your account. For
  more information, see [Manage account access to the EC2 serial
  console](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableSerialConsoleAccess&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_serial_console_access_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec enable_serial_console_access(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_serial_console_access_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_serial_console_access(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableSerialConsoleAccess", input, options)
  end

  @doc """
  Enables or modifies the *block public access for snapshots* setting at the
  account level for the specified Amazon Web Services Region. After you enable
  block public access for snapshots in a Region, users can no longer request
  public sharing for snapshots in that Region. Snapshots that are already
  publicly shared are either treated as private or they remain publicly shared,
  depending on the **State** that you specify. If block public access is enabled
  in `block-all-sharing` mode, and you change the mode to `block-new-sharing`,
  all snapshots that were previously publicly shared are no longer treated as
  private and they become publicly accessible again.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableSnapshotBlockPublicAccess&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_snapshot_block_public_access_request`)
    %{
      optional("DryRun") => boolean(),
      required("State") => list(any())
    }
  """

  @spec enable_snapshot_block_public_access(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_snapshot_block_public_access_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_snapshot_block_public_access(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableSnapshotBlockPublicAccess", input, options)
  end

  @doc """
  Enables the specified attachment to propagate routes to the specified
  propagation route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableTransitGatewayRouteTablePropagation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_transit_gateway_route_table_propagation_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TransitGatewayAttachmentId") => String.t(),
      optional("TransitGatewayRouteTableAnnouncementId") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec enable_transit_gateway_route_table_propagation(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, enable_transit_gateway_route_table_propagation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_transit_gateway_route_table_propagation(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "EnableTransitGatewayRouteTablePropagation",
      input,
      options
    )
  end

  @doc """
  Enables a virtual private gateway (VGW) to propagate routes to the specified
  route table of a VPC.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableVgwRoutePropagation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_vgw_route_propagation_request`)
    %{
      optional("DryRun") => boolean(),
      required("GatewayId") => String.t(),
      required("RouteTableId") => String.t()
    }
  """

  @spec enable_vgw_route_propagation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def enable_vgw_route_propagation(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableVgwRoutePropagation", input, options)
  end

  @doc """
  Enables I/O operations for a volume that had I/O operations disabled because the
  data on the volume was potentially inconsistent.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableVolumeIO&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_volume_i_o_request`)
    %{
      optional("DryRun") => boolean(),
      required("VolumeId") => String.t()
    }
  """

  @spec enable_volume_i_o(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def enable_volume_i_o(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableVolumeIO", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableVpcClassicLink&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_vpc_classic_link_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcId") => String.t()
    }
  """

  @spec enable_vpc_classic_link(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_vpc_classic_link_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_vpc_classic_link(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableVpcClassicLink", input, options)
  end

  @doc """
  This action is deprecated. Enables a VPC to support DNS hostname resolution for
  ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance
  resolves to its private IP address when addressed from an instance in the VPC
  to which it's linked. Similarly, the DNS hostname of an instance in a VPC
  resolves to its private IP address when addressed from a linked EC2-Classic
  instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20EnableVpcClassicLinkDnsSupport&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:enable_vpc_classic_link_dns_support_request`)
    %{
      optional("VpcId") => String.t()
    }
  """

  @spec enable_vpc_classic_link_dns_support(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, enable_vpc_classic_link_dns_support_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def enable_vpc_classic_link_dns_support(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "EnableVpcClassicLinkDnsSupport", input, options)
  end

  @doc """
  Downloads the client certificate revocation list for the specified Client VPN
  endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ExportClientVpnClientCertificateRevocationList&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:export_client_vpn_client_certificate_revocation_list_request`)
    %{
      optional("DryRun") => boolean(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec export_client_vpn_client_certificate_revocation_list(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, export_client_vpn_client_certificate_revocation_list_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def export_client_vpn_client_certificate_revocation_list(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "ExportClientVpnClientCertificateRevocationList",
      input,
      options
    )
  end

  @doc """
  Downloads the contents of the Client VPN endpoint configuration file for the
  specified Client VPN endpoint. The Client VPN endpoint configuration file
  includes the Client VPN endpoint and certificate information clients need to
  establish a connection with the Client VPN endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ExportClientVpnClientConfiguration&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:export_client_vpn_client_configuration_request`)
    %{
      optional("DryRun") => boolean(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec export_client_vpn_client_configuration(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, export_client_vpn_client_configuration_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def export_client_vpn_client_configuration(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ExportClientVpnClientConfiguration", input, options)
  end

  @doc """
  Exports an Amazon Machine Image (AMI) to a VM file. For more information, see
  [Exporting a VM directly from an Amazon Machine Image
  (AMI)](https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html)
  in the *VM Import/Export User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ExportImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:export_image_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("RoleName") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("DiskImageFormat") => list(any()),
      required("ImageId") => String.t(),
      required("S3ExportLocation") => export_task_s3_location_request()
    }
  """

  @spec export_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, export_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def export_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ExportImage", input, options)
  end

  @doc """
  Exports routes from the specified transit gateway route table to the specified
  S3 bucket. By default, all routes are exported. Alternatively, you can filter
  by CIDR range.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ExportTransitGatewayRoutes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:export_transit_gateway_routes_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      required("S3Bucket") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec export_transit_gateway_routes(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, export_transit_gateway_routes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def export_transit_gateway_routes(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ExportTransitGatewayRoutes", input, options)
  end

  @doc """
  Returns the IAM roles that are associated with the specified ACM (ACM)
  certificate. It also returns the name of the Amazon S3 bucket and the Amazon
  S3 object key where the certificate, certificate chain, and encrypted private
  key bundle are stored, and the ARN of the KMS key that's used to encrypt the
  private key.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetAssociatedEnclaveCertificateIamRoles&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_associated_enclave_certificate_iam_roles_request`)
    %{
      optional("DryRun") => boolean(),
      required("CertificateArn") => String.t()
    }
  """

  @spec get_associated_enclave_certificate_iam_roles(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_associated_enclave_certificate_iam_roles_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_associated_enclave_certificate_iam_roles(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetAssociatedEnclaveCertificateIamRoles", input, options)
  end

  @doc """
  Gets information about the IPv6 CIDR block associations for a specified IPv6
  address pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetAssociatedIpv6PoolCidrs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_associated_ipv6_pool_cidrs_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("PoolId") => String.t()
    }
  """

  @spec get_associated_ipv6_pool_cidrs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_associated_ipv6_pool_cidrs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_associated_ipv6_pool_cidrs(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetAssociatedIpv6PoolCidrs", input, options)
  end

  @doc """
  Gets network performance data.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetAwsNetworkPerformanceData&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_aws_network_performance_data_request`)
    %{
      optional("DataQueries") => list(data_query()()),
      optional("DryRun") => boolean(),
      optional("EndTime") => non_neg_integer(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("StartTime") => non_neg_integer()
    }
  """

  @spec get_aws_network_performance_data(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_aws_network_performance_data_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_aws_network_performance_data(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetAwsNetworkPerformanceData", input, options)
  end

  @doc """
  Gets usage information about a Capacity Reservation. If the Capacity Reservation
  is shared, it shows usage information for the Capacity Reservation owner and
  each Amazon Web Services account that is currently using the shared capacity.
  If the Capacity Reservation is not shared, it shows only the Capacity
  Reservation owner's usage.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetCapacityReservationUsage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_capacity_reservation_usage_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("CapacityReservationId") => String.t()
    }
  """

  @spec get_capacity_reservation_usage(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_capacity_reservation_usage_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_capacity_reservation_usage(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetCapacityReservationUsage", input, options)
  end

  @doc """
  Describes the allocations from the specified customer-owned address pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetCoipPoolUsage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_coip_pool_usage_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("PoolId") => String.t()
    }
  """

  @spec get_coip_pool_usage(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_coip_pool_usage_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_coip_pool_usage(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetCoipPoolUsage", input, options)
  end

  @doc """
  Gets the console output for the specified instance. For Linux instances, the
  instance console output displays the exact console output that would normally
  be displayed on a physical monitor attached to a computer. For Windows
  instances, the instance console output includes the last three system event
  log errors.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetConsoleOutput&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_console_output_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Latest") => boolean(),
      required("InstanceId") => String.t()
    }
  """

  @spec get_console_output(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_console_output_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_console_output(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetConsoleOutput", input, options)
  end

  @doc """
  Retrieve a JPG-format screenshot of a running instance to help with
  troubleshooting. The returned content is Base64-encoded.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetConsoleScreenshot&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_console_screenshot_request`)
    %{
      optional("DryRun") => boolean(),
      optional("WakeUp") => boolean(),
      required("InstanceId") => String.t()
    }
  """

  @spec get_console_screenshot(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_console_screenshot_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_console_screenshot(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetConsoleScreenshot", input, options)
  end

  @doc """
  Describes the default credit option for CPU usage of a burstable performance
  instance family.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetDefaultCreditSpecification&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_default_credit_specification_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceFamily") => list(any())
    }
  """

  @spec get_default_credit_specification(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_default_credit_specification_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_default_credit_specification(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetDefaultCreditSpecification", input, options)
  end

  @doc """
  Describes the default KMS key for EBS encryption by default for your account in
  this Region. You can change the default KMS key for encryption by default
  using `ModifyEbsDefaultKmsKeyId` or `ResetEbsDefaultKmsKeyId`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetEbsDefaultKmsKeyId&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ebs_default_kms_key_id_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec get_ebs_default_kms_key_id(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ebs_default_kms_key_id_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ebs_default_kms_key_id(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetEbsDefaultKmsKeyId", input, options)
  end

  @doc """
  Describes whether EBS encryption by default is enabled for your account in the
  current Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetEbsEncryptionByDefault&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ebs_encryption_by_default_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec get_ebs_encryption_by_default(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ebs_encryption_by_default_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ebs_encryption_by_default(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetEbsEncryptionByDefault", input, options)
  end

  @doc """
  Generates a CloudFormation template that streamlines and automates the
  integration of VPC flow logs with Amazon Athena. This make it easier for you
  to query and gain insights from VPC flow logs data. Based on the information
  that you provide, we configure resources in the template to do the following:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetFlowLogsIntegrationTemplate&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_flow_logs_integration_template_request`)
    %{
      optional("DryRun") => boolean(),
      required("ConfigDeliveryS3DestinationArn") => String.t(),
      required("FlowLogId") => String.t(),
      required("IntegrateServices") => integrate_services()
    }
  """

  @spec get_flow_logs_integration_template(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_flow_logs_integration_template_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_flow_logs_integration_template(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetFlowLogsIntegrationTemplate", input, options)
  end

  @doc """
  Lists the resource groups to which a Capacity Reservation has been added.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetGroupsForCapacityReservation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_groups_for_capacity_reservation_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("CapacityReservationId") => String.t()
    }
  """

  @spec get_groups_for_capacity_reservation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_groups_for_capacity_reservation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_groups_for_capacity_reservation(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetGroupsForCapacityReservation", input, options)
  end

  @doc """
  Preview a reservation purchase with configurations that match those of your
  Dedicated Host. You must have active Dedicated Hosts in your account before
  you purchase a reservation.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetHostReservationPurchasePreview&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_host_reservation_purchase_preview_request`)
    %{
      required("HostIdSet") => list(String.t()()),
      required("OfferingId") => String.t()
    }
  """

  @spec get_host_reservation_purchase_preview(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_host_reservation_purchase_preview_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_host_reservation_purchase_preview(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetHostReservationPurchasePreview", input, options)
  end

  @doc """
  Gets the current state of *block public access for AMIs* at the account level in
  the specified Amazon Web Services Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetImageBlockPublicAccessState&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_image_block_public_access_state_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec get_image_block_public_access_state(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_image_block_public_access_state_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_image_block_public_access_state(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetImageBlockPublicAccessState", input, options)
  end

  @doc """
  Gets the default instance metadata service (IMDS) settings that are set at the
  account level in the specified Amazon Web Services  Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetInstanceMetadataDefaults&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_instance_metadata_defaults_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec get_instance_metadata_defaults(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_instance_metadata_defaults_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_instance_metadata_defaults(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetInstanceMetadataDefaults", input, options)
  end

  @doc """
  Gets the public endorsement key associated with the Nitro Trusted Platform
  Module (NitroTPM) for the specified instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetInstanceTpmEkPub&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_instance_tpm_ek_pub_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t(),
      required("KeyFormat") => list(any()),
      required("KeyType") => list(any())
    }
  """

  @spec get_instance_tpm_ek_pub(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_instance_tpm_ek_pub_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_instance_tpm_ek_pub(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetInstanceTpmEkPub", input, options)
  end

  @doc """
  Returns a list of instance types with the specified instance attributes. You can
  use the response to preview the instance types without launching instances.
  Note that the response does not consider capacity. When you specify multiple
  parameters, you get instance types that satisfy all of the specified
  parameters. If you specify multiple values for a parameter, you get instance
  types that satisfy any of the specified values.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetInstanceTypesFromInstanceRequirements&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_instance_types_from_instance_requirements_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("ArchitectureTypes") => list(list(any())()),
      required("InstanceRequirements") => instance_requirements_request(),
      required("VirtualizationTypes") => list(list(any())())
    }
  """

  @spec get_instance_types_from_instance_requirements(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_instance_types_from_instance_requirements_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_instance_types_from_instance_requirements(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetInstanceTypesFromInstanceRequirements", input, options)
  end

  @doc """
  A binary representation of the UEFI variable store. Only non-volatile variables
  are stored. This is a base64 encoded and zlib compressed binary value that
  must be properly encoded.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetInstanceUefiData&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_instance_uefi_data_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t()
    }
  """

  @spec get_instance_uefi_data(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_instance_uefi_data_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_instance_uefi_data(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetInstanceUefiData", input, options)
  end

  @doc """
  Retrieve historical information about a CIDR within an IPAM scope. For more
  information, see [View the history of IP
  addresses](https://docs.aws.amazon.com/vpc/latest/ipam/view-history-cidr-ipam.html)
  in the *Amazon VPC IPAM User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetIpamAddressHistory&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ipam_address_history_request`)
    %{
      optional("DryRun") => boolean(),
      optional("EndTime") => non_neg_integer(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("StartTime") => non_neg_integer(),
      optional("VpcId") => String.t(),
      required("Cidr") => String.t(),
      required("IpamScopeId") => String.t()
    }
  """

  @spec get_ipam_address_history(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ipam_address_history_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ipam_address_history(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetIpamAddressHistory", input, options)
  end

  @doc """
  Gets IPAM discovered accounts. A discovered account is an Amazon Web Services
  account that is monitored under a resource discovery. If you have integrated
  IPAM with Amazon Web Services Organizations, all accounts in the organization
  are discovered accounts. Only the IPAM account can get all discovered accounts
  in the organization.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetIpamDiscoveredAccounts&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ipam_discovered_accounts_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("DiscoveryRegion") => String.t(),
      required("IpamResourceDiscoveryId") => String.t()
    }
  """

  @spec get_ipam_discovered_accounts(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ipam_discovered_accounts_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ipam_discovered_accounts(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetIpamDiscoveredAccounts", input, options)
  end

  @doc """
  Gets the public IP addresses that have been discovered by IPAM.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetIpamDiscoveredPublicAddresses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ipam_discovered_public_addresses_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("AddressRegion") => String.t(),
      required("IpamResourceDiscoveryId") => String.t()
    }
  """

  @spec get_ipam_discovered_public_addresses(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ipam_discovered_public_addresses_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ipam_discovered_public_addresses(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetIpamDiscoveredPublicAddresses", input, options)
  end

  @doc """
  Returns the resource CIDRs that are monitored as part of a resource discovery. A
  discovered resource is a resource CIDR monitored under a resource discovery.
  The following resources can be discovered: VPCs, Public IPv4 pools, VPC
  subnets, and Elastic IP addresses.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetIpamDiscoveredResourceCidrs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ipam_discovered_resource_cidrs_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("IpamResourceDiscoveryId") => String.t(),
      required("ResourceRegion") => String.t()
    }
  """

  @spec get_ipam_discovered_resource_cidrs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ipam_discovered_resource_cidrs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ipam_discovered_resource_cidrs(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetIpamDiscoveredResourceCidrs", input, options)
  end

  @doc """
  Get a list of all the CIDR allocations in an IPAM pool. The Region you use
  should be the IPAM pool locale. The locale is the Amazon Web Services Region
  where this IPAM pool is available for allocations.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetIpamPoolAllocations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ipam_pool_allocations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IpamPoolAllocationId") => String.t(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("IpamPoolId") => String.t()
    }
  """

  @spec get_ipam_pool_allocations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ipam_pool_allocations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ipam_pool_allocations(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetIpamPoolAllocations", input, options)
  end

  @doc """
  Get the CIDRs provisioned to an IPAM pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetIpamPoolCidrs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ipam_pool_cidrs_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("IpamPoolId") => String.t()
    }
  """

  @spec get_ipam_pool_cidrs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ipam_pool_cidrs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ipam_pool_cidrs(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetIpamPoolCidrs", input, options)
  end

  @doc """
  Returns resource CIDRs managed by IPAM in a given scope. If an IPAM is
  associated with more than one resource discovery, the resource CIDRs across
  all of the resource discoveries is returned. A resource discovery is an IPAM
  component that enables IPAM to manage and monitor resources that belong to the
  owning account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetIpamResourceCidrs&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_ipam_resource_cidrs_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("IpamPoolId") => String.t(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("ResourceId") => String.t(),
      optional("ResourceOwner") => String.t(),
      optional("ResourceTag") => request_ipam_resource_tag(),
      optional("ResourceType") => list(any()),
      required("IpamScopeId") => String.t()
    }
  """

  @spec get_ipam_resource_cidrs(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_ipam_resource_cidrs_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_ipam_resource_cidrs(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetIpamResourceCidrs", input, options)
  end

  @doc """
  Retrieves the configuration data of the specified instance. You can use this
  data to create a launch template.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetLaunchTemplateData&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_launch_template_data_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t()
    }
  """

  @spec get_launch_template_data(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_launch_template_data_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_launch_template_data(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetLaunchTemplateData", input, options)
  end

  @doc """
  Gets information about the resources that are associated with the specified
  managed prefix list.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetManagedPrefixListAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_managed_prefix_list_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("PrefixListId") => String.t()
    }
  """

  @spec get_managed_prefix_list_associations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_managed_prefix_list_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_managed_prefix_list_associations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetManagedPrefixListAssociations", input, options)
  end

  @doc """
  Gets information about the entries for a specified managed prefix list.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetManagedPrefixListEntries&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_managed_prefix_list_entries_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("TargetVersion") => float(),
      required("PrefixListId") => String.t()
    }
  """

  @spec get_managed_prefix_list_entries(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_managed_prefix_list_entries_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_managed_prefix_list_entries(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetManagedPrefixListEntries", input, options)
  end

  @doc """
  Gets the findings for the specified Network Access Scope analysis.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetNetworkInsightsAccessScopeAnalysisFindings&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_network_insights_access_scope_analysis_findings_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("NetworkInsightsAccessScopeAnalysisId") => String.t()
    }
  """

  @spec get_network_insights_access_scope_analysis_findings(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, get_network_insights_access_scope_analysis_findings_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_network_insights_access_scope_analysis_findings(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "GetNetworkInsightsAccessScopeAnalysisFindings",
      input,
      options
    )
  end

  @doc """
  Gets the content for the specified Network Access Scope.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetNetworkInsightsAccessScopeContent&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_network_insights_access_scope_content_request`)
    %{
      optional("DryRun") => boolean(),
      required("NetworkInsightsAccessScopeId") => String.t()
    }
  """

  @spec get_network_insights_access_scope_content(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_network_insights_access_scope_content_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_network_insights_access_scope_content(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetNetworkInsightsAccessScopeContent", input, options)
  end

  @doc """
  Retrieves the encrypted administrator password for a running Windows instance.
  The Windows password is generated at boot by the `EC2Config` service or
  `EC2Launch` scripts (Windows Server 2016 and later). This usually only happens
  the first time an instance is launched. For more information, see
  [EC2Config](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UsingConfig_WinAMI.html)
  and
  [EC2Launch](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2launch.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetPasswordData&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_password_data_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t()
    }
  """

  @spec get_password_data(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_password_data_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_password_data(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetPasswordData", input, options)
  end

  @doc """
  Returns a quote and exchange information for exchanging one or more specified
  Convertible Reserved Instances for a new Convertible Reserved Instance. If the
  exchange cannot be performed, the reason is returned in the response. Use
  `AcceptReservedInstancesExchangeQuote` to perform the exchange.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetReservedInstancesExchangeQuote&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_reserved_instances_exchange_quote_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TargetConfigurations") => list(target_configuration_request()()),
      required("ReservedInstanceIds") => list(String.t()())
    }
  """

  @spec get_reserved_instances_exchange_quote(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_reserved_instances_exchange_quote_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_reserved_instances_exchange_quote(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetReservedInstancesExchangeQuote", input, options)
  end

  @doc """
  Gets security groups that can be associated by the Amazon Web Services account
  making the request with network interfaces in the specified VPC.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetSecurityGroupsForVpc&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_security_groups_for_vpc_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("VpcId") => String.t()
    }
  """

  @spec get_security_groups_for_vpc(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_security_groups_for_vpc_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_security_groups_for_vpc(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetSecurityGroupsForVpc", input, options)
  end

  @doc """
  Retrieves the access status of your account to the EC2 serial console of all
  instances. By default, access to the EC2 serial console is disabled for your
  account. For more information, see [Manage account access to the EC2 serial
  console](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetSerialConsoleAccessStatus&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_serial_console_access_status_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec get_serial_console_access_status(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_serial_console_access_status_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_serial_console_access_status(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetSerialConsoleAccessStatus", input, options)
  end

  @doc """
  Gets the current state of *block public access for snapshots* setting for the
  account and Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetSnapshotBlockPublicAccessState&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_snapshot_block_public_access_state_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec get_snapshot_block_public_access_state(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_snapshot_block_public_access_state_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_snapshot_block_public_access_state(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetSnapshotBlockPublicAccessState", input, options)
  end

  @doc """
  Calculates the Spot placement score for a Region or Availability Zone based on
  the specified target capacity and compute requirements. You can specify your
  compute requirements either by using `InstanceRequirementsWithMetadata` and
  letting Amazon EC2 choose the optimal instance types to fulfill your Spot
  request, or you can specify the instance types by using `InstanceTypes`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetSpotPlacementScores&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_spot_placement_scores_request`)
    %{
      optional("DryRun") => boolean(),
      optional("InstanceRequirementsWithMetadata") => instance_requirements_with_metadata_request(),
      optional("InstanceTypes") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("RegionNames") => list(String.t()()),
      optional("SingleAvailabilityZone") => boolean(),
      optional("TargetCapacityUnitType") => list(any()),
      required("TargetCapacity") => integer()
    }
  """

  @spec get_spot_placement_scores(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_spot_placement_scores_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_spot_placement_scores(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetSpotPlacementScores", input, options)
  end

  @doc """
  Gets information about the subnet CIDR reservations.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetSubnetCidrReservations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_subnet_cidr_reservations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("SubnetId") => String.t()
    }
  """

  @spec get_subnet_cidr_reservations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_subnet_cidr_reservations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_subnet_cidr_reservations(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetSubnetCidrReservations", input, options)
  end

  @doc """
  Lists the route tables to which the specified resource attachment propagates
  routes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetTransitGatewayAttachmentPropagations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_transit_gateway_attachment_propagations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec get_transit_gateway_attachment_propagations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_transit_gateway_attachment_propagations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_transit_gateway_attachment_propagations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetTransitGatewayAttachmentPropagations", input, options)
  end

  @doc """
  Gets information about the associations for the transit gateway multicast
  domain.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetTransitGatewayMulticastDomainAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_transit_gateway_multicast_domain_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec get_transit_gateway_multicast_domain_associations(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, get_transit_gateway_multicast_domain_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_transit_gateway_multicast_domain_associations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "GetTransitGatewayMulticastDomainAssociations",
      input,
      options
    )
  end

  @doc """
  Gets a list of the transit gateway policy table associations.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetTransitGatewayPolicyTableAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_transit_gateway_policy_table_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("TransitGatewayPolicyTableId") => String.t()
    }
  """

  @spec get_transit_gateway_policy_table_associations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_transit_gateway_policy_table_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_transit_gateway_policy_table_associations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetTransitGatewayPolicyTableAssociations", input, options)
  end

  @doc """
  Returns a list of transit gateway policy table entries.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetTransitGatewayPolicyTableEntries&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_transit_gateway_policy_table_entries_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("TransitGatewayPolicyTableId") => String.t()
    }
  """

  @spec get_transit_gateway_policy_table_entries(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_transit_gateway_policy_table_entries_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_transit_gateway_policy_table_entries(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetTransitGatewayPolicyTableEntries", input, options)
  end

  @doc """
  Gets information about the prefix list references in a specified transit gateway
  route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetTransitGatewayPrefixListReferences&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_transit_gateway_prefix_list_references_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec get_transit_gateway_prefix_list_references(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_transit_gateway_prefix_list_references_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_transit_gateway_prefix_list_references(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetTransitGatewayPrefixListReferences", input, options)
  end

  @doc """
  Gets information about the associations for the specified transit gateway route
  table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetTransitGatewayRouteTableAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_transit_gateway_route_table_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec get_transit_gateway_route_table_associations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_transit_gateway_route_table_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_transit_gateway_route_table_associations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetTransitGatewayRouteTableAssociations", input, options)
  end

  @doc """
  Gets information about the route table propagations for the specified transit
  gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetTransitGatewayRouteTablePropagations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_transit_gateway_route_table_propagations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec get_transit_gateway_route_table_propagations(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_transit_gateway_route_table_propagations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_transit_gateway_route_table_propagations(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetTransitGatewayRouteTablePropagations", input, options)
  end

  @doc """
  Get the Verified Access policy associated with the endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetVerifiedAccessEndpointPolicy&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_verified_access_endpoint_policy_request`)
    %{
      optional("DryRun") => boolean(),
      required("VerifiedAccessEndpointId") => String.t()
    }
  """

  @spec get_verified_access_endpoint_policy(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_verified_access_endpoint_policy_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_verified_access_endpoint_policy(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetVerifiedAccessEndpointPolicy", input, options)
  end

  @doc """
  Shows the contents of the Verified Access policy associated with the group.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetVerifiedAccessGroupPolicy&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_verified_access_group_policy_request`)
    %{
      optional("DryRun") => boolean(),
      required("VerifiedAccessGroupId") => String.t()
    }
  """

  @spec get_verified_access_group_policy(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_verified_access_group_policy_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_verified_access_group_policy(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetVerifiedAccessGroupPolicy", input, options)
  end

  @doc """
  Download an Amazon Web Services-provided sample configuration file to be used
  with the customer gateway device specified for your Site-to-Site VPN
  connection.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetVpnConnectionDeviceSampleConfiguration&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_vpn_connection_device_sample_configuration_request`)
    %{
      optional("DryRun") => boolean(),
      optional("InternetKeyExchangeVersion") => String.t(),
      required("VpnConnectionDeviceTypeId") => String.t(),
      required("VpnConnectionId") => String.t()
    }
  """

  @spec get_vpn_connection_device_sample_configuration(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, get_vpn_connection_device_sample_configuration_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_vpn_connection_device_sample_configuration(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "GetVpnConnectionDeviceSampleConfiguration",
      input,
      options
    )
  end

  @doc """
  Obtain a list of customer gateway devices for which sample configuration files
  can be provided. The request has no additional parameters. You can also see
  the list of device types with sample configuration files available under [Your
  customer gateway
  device](https://docs.aws.amazon.com/vpn/latest/s2svpn/your-cgw.html) in the
  *Amazon Web Services Site-to-Site VPN User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetVpnConnectionDeviceTypes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_vpn_connection_device_types_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec get_vpn_connection_device_types(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_vpn_connection_device_types_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_vpn_connection_device_types(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetVpnConnectionDeviceTypes", input, options)
  end

  @doc """
  Get details of available tunnel endpoint maintenance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20GetVpnTunnelReplacementStatus&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:get_vpn_tunnel_replacement_status_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpnConnectionId") => String.t(),
      required("VpnTunnelOutsideIpAddress") => String.t()
    }
  """

  @spec get_vpn_tunnel_replacement_status(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, get_vpn_tunnel_replacement_status_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def get_vpn_tunnel_replacement_status(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "GetVpnTunnelReplacementStatus", input, options)
  end

  @doc """
  Uploads a client certificate revocation list to the specified Client VPN
  endpoint. Uploading a client certificate revocation list overwrites the
  existing client certificate revocation list.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ImportClientVpnClientCertificateRevocationList&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:import_client_vpn_client_certificate_revocation_list_request`)
    %{
      optional("DryRun") => boolean(),
      required("CertificateRevocationList") => String.t(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec import_client_vpn_client_certificate_revocation_list(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, import_client_vpn_client_certificate_revocation_list_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def import_client_vpn_client_certificate_revocation_list(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "ImportClientVpnClientCertificateRevocationList",
      input,
      options
    )
  end

  @doc """
  To import your virtual machines (VMs) with a console-based experience, you can
  use the *Import virtual machine images to Amazon Web Services* template in the
  [Migration Hub Orchestrator
  console](https://console.aws.amazon.com/migrationhub/orchestrator). For more
  information, see the [ *Migration Hub Orchestrator User Guide*
  ](https://docs.aws.amazon.com/migrationhub-orchestrator/latest/userguide/import-vm-images.html).
  Import single or multi-volume disk images or EBS snapshots into an Amazon
  Machine Image (AMI). Amazon Web Services VM Import/Export strongly recommends
  specifying a value for either the `--license-type` or `--usage-operation`
  parameter when you create a new VM Import task. This ensures your operating
  system is licensed appropriately and your billing is optimized.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ImportImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:import_image_request`)
    %{
      optional("Architecture") => String.t(),
      optional("BootMode") => list(any()),
      optional("ClientData") => client_data(),
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DiskContainers") => list(image_disk_container()()),
      optional("DryRun") => boolean(),
      optional("Encrypted") => boolean(),
      optional("Hypervisor") => String.t(),
      optional("KmsKeyId") => String.t(),
      optional("LicenseSpecifications") => list(import_image_license_configuration_request()()),
      optional("LicenseType") => String.t(),
      optional("Platform") => String.t(),
      optional("RoleName") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("UsageOperation") => String.t()
    }
  """

  @spec import_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, import_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def import_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ImportImage", input, options)
  end

  @doc """
  We recommend that you use the [ `ImportImage`
  ](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportImage.html)
  API. For more information, see [Importing a VM as an image using VM
  Import/Export](https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html)
  in the *VM Import/Export User Guide*. Creates an import instance task using
  metadata from the specified disk image. This API action is not supported by
  the Command Line Interface (CLI). For information about using the Amazon EC2
  CLI, which is deprecated, see [Importing a VM to Amazon
  EC2](https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#UsingVirtualMachinesinAmazonEC2)
  in the *Amazon EC2 CLI Reference* PDF file.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ImportInstance&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:import_instance_request`)
    %{
      optional("Description") => String.t(),
      optional("DiskImages") => list(disk_image()()),
      optional("DryRun") => boolean(),
      optional("LaunchSpecification") => import_instance_launch_specification(),
      required("Platform") => list(any())
    }
  """

  @spec import_instance(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, import_instance_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def import_instance(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ImportInstance", input, options)
  end

  @doc """
  Imports the public key from an RSA or ED25519 key pair that you created with a
  third-party tool. Compare this with `CreateKeyPair`, in which Amazon Web
  Services creates the key pair and gives the keys to you (Amazon Web Services
  keeps a copy of the public key). With ImportKeyPair, you create the key pair
  and give Amazon Web Services just the public key. The private key is never
  transferred between you and Amazon Web Services.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ImportKeyPair&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:import_key_pair_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("KeyName") => String.t(),
      required("PublicKeyMaterial") => binary()
    }
  """

  @spec import_key_pair(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, import_key_pair_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def import_key_pair(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ImportKeyPair", input, options)
  end

  @doc """
  Imports a disk into an EBS snapshot.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ImportSnapshot&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:import_snapshot_request`)
    %{
      optional("ClientData") => client_data(),
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DiskContainer") => snapshot_disk_container(),
      optional("DryRun") => boolean(),
      optional("Encrypted") => boolean(),
      optional("KmsKeyId") => String.t(),
      optional("RoleName") => String.t(),
      optional("TagSpecifications") => list(tag_specification()())
    }
  """

  @spec import_snapshot(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, import_snapshot_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def import_snapshot(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ImportSnapshot", input, options)
  end

  @doc """
  Creates an import volume task using metadata from the specified disk image. This
  API action supports only single-volume VMs. To import multi-volume VMs, use
  `ImportImage` instead. To import a disk to a snapshot, use `ImportSnapshot`
  instead.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ImportVolume&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:import_volume_request`)
    %{
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      required("AvailabilityZone") => String.t(),
      required("Image") => disk_image_detail(),
      required("Volume") => volume_detail()
    }
  """

  @spec import_volume(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, import_volume_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def import_volume(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ImportVolume", input, options)
  end

  @doc """
  Lists one or more AMIs that are currently in the Recycle Bin. For more
  information, see [Recycle
  Bin](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html) in
  the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ListImagesInRecycleBin&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:list_images_in_recycle_bin_request`)
    %{
      optional("DryRun") => boolean(),
      optional("ImageIds") => list(String.t()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t()
    }
  """

  @spec list_images_in_recycle_bin(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, list_images_in_recycle_bin_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def list_images_in_recycle_bin(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ListImagesInRecycleBin", input, options)
  end

  @doc """
  Lists one or more snapshots that are currently in the Recycle Bin.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ListSnapshotsInRecycleBin&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:list_snapshots_in_recycle_bin_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      optional("SnapshotIds") => list(String.t()())
    }
  """

  @spec list_snapshots_in_recycle_bin(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, list_snapshots_in_recycle_bin_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def list_snapshots_in_recycle_bin(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ListSnapshotsInRecycleBin", input, options)
  end

  @doc """
  Locks an Amazon EBS snapshot in either *governance* or *compliance* mode to
  protect it against accidental or malicious deletions for a specific duration.
  A locked snapshot can't be deleted. You can also use this action to modify the
  lock settings for a snapshot that is already locked. The allowed modifications
  depend on the lock mode and lock state:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20LockSnapshot&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:lock_snapshot_request`)
    %{
      optional("CoolOffPeriod") => integer(),
      optional("DryRun") => boolean(),
      optional("ExpirationDate") => non_neg_integer(),
      optional("LockDuration") => integer(),
      required("LockMode") => list(any()),
      required("SnapshotId") => String.t()
    }
  """

  @spec lock_snapshot(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, lock_snapshot_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def lock_snapshot(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "LockSnapshot", input, options)
  end

  @doc """
  Modifies an attribute of the specified Elastic IP address. For requirements, see
  [Using reverse DNS for email
  applications](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyAddressAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_address_attribute_request`)
    %{
      optional("DomainName") => String.t(),
      optional("DryRun") => boolean(),
      required("AllocationId") => String.t()
    }
  """

  @spec modify_address_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_address_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_address_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyAddressAttribute", input, options)
  end

  @doc """
  Changes the opt-in status of the specified zone group for your account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyAvailabilityZoneGroup&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_availability_zone_group_request`)
    %{
      optional("DryRun") => boolean(),
      required("GroupName") => String.t(),
      required("OptInStatus") => list(any())
    }
  """

  @spec modify_availability_zone_group(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_availability_zone_group_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_availability_zone_group(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyAvailabilityZoneGroup", input, options)
  end

  @doc """
  Modifies a Capacity Reservation's capacity and the conditions under which it is
  to be released. You cannot change a Capacity Reservation's instance type, EBS
  optimization, instance store settings, platform, Availability Zone, or
  instance eligibility. If you need to modify any of these attributes, we
  recommend that you cancel the Capacity Reservation, and then create a new one
  with the required attributes.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyCapacityReservation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_capacity_reservation_request`)
    %{
      optional("Accept") => boolean(),
      optional("AdditionalInfo") => String.t(),
      optional("DryRun") => boolean(),
      optional("EndDate") => non_neg_integer(),
      optional("EndDateType") => list(any()),
      optional("InstanceCount") => integer(),
      required("CapacityReservationId") => String.t()
    }
  """

  @spec modify_capacity_reservation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_capacity_reservation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_capacity_reservation(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyCapacityReservation", input, options)
  end

  @doc """
  Modifies a Capacity Reservation Fleet.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyCapacityReservationFleet&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_capacity_reservation_fleet_request`)
    %{
      optional("DryRun") => boolean(),
      optional("EndDate") => non_neg_integer(),
      optional("RemoveEndDate") => boolean(),
      optional("TotalTargetCapacity") => integer(),
      required("CapacityReservationFleetId") => String.t()
    }
  """

  @spec modify_capacity_reservation_fleet(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_capacity_reservation_fleet_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_capacity_reservation_fleet(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyCapacityReservationFleet", input, options)
  end

  @doc """
  Modifies the specified Client VPN endpoint. Modifying the DNS server resets
  existing client connections.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyClientVpnEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_client_vpn_endpoint_request`)
    %{
      optional("ClientConnectOptions") => client_connect_options(),
      optional("ClientLoginBannerOptions") => client_login_banner_options(),
      optional("ConnectionLogOptions") => connection_log_options(),
      optional("Description") => String.t(),
      optional("DnsServers") => dns_servers_options_modify_structure(),
      optional("DryRun") => boolean(),
      optional("SecurityGroupIds") => list(String.t()()),
      optional("SelfServicePortal") => list(any()),
      optional("ServerCertificateArn") => String.t(),
      optional("SessionTimeoutHours") => integer(),
      optional("SplitTunnel") => boolean(),
      optional("VpcId") => String.t(),
      optional("VpnPort") => integer(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec modify_client_vpn_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_client_vpn_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_client_vpn_endpoint(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyClientVpnEndpoint", input, options)
  end

  @doc """
  Modifies the default credit option for CPU usage of burstable performance
  instances. The default credit option is set at the account level per Amazon
  Web Services Region, and is specified per instance family. All new burstable
  performance instances in the account launch using the default credit option.
  `ModifyDefaultCreditSpecification` is an asynchronous operation, which works
  at an Amazon Web Services Region level and modifies the credit option for each
  Availability Zone. All zones in a Region are updated within five minutes. But
  if instances are launched during this operation, they might not get the new
  credit option until the zone is updated. To verify whether the update has
  occurred, you can call `GetDefaultCreditSpecification` and check
  `DefaultCreditSpecification` for updates.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyDefaultCreditSpecification&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_default_credit_specification_request`)
    %{
      optional("DryRun") => boolean(),
      required("CpuCredits") => String.t(),
      required("InstanceFamily") => list(any())
    }
  """

  @spec modify_default_credit_specification(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_default_credit_specification_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_default_credit_specification(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyDefaultCreditSpecification", input, options)
  end

  @doc """
  Changes the default KMS key for EBS encryption by default for your account in
  this Region. Amazon Web Services creates a unique Amazon Web Services managed
  KMS key in each Region for use with encryption by default. If you change the
  default KMS key to a symmetric customer managed KMS key, it is used instead of
  the Amazon Web Services managed KMS key. To reset the default KMS key to the
  Amazon Web Services managed KMS key for EBS, use `ResetEbsDefaultKmsKeyId`.
  Amazon EBS does not support asymmetric KMS keys.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyEbsDefaultKmsKeyId&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_ebs_default_kms_key_id_request`)
    %{
      optional("DryRun") => boolean(),
      required("KmsKeyId") => String.t()
    }
  """

  @spec modify_ebs_default_kms_key_id(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_ebs_default_kms_key_id_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_ebs_default_kms_key_id(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyEbsDefaultKmsKeyId", input, options)
  end

  @doc """
  Modifies the specified EC2 Fleet. You can only modify an EC2 Fleet request of
  type `maintain`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyFleet&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_fleet_request`)
    %{
      optional("Context") => String.t(),
      optional("DryRun") => boolean(),
      optional("ExcessCapacityTerminationPolicy") => list(any()),
      optional("LaunchTemplateConfigs") => list(fleet_launch_template_config_request()()),
      optional("TargetCapacitySpecification") => target_capacity_specification_request(),
      required("FleetId") => String.t()
    }
  """

  @spec modify_fleet(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_fleet_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_fleet(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyFleet", input, options)
  end

  @doc """
  Modifies the specified attribute of the specified Amazon FPGA Image (AFI).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyFpgaImageAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_fpga_image_attribute_request`)
    %{
      optional("Attribute") => list(any()),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("LoadPermission") => load_permission_modifications(),
      optional("Name") => String.t(),
      optional("OperationType") => list(any()),
      optional("ProductCodes") => list(String.t()()),
      optional("UserGroups") => list(String.t()()),
      optional("UserIds") => list(String.t()()),
      required("FpgaImageId") => String.t()
    }
  """

  @spec modify_fpga_image_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_fpga_image_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_fpga_image_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyFpgaImageAttribute", input, options)
  end

  @doc """
  Modify the auto-placement setting of a Dedicated Host. When auto-placement is
  enabled, any instances that you launch with a tenancy of `host` but without a
  specific host ID are placed onto any available Dedicated Host in your account
  that has auto-placement enabled. When auto-placement is disabled, you need to
  provide a host ID to have the instance launch onto a specific host. If no host
  ID is provided, the instance is launched onto a suitable host with
  auto-placement enabled.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyHosts&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_hosts_request`)
    %{
      optional("AutoPlacement") => list(any()),
      optional("HostMaintenance") => list(any()),
      optional("HostRecovery") => list(any()),
      optional("InstanceFamily") => String.t(),
      optional("InstanceType") => String.t(),
      required("HostIds") => list(String.t()())
    }
  """

  @spec modify_hosts(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_hosts_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_hosts(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyHosts", input, options)
  end

  @doc """
  Modifies the ID format for the specified resource on a per-Region basis. You can
  specify that resources should receive longer IDs (17-character IDs) when they
  are created. This request can only be used to modify longer ID settings for
  resource types that are within the opt-in period. Resources currently in their
  opt-in period include: `bundle` | `conversion-task` | `customer-gateway` |
  `dhcp-options` | `elastic-ip-allocation` | `elastic-ip-association` |
  `export-task` | `flow-log` | `image` | `import-task` | `internet-gateway` |
  `network-acl` | `network-acl-association` | `network-interface` |
  `network-interface-attachment` | `prefix-list` | `route-table` |
  `route-table-association` | `security-group` | `subnet` |
  `subnet-cidr-block-association` | `vpc` | `vpc-cidr-block-association` |
  `vpc-endpoint` | `vpc-peering-connection` | `vpn-connection` | `vpn-gateway`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyIdFormat&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_id_format_request`)
    %{
      required("Resource") => String.t(),
      required("UseLongIds") => boolean()
    }
  """

  @spec modify_id_format(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_id_format(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyIdFormat", input, options)
  end

  @doc """
  Modifies the ID format of a resource for a specified IAM user, IAM role, or the
  root user for an account; or all IAM users, IAM roles, and the root user for
  an account. You can specify that resources should receive longer IDs
  (17-character IDs) when they are created. This request can only be used to
  modify longer ID settings for resource types that are within the opt-in
  period. Resources currently in their opt-in period include: `bundle` |
  `conversion-task` | `customer-gateway` | `dhcp-options` |
  `elastic-ip-allocation` | `elastic-ip-association` | `export-task` |
  `flow-log` | `image` | `import-task` | `internet-gateway` | `network-acl` |
  `network-acl-association` | `network-interface` |
  `network-interface-attachment` | `prefix-list` | `route-table` |
  `route-table-association` | `security-group` | `subnet` |
  `subnet-cidr-block-association` | `vpc` | `vpc-cidr-block-association` |
  `vpc-endpoint` | `vpc-peering-connection` | `vpn-connection` | `vpn-gateway`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyIdentityIdFormat&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_identity_id_format_request`)
    %{
      required("PrincipalArn") => String.t(),
      required("Resource") => String.t(),
      required("UseLongIds") => boolean()
    }
  """

  @spec modify_identity_id_format(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_identity_id_format(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyIdentityIdFormat", input, options)
  end

  @doc """
  Modifies the specified attribute of the specified AMI. You can specify only one
  attribute at a time. To specify the attribute, you can use the `Attribute`
  parameter, or one of the following parameters: `Description`, `ImdsSupport`,
  or `LaunchPermission`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyImageAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_image_attribute_request`)
    %{
      optional("Attribute") => String.t(),
      optional("Description") => attribute_value(),
      optional("DryRun") => boolean(),
      optional("ImdsSupport") => attribute_value(),
      optional("LaunchPermission") => launch_permission_modifications(),
      optional("OperationType") => list(any()),
      optional("OrganizationArns") => list(String.t()()),
      optional("OrganizationalUnitArns") => list(String.t()()),
      optional("ProductCodes") => list(String.t()()),
      optional("UserGroups") => list(String.t()()),
      optional("UserIds") => list(String.t()()),
      optional("Value") => String.t(),
      required("ImageId") => String.t()
    }
  """

  @spec modify_image_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_image_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyImageAttribute", input, options)
  end

  @doc """
  Modifies the specified attribute of the specified instance. You can specify only
  one attribute at a time. **Note: **Using this action to change the security
  groups associated with an elastic network interface (ENI) attached to an
  instance can result in an error if the instance has more than one ENI. To
  change the security groups associated with an ENI attached to an instance that
  has multiple ENIs, we recommend that you use the
  `ModifyNetworkInterfaceAttribute` action.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstanceAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_attribute_request`)
    %{
      optional("Attribute") => list(any()),
      optional("BlockDeviceMappings") => list(instance_block_device_mapping_specification()()),
      optional("DisableApiStop") => attribute_boolean_value(),
      optional("DisableApiTermination") => attribute_boolean_value(),
      optional("DryRun") => boolean(),
      optional("EbsOptimized") => attribute_boolean_value(),
      optional("EnaSupport") => attribute_boolean_value(),
      optional("Groups") => list(String.t()()),
      optional("InstanceInitiatedShutdownBehavior") => attribute_value(),
      optional("InstanceType") => attribute_value(),
      optional("Kernel") => attribute_value(),
      optional("Ramdisk") => attribute_value(),
      optional("SourceDestCheck") => attribute_boolean_value(),
      optional("SriovNetSupport") => attribute_value(),
      optional("UserData") => blob_attribute_value(),
      optional("Value") => String.t(),
      required("InstanceId") => String.t()
    }
  """

  @spec modify_instance_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyInstanceAttribute", input, options)
  end

  @doc """
  Modifies the Capacity Reservation settings for a stopped instance. Use this
  action to configure an instance to target a specific Capacity Reservation, run
  in any `open` Capacity Reservation with matching attributes, or run On-Demand
  Instance capacity.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstanceCapacityReservationAttributes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_capacity_reservation_attributes_request`)
    %{
      optional("DryRun") => boolean(),
      required("CapacityReservationSpecification") => capacity_reservation_specification(),
      required("InstanceId") => String.t()
    }
  """

  @spec modify_instance_capacity_reservation_attributes(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, modify_instance_capacity_reservation_attributes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_capacity_reservation_attributes(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "ModifyInstanceCapacityReservationAttributes",
      input,
      options
    )
  end

  @doc """
  Modifies the credit option for CPU usage on a running or stopped burstable
  performance instance. The credit options are `standard` and `unlimited`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstanceCreditSpecification&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_credit_specification_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("InstanceCreditSpecifications") => list(instance_credit_specification_request()())
    }
  """

  @spec modify_instance_credit_specification(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_instance_credit_specification_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_credit_specification(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyInstanceCreditSpecification", input, options)
  end

  @doc """
  Modifies the start time for a scheduled Amazon EC2 instance event.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstanceEventStartTime&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_event_start_time_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceEventId") => String.t(),
      required("InstanceId") => String.t(),
      required("NotBefore") => non_neg_integer()
    }
  """

  @spec modify_instance_event_start_time(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_instance_event_start_time_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_event_start_time(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyInstanceEventStartTime", input, options)
  end

  @doc """
  Modifies the specified event window. You can define either a set of time ranges
  or a cron expression when modifying the event window, but not both.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstanceEventWindow&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_event_window_request`)
    %{
      optional("CronExpression") => String.t(),
      optional("DryRun") => boolean(),
      optional("Name") => String.t(),
      optional("TimeRanges") => list(instance_event_window_time_range_request()()),
      required("InstanceEventWindowId") => String.t()
    }
  """

  @spec modify_instance_event_window(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_instance_event_window_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_event_window(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyInstanceEventWindow", input, options)
  end

  @doc """
  Modifies the recovery behavior of your instance to disable simplified automatic
  recovery or set the recovery behavior to default. The default configuration
  will not enable simplified automatic recovery for an unsupported instance
  type. For more information, see [Simplified automatic
  recovery](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-recover.html#instance-configuration-recovery).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstanceMaintenanceOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_maintenance_options_request`)
    %{
      optional("AutoRecovery") => list(any()),
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t()
    }
  """

  @spec modify_instance_maintenance_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_instance_maintenance_options_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_maintenance_options(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyInstanceMaintenanceOptions", input, options)
  end

  @doc """
  Modifies the default instance metadata service (IMDS) settings at the account
  level in the specified Amazon Web Services  Region.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstanceMetadataDefaults&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_metadata_defaults_request`)
    %{
      optional("DryRun") => boolean(),
      optional("HttpEndpoint") => list(any()),
      optional("HttpPutResponseHopLimit") => integer(),
      optional("HttpTokens") => list(any()),
      optional("InstanceMetadataTags") => list(any())
    }
  """

  @spec modify_instance_metadata_defaults(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_instance_metadata_defaults_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_metadata_defaults(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyInstanceMetadataDefaults", input, options)
  end

  @doc """
  Modify the instance metadata parameters on a running or stopped instance. When
  you modify the parameters on a stopped instance, they are applied when the
  instance is started. When you modify the parameters on a running instance, the
  API responds with a state of “pending”. After the parameter modifications are
  successfully applied to the instance, the state of the modifications changes
  from “pending” to “applied” in subsequent describe-instances API calls. For
  more information, see [Instance metadata and user
  data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstanceMetadataOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_metadata_options_request`)
    %{
      optional("DryRun") => boolean(),
      optional("HttpEndpoint") => list(any()),
      optional("HttpProtocolIpv6") => list(any()),
      optional("HttpPutResponseHopLimit") => integer(),
      optional("HttpTokens") => list(any()),
      optional("InstanceMetadataTags") => list(any()),
      required("InstanceId") => String.t()
    }
  """

  @spec modify_instance_metadata_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_instance_metadata_options_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_metadata_options(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyInstanceMetadataOptions", input, options)
  end

  @doc """
  Modifies the placement attributes for a specified instance. You can do the
  following:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyInstancePlacement&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_instance_placement_request`)
    %{
      optional("Affinity") => list(any()),
      optional("GroupId") => String.t(),
      optional("GroupName") => String.t(),
      optional("HostId") => String.t(),
      optional("HostResourceGroupArn") => String.t(),
      optional("PartitionNumber") => integer(),
      optional("Tenancy") => list(any()),
      required("InstanceId") => String.t()
    }
  """

  @spec modify_instance_placement(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_instance_placement_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_instance_placement(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyInstancePlacement", input, options)
  end

  @doc """
  Modify the configurations of an IPAM.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyIpam&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_ipam_request`)
    %{
      optional("AddOperatingRegions") => list(add_ipam_operating_region()()),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("RemoveOperatingRegions") => list(remove_ipam_operating_region()()),
      optional("Tier") => list(any()),
      required("IpamId") => String.t()
    }
  """

  @spec modify_ipam(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_ipam_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_ipam(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyIpam", input, options)
  end

  @doc """
  Modify the configurations of an IPAM pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyIpamPool&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_ipam_pool_request`)
    %{
      optional("AddAllocationResourceTags") => list(request_ipam_resource_tag()()),
      optional("AllocationDefaultNetmaskLength") => integer(),
      optional("AllocationMaxNetmaskLength") => integer(),
      optional("AllocationMinNetmaskLength") => integer(),
      optional("AutoImport") => boolean(),
      optional("ClearAllocationDefaultNetmaskLength") => boolean(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("RemoveAllocationResourceTags") => list(request_ipam_resource_tag()()),
      required("IpamPoolId") => String.t()
    }
  """

  @spec modify_ipam_pool(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_ipam_pool_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_ipam_pool(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyIpamPool", input, options)
  end

  @doc """
  Modify a resource CIDR. You can use this action to transfer resource CIDRs
  between scopes and ignore resource CIDRs that you do not want to manage. If
  set to false, the resource will not be tracked for overlap, it cannot be
  auto-imported into a pool, and it will be removed from any pool it has an
  allocation in.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyIpamResourceCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_ipam_resource_cidr_request`)
    %{
      optional("DestinationIpamScopeId") => String.t(),
      optional("DryRun") => boolean(),
      required("CurrentIpamScopeId") => String.t(),
      required("Monitored") => boolean(),
      required("ResourceCidr") => String.t(),
      required("ResourceId") => String.t(),
      required("ResourceRegion") => String.t()
    }
  """

  @spec modify_ipam_resource_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_ipam_resource_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_ipam_resource_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyIpamResourceCidr", input, options)
  end

  @doc """
  Modifies a resource discovery. A resource discovery is an IPAM component that
  enables IPAM to manage and monitor resources that belong to the owning
  account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyIpamResourceDiscovery&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_ipam_resource_discovery_request`)
    %{
      optional("AddOperatingRegions") => list(add_ipam_operating_region()()),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("RemoveOperatingRegions") => list(remove_ipam_operating_region()()),
      required("IpamResourceDiscoveryId") => String.t()
    }
  """

  @spec modify_ipam_resource_discovery(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_ipam_resource_discovery_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_ipam_resource_discovery(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyIpamResourceDiscovery", input, options)
  end

  @doc """
  Modify an IPAM scope.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyIpamScope&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_ipam_scope_request`)
    %{
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      required("IpamScopeId") => String.t()
    }
  """

  @spec modify_ipam_scope(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_ipam_scope_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_ipam_scope(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyIpamScope", input, options)
  end

  @doc """
  Modifies a launch template. You can specify which version of the launch template
  to set as the default version. When launching an instance, the default version
  applies when a launch template version is not specified.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyLaunchTemplate&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_launch_template_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DefaultVersion") => String.t(),
      optional("DryRun") => boolean(),
      optional("LaunchTemplateId") => String.t(),
      optional("LaunchTemplateName") => String.t()
    }
  """

  @spec modify_launch_template(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_launch_template_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_launch_template(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyLaunchTemplate", input, options)
  end

  @doc """
  Modifies the specified local gateway route.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyLocalGatewayRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_local_gateway_route_request`)
    %{
      optional("DestinationCidrBlock") => String.t(),
      optional("DestinationPrefixListId") => String.t(),
      optional("DryRun") => boolean(),
      optional("LocalGatewayVirtualInterfaceGroupId") => String.t(),
      optional("NetworkInterfaceId") => String.t(),
      required("LocalGatewayRouteTableId") => String.t()
    }
  """

  @spec modify_local_gateway_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_local_gateway_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_local_gateway_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyLocalGatewayRoute", input, options)
  end

  @doc """
  Modifies the specified managed prefix list. Adding or removing entries in a
  prefix list creates a new version of the prefix list. Changing the name of the
  prefix list does not affect the version.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyManagedPrefixList&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_managed_prefix_list_request`)
    %{
      optional("AddEntries") => list(add_prefix_list_entry()()),
      optional("CurrentVersion") => float(),
      optional("DryRun") => boolean(),
      optional("MaxEntries") => integer(),
      optional("PrefixListName") => String.t(),
      optional("RemoveEntries") => list(remove_prefix_list_entry()()),
      required("PrefixListId") => String.t()
    }
  """

  @spec modify_managed_prefix_list(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_managed_prefix_list_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_managed_prefix_list(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyManagedPrefixList", input, options)
  end

  @doc """
  Modifies the specified network interface attribute. You can specify only one
  attribute at a time. You can use this action to attach and detach security
  groups from an existing EC2 instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyNetworkInterfaceAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_network_interface_attribute_request`)
    %{
      optional("AssociatePublicIpAddress") => boolean(),
      optional("Attachment") => network_interface_attachment_changes(),
      optional("ConnectionTrackingSpecification") => connection_tracking_specification_request(),
      optional("Description") => attribute_value(),
      optional("DryRun") => boolean(),
      optional("EnaSrdSpecification") => ena_srd_specification(),
      optional("EnablePrimaryIpv6") => boolean(),
      optional("Groups") => list(String.t()()),
      optional("SourceDestCheck") => attribute_boolean_value(),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec modify_network_interface_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_network_interface_attribute(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyNetworkInterfaceAttribute", input, options)
  end

  @doc """
  Modifies the options for instance hostnames for the specified instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyPrivateDnsNameOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_private_dns_name_options_request`)
    %{
      optional("DryRun") => boolean(),
      optional("EnableResourceNameDnsAAAARecord") => boolean(),
      optional("EnableResourceNameDnsARecord") => boolean(),
      optional("PrivateDnsHostnameType") => list(any()),
      required("InstanceId") => String.t()
    }
  """

  @spec modify_private_dns_name_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_private_dns_name_options_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_private_dns_name_options(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyPrivateDnsNameOptions", input, options)
  end

  @doc """
  Modifies the configuration of your Reserved Instances, such as the Availability
  Zone, instance count, or instance type. The Reserved Instances to be modified
  must be identical, except for Availability Zone, network platform, and
  instance type.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyReservedInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_reserved_instances_request`)
    %{
      optional("ClientToken") => String.t(),
      required("ReservedInstancesIds") => list(String.t()()),
      required("TargetConfigurations") => list(reserved_instances_configuration()())
    }
  """

  @spec modify_reserved_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_reserved_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_reserved_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyReservedInstances", input, options)
  end

  @doc """
  Modifies the rules of a security group.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifySecurityGroupRules&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_security_group_rules_request`)
    %{
      optional("DryRun") => boolean(),
      required("GroupId") => String.t(),
      required("SecurityGroupRules") => list(security_group_rule_update()())
    }
  """

  @spec modify_security_group_rules(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_security_group_rules_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_security_group_rules(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifySecurityGroupRules", input, options)
  end

  @doc """
  Adds or removes permission settings for the specified snapshot. You may add or
  remove specified Amazon Web Services account IDs from a snapshot's list of
  create volume permissions, but you cannot do both in a single operation. If
  you need to both add and remove account IDs for a snapshot, you must use
  multiple operations. You can make up to 500 modifications to a snapshot in a
  single operation. Encrypted snapshots and snapshots with Amazon Web Services
  Marketplace product codes cannot be made public. Snapshots encrypted with your
  default KMS key cannot be shared with other accounts.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifySnapshotAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_snapshot_attribute_request`)
    %{
      optional("Attribute") => list(any()),
      optional("CreateVolumePermission") => create_volume_permission_modifications(),
      optional("DryRun") => boolean(),
      optional("GroupNames") => list(String.t()()),
      optional("OperationType") => list(any()),
      optional("UserIds") => list(String.t()()),
      required("SnapshotId") => String.t()
    }
  """

  @spec modify_snapshot_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_snapshot_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifySnapshotAttribute", input, options)
  end

  @doc """
  Archives an Amazon EBS snapshot. When you archive a snapshot, it is converted to
  a full snapshot that includes all of the blocks of data that were written to
  the volume at the time the snapshot was created, and moved from the standard
  tier to the archive tier. For more information, see [Archive Amazon EBS
  snapshots](https://docs.aws.amazon.com/ebs/latest/userguide/snapshot-archive.html)
  in the *Amazon EBS User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifySnapshotTier&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_snapshot_tier_request`)
    %{
      optional("DryRun") => boolean(),
      optional("StorageTier") => list(any()),
      required("SnapshotId") => String.t()
    }
  """

  @spec modify_snapshot_tier(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_snapshot_tier_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_snapshot_tier(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifySnapshotTier", input, options)
  end

  @doc """
  Modifies the specified Spot Fleet request. You can only modify a Spot Fleet
  request of type `maintain`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifySpotFleetRequest&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_spot_fleet_request_request`)
    %{
      optional("Context") => String.t(),
      optional("ExcessCapacityTerminationPolicy") => list(any()),
      optional("LaunchTemplateConfigs") => list(launch_template_config()()),
      optional("OnDemandTargetCapacity") => integer(),
      optional("TargetCapacity") => integer(),
      required("SpotFleetRequestId") => String.t()
    }
  """

  @spec modify_spot_fleet_request(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_spot_fleet_request_response(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_spot_fleet_request(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifySpotFleetRequest", input, options)
  end

  @doc """
  Modifies a subnet attribute. You can only modify one attribute at a time. Use
  this action to modify subnets on Amazon Web Services Outposts.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifySubnetAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_subnet_attribute_request`)
    %{
      optional("AssignIpv6AddressOnCreation") => attribute_boolean_value(),
      optional("CustomerOwnedIpv4Pool") => String.t(),
      optional("DisableLniAtDeviceIndex") => attribute_boolean_value(),
      optional("EnableDns64") => attribute_boolean_value(),
      optional("EnableLniAtDeviceIndex") => integer(),
      optional("EnableResourceNameDnsAAAARecordOnLaunch") => attribute_boolean_value(),
      optional("EnableResourceNameDnsARecordOnLaunch") => attribute_boolean_value(),
      optional("MapCustomerOwnedIpOnLaunch") => attribute_boolean_value(),
      optional("MapPublicIpOnLaunch") => attribute_boolean_value(),
      optional("PrivateDnsHostnameTypeOnLaunch") => list(any()),
      required("SubnetId") => String.t()
    }
  """

  @spec modify_subnet_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_subnet_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifySubnetAttribute", input, options)
  end

  @doc """
  Allows or restricts mirroring network services.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyTrafficMirrorFilterNetworkServices&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_traffic_mirror_filter_network_services_request`)
    %{
      optional("AddNetworkServices") => list(list(any())()),
      optional("DryRun") => boolean(),
      optional("RemoveNetworkServices") => list(list(any())()),
      required("TrafficMirrorFilterId") => String.t()
    }
  """

  @spec modify_traffic_mirror_filter_network_services(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_traffic_mirror_filter_network_services_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_traffic_mirror_filter_network_services(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyTrafficMirrorFilterNetworkServices", input, options)
  end

  @doc """
  Modifies the specified Traffic Mirror rule.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyTrafficMirrorFilterRule&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_traffic_mirror_filter_rule_request`)
    %{
      optional("Description") => String.t(),
      optional("DestinationCidrBlock") => String.t(),
      optional("DestinationPortRange") => traffic_mirror_port_range_request(),
      optional("DryRun") => boolean(),
      optional("Protocol") => integer(),
      optional("RemoveFields") => list(list(any())()),
      optional("RuleAction") => list(any()),
      optional("RuleNumber") => integer(),
      optional("SourceCidrBlock") => String.t(),
      optional("SourcePortRange") => traffic_mirror_port_range_request(),
      optional("TrafficDirection") => list(any()),
      required("TrafficMirrorFilterRuleId") => String.t()
    }
  """

  @spec modify_traffic_mirror_filter_rule(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_traffic_mirror_filter_rule_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_traffic_mirror_filter_rule(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyTrafficMirrorFilterRule", input, options)
  end

  @doc """
  Modifies a Traffic Mirror session.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyTrafficMirrorSession&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_traffic_mirror_session_request`)
    %{
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("PacketLength") => integer(),
      optional("RemoveFields") => list(list(any())()),
      optional("SessionNumber") => integer(),
      optional("TrafficMirrorFilterId") => String.t(),
      optional("TrafficMirrorTargetId") => String.t(),
      optional("VirtualNetworkId") => integer(),
      required("TrafficMirrorSessionId") => String.t()
    }
  """

  @spec modify_traffic_mirror_session(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_traffic_mirror_session_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_traffic_mirror_session(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyTrafficMirrorSession", input, options)
  end

  @doc """
  Modifies the specified transit gateway. When you modify a transit gateway, the
  modified options are applied to new transit gateway attachments only. Your
  existing transit gateway attachments are not modified.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyTransitGateway&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_transit_gateway_request`)
    %{
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("Options") => modify_transit_gateway_options(),
      required("TransitGatewayId") => String.t()
    }
  """

  @spec modify_transit_gateway(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_transit_gateway_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_transit_gateway(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyTransitGateway", input, options)
  end

  @doc """
  Modifies a reference (route) to a prefix list in a specified transit gateway
  route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyTransitGatewayPrefixListReference&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_transit_gateway_prefix_list_reference_request`)
    %{
      optional("Blackhole") => boolean(),
      optional("DryRun") => boolean(),
      optional("TransitGatewayAttachmentId") => String.t(),
      required("PrefixListId") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec modify_transit_gateway_prefix_list_reference(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_transit_gateway_prefix_list_reference_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_transit_gateway_prefix_list_reference(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyTransitGatewayPrefixListReference", input, options)
  end

  @doc """
  Modifies the specified VPC attachment.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyTransitGatewayVpcAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_transit_gateway_vpc_attachment_request`)
    %{
      optional("AddSubnetIds") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("Options") => modify_transit_gateway_vpc_attachment_request_options(),
      optional("RemoveSubnetIds") => list(String.t()()),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec modify_transit_gateway_vpc_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_transit_gateway_vpc_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_transit_gateway_vpc_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyTransitGatewayVpcAttachment", input, options)
  end

  @doc """
  Modifies the configuration of the specified Amazon Web Services Verified Access
  endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVerifiedAccessEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_verified_access_endpoint_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("LoadBalancerOptions") => modify_verified_access_endpoint_load_balancer_options(),
      optional("NetworkInterfaceOptions") => modify_verified_access_endpoint_eni_options(),
      optional("VerifiedAccessGroupId") => String.t(),
      required("VerifiedAccessEndpointId") => String.t()
    }
  """

  @spec modify_verified_access_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_verified_access_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_verified_access_endpoint(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVerifiedAccessEndpoint", input, options)
  end

  @doc """
  Modifies the specified Amazon Web Services Verified Access endpoint policy.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVerifiedAccessEndpointPolicy&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_verified_access_endpoint_policy_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("PolicyDocument") => String.t(),
      optional("PolicyEnabled") => boolean(),
      optional("SseSpecification") => verified_access_sse_specification_request(),
      required("VerifiedAccessEndpointId") => String.t()
    }
  """

  @spec modify_verified_access_endpoint_policy(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_verified_access_endpoint_policy_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_verified_access_endpoint_policy(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVerifiedAccessEndpointPolicy", input, options)
  end

  @doc """
  Modifies the specified Amazon Web Services Verified Access group configuration.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVerifiedAccessGroup&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_verified_access_group_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("VerifiedAccessInstanceId") => String.t(),
      required("VerifiedAccessGroupId") => String.t()
    }
  """

  @spec modify_verified_access_group(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_verified_access_group_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_verified_access_group(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVerifiedAccessGroup", input, options)
  end

  @doc """
  Modifies the specified Amazon Web Services Verified Access group policy.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVerifiedAccessGroupPolicy&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_verified_access_group_policy_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("PolicyDocument") => String.t(),
      optional("PolicyEnabled") => boolean(),
      optional("SseSpecification") => verified_access_sse_specification_request(),
      required("VerifiedAccessGroupId") => String.t()
    }
  """

  @spec modify_verified_access_group_policy(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_verified_access_group_policy_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_verified_access_group_policy(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVerifiedAccessGroupPolicy", input, options)
  end

  @doc """
  Modifies the configuration of the specified Amazon Web Services Verified Access
  instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVerifiedAccessInstance&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_verified_access_instance_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      required("VerifiedAccessInstanceId") => String.t()
    }
  """

  @spec modify_verified_access_instance(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_verified_access_instance_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_verified_access_instance(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVerifiedAccessInstance", input, options)
  end

  @doc """
  Modifies the logging configuration for the specified Amazon Web Services
  Verified Access instance.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVerifiedAccessInstanceLoggingConfiguration&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_verified_access_instance_logging_configuration_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("AccessLogs") => verified_access_log_options(),
      required("VerifiedAccessInstanceId") => String.t()
    }
  """

  @spec modify_verified_access_instance_logging_configuration(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, modify_verified_access_instance_logging_configuration_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_verified_access_instance_logging_configuration(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "ModifyVerifiedAccessInstanceLoggingConfiguration",
      input,
      options
    )
  end

  @doc """
  Modifies the configuration of the specified Amazon Web Services Verified Access
  trust provider.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVerifiedAccessTrustProvider&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_verified_access_trust_provider_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("Description") => String.t(),
      optional("DeviceOptions") => modify_verified_access_trust_provider_device_options(),
      optional("DryRun") => boolean(),
      optional("OidcOptions") => modify_verified_access_trust_provider_oidc_options(),
      optional("SseSpecification") => verified_access_sse_specification_request(),
      required("VerifiedAccessTrustProviderId") => String.t()
    }
  """

  @spec modify_verified_access_trust_provider(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_verified_access_trust_provider_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_verified_access_trust_provider(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVerifiedAccessTrustProvider", input, options)
  end

  @doc """
  You can modify several parameters of an existing EBS volume, including volume
  size, volume type, and IOPS capacity. If your EBS volume is attached to a
  current-generation EC2 instance type, you might be able to apply these changes
  without stopping the instance or detaching the volume from it. For more
  information about modifying EBS volumes, see [Amazon EBS Elastic
  Volumes](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-modify-volume.html)
  in the *Amazon EBS User Guide*. When you complete a resize operation on your
  volume, you need to extend the volume's file-system size to take advantage of
  the new storage capacity. For more information, see [Extend the file
  system](https://docs.aws.amazon.com/ebs/latest/userguide/recognize-expanded-volume-linux.html).
  For more information, see [Monitor the progress of volume
  modifications](https://docs.aws.amazon.com/ebs/latest/userguide/monitoring-volume-modifications.html)
  in the *Amazon EBS User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVolume&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_volume_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Iops") => integer(),
      optional("MultiAttachEnabled") => boolean(),
      optional("Size") => integer(),
      optional("Throughput") => integer(),
      optional("VolumeType") => list(any()),
      required("VolumeId") => String.t()
    }
  """

  @spec modify_volume(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_volume_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_volume(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVolume", input, options)
  end

  @doc """
  Modifies a volume attribute. By default, all I/O operations for the volume are
  suspended when the data on the volume is determined to be potentially
  inconsistent, to prevent undetectable, latent data corruption. The I/O access
  to the volume can be resumed by first enabling I/O access and then checking
  the data consistency on your volume.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVolumeAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_volume_attribute_request`)
    %{
      optional("AutoEnableIO") => attribute_boolean_value(),
      optional("DryRun") => boolean(),
      required("VolumeId") => String.t()
    }
  """

  @spec modify_volume_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_volume_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVolumeAttribute", input, options)
  end

  @doc """
  Modifies the specified attribute of the specified VPC.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpcAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpc_attribute_request`)
    %{
      optional("EnableDnsHostnames") => attribute_boolean_value(),
      optional("EnableDnsSupport") => attribute_boolean_value(),
      optional("EnableNetworkAddressUsageMetrics") => attribute_boolean_value(),
      required("VpcId") => String.t()
    }
  """

  @spec modify_vpc_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpc_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpcAttribute", input, options)
  end

  @doc """
  Modifies attributes of a specified VPC endpoint. The attributes that you can
  modify depend on the type of VPC endpoint (interface, gateway, or Gateway Load
  Balancer). For more information, see the [Amazon Web Services PrivateLink
  Guide](https://docs.aws.amazon.com/vpc/latest/privatelink/).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpcEndpoint&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpc_endpoint_request`)
    %{
      optional("AddRouteTableIds") => list(String.t()()),
      optional("AddSecurityGroupIds") => list(String.t()()),
      optional("AddSubnetIds") => list(String.t()()),
      optional("DnsOptions") => dns_options_specification(),
      optional("DryRun") => boolean(),
      optional("IpAddressType") => list(any()),
      optional("PolicyDocument") => String.t(),
      optional("PrivateDnsEnabled") => boolean(),
      optional("RemoveRouteTableIds") => list(String.t()()),
      optional("RemoveSecurityGroupIds") => list(String.t()()),
      optional("RemoveSubnetIds") => list(String.t()()),
      optional("ResetPolicy") => boolean(),
      optional("SubnetConfigurations") => list(subnet_configuration()()),
      required("VpcEndpointId") => String.t()
    }
  """

  @spec modify_vpc_endpoint(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpc_endpoint_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpc_endpoint(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpcEndpoint", input, options)
  end

  @doc """
  Modifies a connection notification for VPC endpoint or VPC endpoint service. You
  can change the SNS topic for the notification, or the events for which to be
  notified.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpcEndpointConnectionNotification&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpc_endpoint_connection_notification_request`)
    %{
      optional("ConnectionEvents") => list(String.t()()),
      optional("ConnectionNotificationArn") => String.t(),
      optional("DryRun") => boolean(),
      required("ConnectionNotificationId") => String.t()
    }
  """

  @spec modify_vpc_endpoint_connection_notification(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpc_endpoint_connection_notification_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpc_endpoint_connection_notification(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpcEndpointConnectionNotification", input, options)
  end

  @doc """
  Modifies the attributes of your VPC endpoint service configuration. You can
  change the Network Load Balancers or Gateway Load Balancers for your service,
  and you can specify whether acceptance is required for requests to connect to
  your endpoint service through an interface VPC endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpcEndpointServiceConfiguration&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpc_endpoint_service_configuration_request`)
    %{
      optional("AcceptanceRequired") => boolean(),
      optional("AddGatewayLoadBalancerArns") => list(String.t()()),
      optional("AddNetworkLoadBalancerArns") => list(String.t()()),
      optional("AddSupportedIpAddressTypes") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("PrivateDnsName") => String.t(),
      optional("RemoveGatewayLoadBalancerArns") => list(String.t()()),
      optional("RemoveNetworkLoadBalancerArns") => list(String.t()()),
      optional("RemovePrivateDnsName") => boolean(),
      optional("RemoveSupportedIpAddressTypes") => list(String.t()()),
      required("ServiceId") => String.t()
    }
  """

  @spec modify_vpc_endpoint_service_configuration(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpc_endpoint_service_configuration_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpc_endpoint_service_configuration(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpcEndpointServiceConfiguration", input, options)
  end

  @doc """
  Modifies the payer responsibility for your VPC endpoint service.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpcEndpointServicePayerResponsibility&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpc_endpoint_service_payer_responsibility_request`)
    %{
      optional("DryRun") => boolean(),
      required("PayerResponsibility") => list(any()),
      required("ServiceId") => String.t()
    }
  """

  @spec modify_vpc_endpoint_service_payer_responsibility(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, modify_vpc_endpoint_service_payer_responsibility_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpc_endpoint_service_payer_responsibility(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "ModifyVpcEndpointServicePayerResponsibility",
      input,
      options
    )
  end

  @doc """
  Modifies the permissions for your VPC endpoint service. You can add or remove
  permissions for service consumers (Amazon Web Services accounts, users, and
  IAM roles) to connect to your endpoint service.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpcEndpointServicePermissions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpc_endpoint_service_permissions_request`)
    %{
      optional("AddAllowedPrincipals") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("RemoveAllowedPrincipals") => list(String.t()()),
      required("ServiceId") => String.t()
    }
  """

  @spec modify_vpc_endpoint_service_permissions(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpc_endpoint_service_permissions_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpc_endpoint_service_permissions(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpcEndpointServicePermissions", input, options)
  end

  @doc """
  Modifies the VPC peering connection options on one side of a VPC peering
  connection.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpcPeeringConnectionOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpc_peering_connection_options_request`)
    %{
      optional("AccepterPeeringConnectionOptions") => peering_connection_options_request(),
      optional("DryRun") => boolean(),
      optional("RequesterPeeringConnectionOptions") => peering_connection_options_request(),
      required("VpcPeeringConnectionId") => String.t()
    }
  """

  @spec modify_vpc_peering_connection_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpc_peering_connection_options_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpc_peering_connection_options(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpcPeeringConnectionOptions", input, options)
  end

  @doc """
  Modifies the instance tenancy attribute of the specified VPC. You can change the
  instance tenancy attribute of a VPC to `default` only. You cannot change the
  instance tenancy attribute to `dedicated`. After you modify the tenancy of the
  VPC, any new instances that you launch into the VPC have a tenancy of
  `default`, unless you specify otherwise during launch. The tenancy of any
  existing instances in the VPC is not affected.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpcTenancy&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpc_tenancy_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceTenancy") => list(any()),
      required("VpcId") => String.t()
    }
  """

  @spec modify_vpc_tenancy(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpc_tenancy_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpc_tenancy(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpcTenancy", input, options)
  end

  @doc """
  Modifies the customer gateway or the target gateway of an Amazon Web Services
  Site-to-Site VPN connection. To modify the target gateway, the following
  migration options are available:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpnConnection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpn_connection_request`)
    %{
      optional("CustomerGatewayId") => String.t(),
      optional("DryRun") => boolean(),
      optional("TransitGatewayId") => String.t(),
      optional("VpnGatewayId") => String.t(),
      required("VpnConnectionId") => String.t()
    }
  """

  @spec modify_vpn_connection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpn_connection_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpn_connection(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpnConnection", input, options)
  end

  @doc """
  Modifies the connection options for your Site-to-Site VPN connection.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpnConnectionOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpn_connection_options_request`)
    %{
      optional("DryRun") => boolean(),
      optional("LocalIpv4NetworkCidr") => String.t(),
      optional("LocalIpv6NetworkCidr") => String.t(),
      optional("RemoteIpv4NetworkCidr") => String.t(),
      optional("RemoteIpv6NetworkCidr") => String.t(),
      required("VpnConnectionId") => String.t()
    }
  """

  @spec modify_vpn_connection_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpn_connection_options_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpn_connection_options(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpnConnectionOptions", input, options)
  end

  @doc """
  Modifies the VPN tunnel endpoint certificate.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpnTunnelCertificate&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpn_tunnel_certificate_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpnConnectionId") => String.t(),
      required("VpnTunnelOutsideIpAddress") => String.t()
    }
  """

  @spec modify_vpn_tunnel_certificate(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpn_tunnel_certificate_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpn_tunnel_certificate(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpnTunnelCertificate", input, options)
  end

  @doc """
  Modifies the options for a VPN tunnel in an Amazon Web Services Site-to-Site VPN
  connection. You can modify multiple options for a tunnel in a single request,
  but you can only modify one tunnel at a time. For more information, see
  [Site-to-Site VPN tunnel options for your Site-to-Site VPN
  connection](https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html) in
  the *Amazon Web Services Site-to-Site VPN User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ModifyVpnTunnelOptions&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:modify_vpn_tunnel_options_request`)
    %{
      optional("DryRun") => boolean(),
      optional("SkipTunnelReplacement") => boolean(),
      required("TunnelOptions") => modify_vpn_tunnel_options_specification(),
      required("VpnConnectionId") => String.t(),
      required("VpnTunnelOutsideIpAddress") => String.t()
    }
  """

  @spec modify_vpn_tunnel_options(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, modify_vpn_tunnel_options_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def modify_vpn_tunnel_options(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ModifyVpnTunnelOptions", input, options)
  end

  @doc """
  Enables detailed monitoring for a running instance. Otherwise, basic monitoring
  is enabled. For more information, see [Monitor your instances using
  CloudWatch](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html)
  in the *Amazon EC2 User Guide*. To disable detailed monitoring, see
  [UnmonitorInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_UnmonitorInstances.html).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20MonitorInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:monitor_instances_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceIds") => list(String.t()())
    }
  """

  @spec monitor_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, monitor_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def monitor_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "MonitorInstances", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20MoveAddressToVpc&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:move_address_to_vpc_request`)
    %{
      optional("DryRun") => boolean(),
      required("PublicIp") => String.t()
    }
  """

  @spec move_address_to_vpc(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, move_address_to_vpc_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def move_address_to_vpc(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "MoveAddressToVpc", input, options)
  end

  @doc """
  Move a BYOIPv4 CIDR to IPAM from a public IPv4 pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20MoveByoipCidrToIpam&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:move_byoip_cidr_to_ipam_request`)
    %{
      optional("DryRun") => boolean(),
      required("Cidr") => String.t(),
      required("IpamPoolId") => String.t(),
      required("IpamPoolOwner") => String.t()
    }
  """

  @spec move_byoip_cidr_to_ipam(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, move_byoip_cidr_to_ipam_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def move_byoip_cidr_to_ipam(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "MoveByoipCidrToIpam", input, options)
  end

  @doc """
  Provisions an IPv4 or IPv6 address range for use with your Amazon Web Services
  resources through bring your own IP addresses (BYOIP) and creates a
  corresponding address pool. After the address range is provisioned, it is
  ready to be advertised using `AdvertiseByoipCidr`. Amazon Web Services
  verifies that you own the address range and are authorized to advertise it.
  You must ensure that the address range is registered to you and that you
  created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the
  address range. For more information, see [Bring your own IP addresses
  (BYOIP)](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ProvisionByoipCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:provision_byoip_cidr_request`)
    %{
      optional("CidrAuthorizationContext") => cidr_authorization_context(),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("MultiRegion") => boolean(),
      optional("NetworkBorderGroup") => String.t(),
      optional("PoolTagSpecifications") => list(tag_specification()()),
      optional("PubliclyAdvertisable") => boolean(),
      required("Cidr") => String.t()
    }
  """

  @spec provision_byoip_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, provision_byoip_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def provision_byoip_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ProvisionByoipCidr", input, options)
  end

  @doc """
  Provisions your Autonomous System Number (ASN) for use in your Amazon Web
  Services account. This action requires authorization context for Amazon to
  bring the ASN to an Amazon Web Services account. For more information, see
  [Tutorial: Bring your ASN to
  IPAM](https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html) in
  the *Amazon VPC IPAM guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ProvisionIpamByoasn&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:provision_ipam_byoasn_request`)
    %{
      optional("DryRun") => boolean(),
      required("Asn") => String.t(),
      required("AsnAuthorizationContext") => asn_authorization_context(),
      required("IpamId") => String.t()
    }
  """

  @spec provision_ipam_byoasn(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, provision_ipam_byoasn_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def provision_ipam_byoasn(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ProvisionIpamByoasn", input, options)
  end

  @doc """
  Provision a CIDR to an IPAM pool. You can use this action to provision new CIDRs
  to a top-level pool or to transfer a CIDR from a top-level pool to a pool
  within it.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ProvisionIpamPoolCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:provision_ipam_pool_cidr_request`)
    %{
      optional("Cidr") => String.t(),
      optional("CidrAuthorizationContext") => ipam_cidr_authorization_context(),
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("IpamExternalResourceVerificationTokenId") => String.t(),
      optional("NetmaskLength") => integer(),
      optional("VerificationMethod") => list(any()),
      required("IpamPoolId") => String.t()
    }
  """

  @spec provision_ipam_pool_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, provision_ipam_pool_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def provision_ipam_pool_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ProvisionIpamPoolCidr", input, options)
  end

  @doc """
  Provision a CIDR to a public IPv4 pool.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ProvisionPublicIpv4PoolCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:provision_public_ipv4_pool_cidr_request`)
    %{
      optional("DryRun") => boolean(),
      optional("NetworkBorderGroup") => String.t(),
      required("IpamPoolId") => String.t(),
      required("NetmaskLength") => integer(),
      required("PoolId") => String.t()
    }
  """

  @spec provision_public_ipv4_pool_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, provision_public_ipv4_pool_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def provision_public_ipv4_pool_cidr(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ProvisionPublicIpv4PoolCidr", input, options)
  end

  @doc """
  Purchase the Capacity Block for use with your account. With Capacity Blocks you
  ensure GPU capacity is available for machine learning (ML) workloads. You must
  specify the ID of the Capacity Block offering you are purchasing.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20PurchaseCapacityBlock&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:purchase_capacity_block_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("CapacityBlockOfferingId") => String.t(),
      required("InstancePlatform") => list(any())
    }
  """

  @spec purchase_capacity_block(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, purchase_capacity_block_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def purchase_capacity_block(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "PurchaseCapacityBlock", input, options)
  end

  @doc """
  Purchase a reservation with configurations that match those of your Dedicated
  Host. You must have active Dedicated Hosts in your account before you purchase
  a reservation. This action results in the specified reservation being
  purchased and charged to your account.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20PurchaseHostReservation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:purchase_host_reservation_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("CurrencyCode") => list(any()),
      optional("LimitPrice") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("HostIdSet") => list(String.t()()),
      required("OfferingId") => String.t()
    }
  """

  @spec purchase_host_reservation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, purchase_host_reservation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def purchase_host_reservation(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "PurchaseHostReservation", input, options)
  end

  @doc """
  Purchases a Reserved Instance for use with your account. With Reserved
  Instances, you pay a lower hourly rate compared to On-Demand instance pricing.
  Use `DescribeReservedInstancesOfferings` to get a list of Reserved Instance
  offerings that match your specifications. After you've purchased a Reserved
  Instance, you can check for your new Reserved Instance with
  `DescribeReservedInstances`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20PurchaseReservedInstancesOffering&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:purchase_reserved_instances_offering_request`)
    %{
      optional("DryRun") => boolean(),
      optional("LimitPrice") => reserved_instance_limit_price(),
      optional("PurchaseTime") => non_neg_integer(),
      required("InstanceCount") => integer(),
      required("ReservedInstancesOfferingId") => String.t()
    }
  """

  @spec purchase_reserved_instances_offering(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, purchase_reserved_instances_offering_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def purchase_reserved_instances_offering(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "PurchaseReservedInstancesOffering", input, options)
  end

  @doc """
  You can no longer purchase Scheduled Instances. Purchases the Scheduled
  Instances with the specified schedule.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20PurchaseScheduledInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:purchase_scheduled_instances_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      required("PurchaseRequests") => list(purchase_request()())
    }
  """

  @spec purchase_scheduled_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, purchase_scheduled_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def purchase_scheduled_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "PurchaseScheduledInstances", input, options)
  end

  @doc """
  Requests a reboot of the specified instances. This operation is asynchronous; it
  only queues a request to reboot the specified instances. The operation
  succeeds if the instances are valid and belong to you. Requests to reboot
  terminated instances are ignored. If an instance does not cleanly shut down
  within a few minutes, Amazon EC2 performs a hard reboot.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RebootInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reboot_instances_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceIds") => list(String.t()())
    }
  """

  @spec reboot_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def reboot_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RebootInstances", input, options)
  end

  @doc """
  Registers an AMI. When you're creating an instance-store backed AMI, registering
  the AMI is the final step in the creation process. For more information about
  creating AMIs, see [Create your own
  AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html)
  in the *Amazon Elastic Compute Cloud User Guide*. For Amazon EBS-backed
  instances, `CreateImage` creates and registers the AMI in a single request, so
  you don't have to register the AMI yourself. We recommend that you always use
  `CreateImage` unless you have a specific reason to use RegisterImage. If
  needed, you can deregister an AMI at any time. Any modifications you make to
  an AMI backed by an instance store volume invalidates its registration. If you
  make changes to an image, deregister the previous image and register the new
  image.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RegisterImage&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:register_image_request`)
    %{
      optional("Architecture") => list(any()),
      optional("BillingProducts") => list(String.t()()),
      optional("BlockDeviceMappings") => list(block_device_mapping()()),
      optional("BootMode") => list(any()),
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("EnaSupport") => boolean(),
      optional("ImageLocation") => String.t(),
      optional("ImdsSupport") => list(any()),
      optional("KernelId") => String.t(),
      optional("RamdiskId") => String.t(),
      optional("RootDeviceName") => String.t(),
      optional("SriovNetSupport") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("TpmSupport") => list(any()),
      optional("UefiData") => String.t(),
      optional("VirtualizationType") => String.t(),
      required("Name") => String.t()
    }
  """

  @spec register_image(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, register_image_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def register_image(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RegisterImage", input, options)
  end

  @doc """
  Registers a set of tag keys to include in scheduled event notifications for your
  resources.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RegisterInstanceEventNotificationAttributes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:register_instance_event_notification_attributes_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceTagAttribute") => register_instance_tag_attribute_request()
    }
  """

  @spec register_instance_event_notification_attributes(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, register_instance_event_notification_attributes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def register_instance_event_notification_attributes(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "RegisterInstanceEventNotificationAttributes",
      input,
      options
    )
  end

  @doc """
  Registers members (network interfaces) with the transit gateway multicast group.
  A member is a network interface associated with a supported EC2 instance that
  receives multicast traffic. For more information, see [Multicast on transit
  gateways](https://docs.aws.amazon.com/vpc/latest/tgw/tgw-multicast-overview.html)
  in the *Amazon Web Services Transit Gateways Guide*. After you add the
  members, use
  [SearchTransitGatewayMulticastGroups](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html)
  to verify that the members were added to the transit gateway multicast group.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RegisterTransitGatewayMulticastGroupMembers&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:register_transit_gateway_multicast_group_members_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GroupIpAddress") => String.t(),
      required("NetworkInterfaceIds") => list(String.t()()),
      required("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec register_transit_gateway_multicast_group_members(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, register_transit_gateway_multicast_group_members_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def register_transit_gateway_multicast_group_members(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "RegisterTransitGatewayMulticastGroupMembers",
      input,
      options
    )
  end

  @doc """
  Registers sources (network interfaces) with the specified transit gateway
  multicast group.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RegisterTransitGatewayMulticastGroupSources&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:register_transit_gateway_multicast_group_sources_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GroupIpAddress") => String.t(),
      required("NetworkInterfaceIds") => list(String.t()()),
      required("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec register_transit_gateway_multicast_group_sources(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, register_transit_gateway_multicast_group_sources_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def register_transit_gateway_multicast_group_sources(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "RegisterTransitGatewayMulticastGroupSources",
      input,
      options
    )
  end

  @doc """
  Rejects a request to associate cross-account subnets with a transit gateway
  multicast domain.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RejectTransitGatewayMulticastDomainAssociations&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reject_transit_gateway_multicast_domain_associations_request`)
    %{
      optional("DryRun") => boolean(),
      optional("SubnetIds") => list(String.t()()),
      optional("TransitGatewayAttachmentId") => String.t(),
      optional("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec reject_transit_gateway_multicast_domain_associations(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, reject_transit_gateway_multicast_domain_associations_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def reject_transit_gateway_multicast_domain_associations(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "RejectTransitGatewayMulticastDomainAssociations",
      input,
      options
    )
  end

  @doc """
  Rejects a transit gateway peering attachment request.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RejectTransitGatewayPeeringAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reject_transit_gateway_peering_attachment_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec reject_transit_gateway_peering_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, reject_transit_gateway_peering_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def reject_transit_gateway_peering_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RejectTransitGatewayPeeringAttachment", input, options)
  end

  @doc """
  Rejects a request to attach a VPC to a transit gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RejectTransitGatewayVpcAttachment&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reject_transit_gateway_vpc_attachment_request`)
    %{
      optional("DryRun") => boolean(),
      required("TransitGatewayAttachmentId") => String.t()
    }
  """

  @spec reject_transit_gateway_vpc_attachment(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, reject_transit_gateway_vpc_attachment_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def reject_transit_gateway_vpc_attachment(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RejectTransitGatewayVpcAttachment", input, options)
  end

  @doc """
  Rejects VPC endpoint connection requests to your VPC endpoint service.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RejectVpcEndpointConnections&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reject_vpc_endpoint_connections_request`)
    %{
      optional("DryRun") => boolean(),
      required("ServiceId") => String.t(),
      required("VpcEndpointIds") => list(String.t()())
    }
  """

  @spec reject_vpc_endpoint_connections(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, reject_vpc_endpoint_connections_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def reject_vpc_endpoint_connections(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RejectVpcEndpointConnections", input, options)
  end

  @doc """
  Rejects a VPC peering connection request. The VPC peering connection must be in
  the `pending-acceptance` state. Use the `DescribeVpcPeeringConnections`
  request to view your outstanding VPC peering connection requests. To delete an
  active VPC peering connection, or to delete a VPC peering connection request
  that you initiated, use `DeleteVpcPeeringConnection`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RejectVpcPeeringConnection&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reject_vpc_peering_connection_request`)
    %{
      optional("DryRun") => boolean(),
      required("VpcPeeringConnectionId") => String.t()
    }
  """

  @spec reject_vpc_peering_connection(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, reject_vpc_peering_connection_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def reject_vpc_peering_connection(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RejectVpcPeeringConnection", input, options)
  end

  @doc """
  Releases the specified Elastic IP address. [Default VPC] Releasing an Elastic IP
  address automatically disassociates it from any instance that it's associated
  with. To disassociate an Elastic IP address without releasing it, use
  `DisassociateAddress`. [Nondefault VPC] You must use `DisassociateAddress` to
  disassociate the Elastic IP address before you can release it. Otherwise,
  Amazon EC2 returns an error (`InvalidIPAddress.InUse`).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReleaseAddress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:release_address_request`)
    %{
      optional("AllocationId") => String.t(),
      optional("DryRun") => boolean(),
      optional("NetworkBorderGroup") => String.t(),
      optional("PublicIp") => String.t()
    }
  """

  @spec release_address(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def release_address(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReleaseAddress", input, options)
  end

  @doc """
  When you no longer want to use an On-Demand Dedicated Host it can be released.
  On-Demand billing is stopped and the host goes into `released` state. The host
  ID of Dedicated Hosts that have been released can no longer be specified in
  another request, for example, to modify the host. You must stop or terminate
  all instances on a host before it can be released. When Dedicated Hosts are
  released, it may take some time for them to stop counting toward your limit
  and you may receive capacity errors when trying to allocate new Dedicated
  Hosts. Wait a few minutes and then try again.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReleaseHosts&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:release_hosts_request`)
    %{
      required("HostIds") => list(String.t()())
    }
  """

  @spec release_hosts(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, release_hosts_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def release_hosts(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReleaseHosts", input, options)
  end

  @doc """
  Release an allocation within an IPAM pool. The Region you use should be the IPAM
  pool locale. The locale is the Amazon Web Services Region where this IPAM pool
  is available for allocations. You can only use this action to release manual
  allocations. To remove an allocation for a resource without deleting the
  resource, set its monitored state to false using
  [ModifyIpamResourceCidr](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyIpamResourceCidr.html).
  For more information, see [Release an
  allocation](https://docs.aws.amazon.com/vpc/latest/ipam/release-alloc-ipam.html)
  in the *Amazon VPC IPAM User Guide*. All EC2 API actions follow an [eventual
  consistency](https://docs.aws.amazon.com/ec2/latest/devguide/eventual-consistency.html)
  model.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReleaseIpamPoolAllocation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:release_ipam_pool_allocation_request`)
    %{
      optional("DryRun") => boolean(),
      required("Cidr") => String.t(),
      required("IpamPoolAllocationId") => String.t(),
      required("IpamPoolId") => String.t()
    }
  """

  @spec release_ipam_pool_allocation(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, release_ipam_pool_allocation_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def release_ipam_pool_allocation(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReleaseIpamPoolAllocation", input, options)
  end

  @doc """
  Replaces an IAM instance profile for the specified running instance. You can use
  this action to change the IAM instance profile that's associated with an
  instance without having to disassociate the existing IAM instance profile
  first.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReplaceIamInstanceProfileAssociation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:replace_iam_instance_profile_association_request`)
    %{
      required("AssociationId") => String.t(),
      required("IamInstanceProfile") => iam_instance_profile_specification()
    }
  """

  @spec replace_iam_instance_profile_association(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, replace_iam_instance_profile_association_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def replace_iam_instance_profile_association(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReplaceIamInstanceProfileAssociation", input, options)
  end

  @doc """
  Changes which network ACL a subnet is associated with. By default when you
  create a subnet, it's automatically associated with the default network ACL.
  For more information, see [Network
  ACLs](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReplaceNetworkAclAssociation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:replace_network_acl_association_request`)
    %{
      optional("DryRun") => boolean(),
      required("AssociationId") => String.t(),
      required("NetworkAclId") => String.t()
    }
  """

  @spec replace_network_acl_association(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, replace_network_acl_association_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def replace_network_acl_association(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReplaceNetworkAclAssociation", input, options)
  end

  @doc """
  Replaces an entry (rule) in a network ACL. For more information, see [Network
  ACLs](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReplaceNetworkAclEntry&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:replace_network_acl_entry_request`)
    %{
      optional("CidrBlock") => String.t(),
      optional("DryRun") => boolean(),
      optional("IcmpTypeCode") => icmp_type_code(),
      optional("Ipv6CidrBlock") => String.t(),
      optional("PortRange") => port_range(),
      required("Egress") => boolean(),
      required("NetworkAclId") => String.t(),
      required("Protocol") => String.t(),
      required("RuleAction") => list(any()),
      required("RuleNumber") => integer()
    }
  """

  @spec replace_network_acl_entry(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def replace_network_acl_entry(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReplaceNetworkAclEntry", input, options)
  end

  @doc """
  Replaces an existing route within a route table in a VPC. You must specify
  either a destination CIDR block or a prefix list ID. You must also specify
  exactly one of the resources from the parameter list, or reset the local route
  to its default target.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReplaceRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:replace_route_request`)
    %{
      optional("CarrierGatewayId") => String.t(),
      optional("CoreNetworkArn") => String.t(),
      optional("DestinationCidrBlock") => String.t(),
      optional("DestinationIpv6CidrBlock") => String.t(),
      optional("DestinationPrefixListId") => String.t(),
      optional("DryRun") => boolean(),
      optional("EgressOnlyInternetGatewayId") => String.t(),
      optional("GatewayId") => String.t(),
      optional("InstanceId") => String.t(),
      optional("LocalGatewayId") => String.t(),
      optional("LocalTarget") => boolean(),
      optional("NatGatewayId") => String.t(),
      optional("NetworkInterfaceId") => String.t(),
      optional("TransitGatewayId") => String.t(),
      optional("VpcEndpointId") => String.t(),
      optional("VpcPeeringConnectionId") => String.t(),
      required("RouteTableId") => String.t()
    }
  """

  @spec replace_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def replace_route(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReplaceRoute", input, options)
  end

  @doc """
  Changes the route table associated with a given subnet, internet gateway, or
  virtual private gateway in a VPC. After the operation completes, the subnet or
  gateway uses the routes in the new route table. For more information about
  route tables, see [Route
  tables](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html)
  in the *Amazon VPC User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReplaceRouteTableAssociation&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:replace_route_table_association_request`)
    %{
      optional("DryRun") => boolean(),
      required("AssociationId") => String.t(),
      required("RouteTableId") => String.t()
    }
  """

  @spec replace_route_table_association(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, replace_route_table_association_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def replace_route_table_association(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReplaceRouteTableAssociation", input, options)
  end

  @doc """
  Replaces the specified route in the specified transit gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReplaceTransitGatewayRoute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:replace_transit_gateway_route_request`)
    %{
      optional("Blackhole") => boolean(),
      optional("DryRun") => boolean(),
      optional("TransitGatewayAttachmentId") => String.t(),
      required("DestinationCidrBlock") => String.t(),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec replace_transit_gateway_route(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, replace_transit_gateway_route_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def replace_transit_gateway_route(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReplaceTransitGatewayRoute", input, options)
  end

  @doc """
  Trigger replacement of specified VPN tunnel.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReplaceVpnTunnel&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:replace_vpn_tunnel_request`)
    %{
      optional("ApplyPendingMaintenance") => boolean(),
      optional("DryRun") => boolean(),
      required("VpnConnectionId") => String.t(),
      required("VpnTunnelOutsideIpAddress") => String.t()
    }
  """

  @spec replace_vpn_tunnel(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, replace_vpn_tunnel_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def replace_vpn_tunnel(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReplaceVpnTunnel", input, options)
  end

  @doc """
  Submits feedback about the status of an instance. The instance must be in the
  `running` state. If your experience with the instance differs from the
  instance status returned by `DescribeInstanceStatus`, use
  `ReportInstanceStatus` to report your experience with the instance. Amazon EC2
  collects this information to improve the accuracy of status checks.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ReportInstanceStatus&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:report_instance_status_request`)
    %{
      optional("Description") => String.t(),
      optional("DryRun") => boolean(),
      optional("EndTime") => non_neg_integer(),
      optional("StartTime") => non_neg_integer(),
      required("Instances") => list(String.t()()),
      required("ReasonCodes") => list(list(any())()),
      required("Status") => list(any())
    }
  """

  @spec report_instance_status(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def report_instance_status(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ReportInstanceStatus", input, options)
  end

  @doc """
  Creates a Spot Fleet request. The Spot Fleet request specifies the total target
  capacity and the On-Demand target capacity. Amazon EC2 calculates the
  difference between the total capacity and On-Demand capacity, and launches the
  difference as Spot capacity.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RequestSpotFleet&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:request_spot_fleet_request`)
    %{
      optional("DryRun") => boolean(),
      required("SpotFleetRequestConfig") => spot_fleet_request_config_data()
    }
  """

  @spec request_spot_fleet(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, request_spot_fleet_response(), any()}
          | {:error, {:unexpected_response, any()}}

  def request_spot_fleet(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RequestSpotFleet", input, options)
  end

  @doc """
  Creates a Spot Instance request.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RequestSpotInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:request_spot_instances_request`)
    %{
      optional("AvailabilityZoneGroup") => String.t(),
      optional("BlockDurationMinutes") => integer(),
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("InstanceCount") => integer(),
      optional("InstanceInterruptionBehavior") => list(any()),
      optional("LaunchGroup") => String.t(),
      optional("LaunchSpecification") => request_spot_launch_specification(),
      optional("SpotPrice") => String.t(),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("Type") => list(any()),
      optional("ValidFrom") => non_neg_integer(),
      optional("ValidUntil") => non_neg_integer()
    }
  """

  @spec request_spot_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, request_spot_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def request_spot_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RequestSpotInstances", input, options)
  end

  @doc """
  Resets the attribute of the specified IP address. For requirements, see [Using
  reverse DNS for email
  applications](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS).

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ResetAddressAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reset_address_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("AllocationId") => String.t(),
      required("Attribute") => list(any())
    }
  """

  @spec reset_address_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, reset_address_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def reset_address_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ResetAddressAttribute", input, options)
  end

  @doc """
  Resets the default KMS key for EBS encryption for your account in this Region to
  the Amazon Web Services managed KMS key for EBS.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ResetEbsDefaultKmsKeyId&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reset_ebs_default_kms_key_id_request`)
    %{
      optional("DryRun") => boolean()
    }
  """

  @spec reset_ebs_default_kms_key_id(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, reset_ebs_default_kms_key_id_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def reset_ebs_default_kms_key_id(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ResetEbsDefaultKmsKeyId", input, options)
  end

  @doc """
  Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its
  default value. You can only reset the load permission attribute.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ResetFpgaImageAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reset_fpga_image_attribute_request`)
    %{
      optional("Attribute") => list(any()),
      optional("DryRun") => boolean(),
      required("FpgaImageId") => String.t()
    }
  """

  @spec reset_fpga_image_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, reset_fpga_image_attribute_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def reset_fpga_image_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ResetFpgaImageAttribute", input, options)
  end

  @doc """
  Resets an attribute of an AMI to its default value.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ResetImageAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reset_image_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("ImageId") => String.t()
    }
  """

  @spec reset_image_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def reset_image_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ResetImageAttribute", input, options)
  end

  @doc """
  Resets an attribute of an instance to its default value. To reset the `kernel`
  or `ramdisk`, the instance must be in a stopped state. To reset the
  `sourceDestCheck`, the instance can be either running or stopped.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ResetInstanceAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reset_instance_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("InstanceId") => String.t()
    }
  """

  @spec reset_instance_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def reset_instance_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ResetInstanceAttribute", input, options)
  end

  @doc """
  Resets a network interface attribute. You can specify only one attribute at a
  time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ResetNetworkInterfaceAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reset_network_interface_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      optional("SourceDestCheck") => String.t(),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec reset_network_interface_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def reset_network_interface_attribute(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ResetNetworkInterfaceAttribute", input, options)
  end

  @doc """
  Resets permission settings for the specified snapshot.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20ResetSnapshotAttribute&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:reset_snapshot_attribute_request`)
    %{
      optional("DryRun") => boolean(),
      required("Attribute") => list(any()),
      required("SnapshotId") => String.t()
    }
  """

  @spec reset_snapshot_attribute(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def reset_snapshot_attribute(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "ResetSnapshotAttribute", input, options)
  end

  @doc """
  This action is deprecated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RestoreAddressToClassic&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:restore_address_to_classic_request`)
    %{
      optional("DryRun") => boolean(),
      required("PublicIp") => String.t()
    }
  """

  @spec restore_address_to_classic(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, restore_address_to_classic_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def restore_address_to_classic(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RestoreAddressToClassic", input, options)
  end

  @doc """
  Restores an AMI from the Recycle Bin. For more information, see [Recycle
  Bin](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html) in
  the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RestoreImageFromRecycleBin&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:restore_image_from_recycle_bin_request`)
    %{
      optional("DryRun") => boolean(),
      required("ImageId") => String.t()
    }
  """

  @spec restore_image_from_recycle_bin(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, restore_image_from_recycle_bin_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def restore_image_from_recycle_bin(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RestoreImageFromRecycleBin", input, options)
  end

  @doc """
  Restores the entries from a previous version of a managed prefix list to a new
  version of the prefix list.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RestoreManagedPrefixListVersion&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:restore_managed_prefix_list_version_request`)
    %{
      optional("DryRun") => boolean(),
      required("CurrentVersion") => float(),
      required("PrefixListId") => String.t(),
      required("PreviousVersion") => float()
    }
  """

  @spec restore_managed_prefix_list_version(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, restore_managed_prefix_list_version_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def restore_managed_prefix_list_version(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RestoreManagedPrefixListVersion", input, options)
  end

  @doc """
  Restores a snapshot from the Recycle Bin. For more information, see [Restore
  snapshots from the Recycle
  Bin](https://docs.aws.amazon.com/ebs/latest/userguide/recycle-bin-working-with-snaps.html#recycle-bin-restore-snaps)
  in the *Amazon EBS User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RestoreSnapshotFromRecycleBin&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:restore_snapshot_from_recycle_bin_request`)
    %{
      optional("DryRun") => boolean(),
      required("SnapshotId") => String.t()
    }
  """

  @spec restore_snapshot_from_recycle_bin(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, restore_snapshot_from_recycle_bin_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def restore_snapshot_from_recycle_bin(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RestoreSnapshotFromRecycleBin", input, options)
  end

  @doc """
  Restores an archived Amazon EBS snapshot for use temporarily or permanently, or
  modifies the restore period or restore type for a snapshot that was previously
  temporarily restored.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RestoreSnapshotTier&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:restore_snapshot_tier_request`)
    %{
      optional("DryRun") => boolean(),
      optional("PermanentRestore") => boolean(),
      optional("TemporaryRestoreDays") => integer(),
      required("SnapshotId") => String.t()
    }
  """

  @spec restore_snapshot_tier(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, restore_snapshot_tier_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def restore_snapshot_tier(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RestoreSnapshotTier", input, options)
  end

  @doc """
  Removes an ingress authorization rule from a Client VPN endpoint.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RevokeClientVpnIngress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:revoke_client_vpn_ingress_request`)
    %{
      optional("AccessGroupId") => String.t(),
      optional("DryRun") => boolean(),
      optional("RevokeAllGroups") => boolean(),
      required("ClientVpnEndpointId") => String.t(),
      required("TargetNetworkCidr") => String.t()
    }
  """

  @spec revoke_client_vpn_ingress(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, revoke_client_vpn_ingress_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def revoke_client_vpn_ingress(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RevokeClientVpnIngress", input, options)
  end

  @doc """
  Removes the specified outbound (egress) rules from the specified security group.
  You can specify rules using either rule IDs or security group rule properties.
  If you use rule properties, the values that you specify (for example, ports)
  must match the existing rule's values exactly. Each rule has a protocol, from
  and to ports, and destination (CIDR range, security group, or prefix list).
  For the TCP and UDP protocols, you must also specify the destination port or
  range of ports. For the ICMP protocol, you must also specify the ICMP type and
  code. If the security group rule has a description, you do not need to specify
  the description to revoke the rule.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RevokeSecurityGroupEgress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:revoke_security_group_egress_request`)
    %{
      optional("CidrIp") => String.t(),
      optional("DryRun") => boolean(),
      optional("FromPort") => integer(),
      optional("IpPermissions") => list(ip_permission()()),
      optional("IpProtocol") => String.t(),
      optional("SecurityGroupRuleIds") => list(String.t()()),
      optional("SourceSecurityGroupName") => String.t(),
      optional("SourceSecurityGroupOwnerId") => String.t(),
      optional("ToPort") => integer(),
      required("GroupId") => String.t()
    }
  """

  @spec revoke_security_group_egress(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, revoke_security_group_egress_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def revoke_security_group_egress(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RevokeSecurityGroupEgress", input, options)
  end

  @doc """
  Removes the specified inbound (ingress) rules from a security group. You can
  specify rules using either rule IDs or security group rule properties. If you
  use rule properties, the values that you specify (for example, ports) must
  match the existing rule's values exactly. Each rule has a protocol, from and
  to ports, and source (CIDR range, security group, or prefix list). For the TCP
  and UDP protocols, you must also specify the destination port or range of
  ports. For the ICMP protocol, you must also specify the ICMP type and code. If
  the security group rule has a description, you do not need to specify the
  description to revoke the rule.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RevokeSecurityGroupIngress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:revoke_security_group_ingress_request`)
    %{
      optional("CidrIp") => String.t(),
      optional("DryRun") => boolean(),
      optional("FromPort") => integer(),
      optional("GroupId") => String.t(),
      optional("GroupName") => String.t(),
      optional("IpPermissions") => list(ip_permission()()),
      optional("IpProtocol") => String.t(),
      optional("SecurityGroupRuleIds") => list(String.t()()),
      optional("SourceSecurityGroupName") => String.t(),
      optional("SourceSecurityGroupOwnerId") => String.t(),
      optional("ToPort") => integer()
    }
  """

  @spec revoke_security_group_ingress(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, revoke_security_group_ingress_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def revoke_security_group_ingress(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RevokeSecurityGroupIngress", input, options)
  end

  @doc """
  Launches the specified number of instances using an AMI for which you have
  permissions. You can specify a number of options, or leave the default
  options. The following rules apply:

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RunInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:run_instances_request`)
    %{
      optional("SecurityGroupIds") => list(String.t()()),
      optional("CreditSpecification") => credit_specification_request(),
      optional("MetadataOptions") => instance_metadata_options_request(),
      optional("EnablePrimaryIpv6") => boolean(),
      optional("BlockDeviceMappings") => list(block_device_mapping()()),
      optional("ClientToken") => String.t(),
      optional("InstanceInitiatedShutdownBehavior") => list(any()),
      optional("LicenseSpecifications") => list(license_configuration_request()()),
      optional("Ipv6AddressCount") => integer(),
      optional("PrivateIpAddress") => String.t(),
      optional("Ipv6Addresses") => list(instance_ipv6_address()()),
      optional("Monitoring") => run_instances_monitoring_enabled(),
      optional("KernelId") => String.t(),
      optional("RamdiskId") => String.t(),
      optional("ElasticGpuSpecification") => list(elastic_gpu_specification()()),
      required("MinCount") => integer(),
      optional("HibernationOptions") => hibernation_options_request(),
      optional("MaintenanceOptions") => instance_maintenance_options_request(),
      optional("KeyName") => String.t(),
      optional("InstanceType") => list(any()),
      optional("EbsOptimized") => boolean(),
      optional("CapacityReservationSpecification") => capacity_reservation_specification(),
      optional("AdditionalInfo") => String.t(),
      optional("DisableApiStop") => boolean(),
      optional("UserData") => String.t(),
      optional("DisableApiTermination") => boolean(),
      optional("CpuOptions") => cpu_options_request(),
      optional("DryRun") => boolean(),
      optional("SecurityGroups") => list(String.t()()),
      optional("Placement") => placement(),
      optional("PrivateDnsNameOptions") => private_dns_name_options_request(),
      optional("SubnetId") => String.t(),
      optional("IamInstanceProfile") => iam_instance_profile_specification(),
      optional("EnclaveOptions") => enclave_options_request(),
      optional("ImageId") => String.t(),
      optional("LaunchTemplate") => launch_template_specification(),
      optional("InstanceMarketOptions") => instance_market_options_request(),
      required("MaxCount") => integer(),
      optional("NetworkInterfaces") => list(instance_network_interface_specification()()),
      optional("TagSpecifications") => list(tag_specification()()),
      optional("ElasticInferenceAccelerators") => list(elastic_inference_accelerator()())
    }
  """

  @spec run_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, reservation(), any()}
          | {:error, {:unexpected_response, any()}}

  def run_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RunInstances", input, options)
  end

  @doc """
  Launches the specified Scheduled Instances. Before you can launch a Scheduled
  Instance, you must purchase it and obtain an identifier using
  `PurchaseScheduledInstances`.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20RunScheduledInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:run_scheduled_instances_request`)
    %{
      optional("ClientToken") => String.t(),
      optional("DryRun") => boolean(),
      optional("InstanceCount") => integer(),
      required("LaunchSpecification") => scheduled_instances_launch_specification(),
      required("ScheduledInstanceId") => String.t()
    }
  """

  @spec run_scheduled_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, run_scheduled_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def run_scheduled_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "RunScheduledInstances", input, options)
  end

  @doc """
  Searches for routes in the specified local gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20SearchLocalGatewayRoutes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:search_local_gateway_routes_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("LocalGatewayRouteTableId") => String.t()
    }
  """

  @spec search_local_gateway_routes(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, search_local_gateway_routes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def search_local_gateway_routes(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "SearchLocalGatewayRoutes", input, options)
  end

  @doc """
  Searches one or more transit gateway multicast groups and returns the group
  membership information.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20SearchTransitGatewayMulticastGroups&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:search_transit_gateway_multicast_groups_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Filters") => list(filter()()),
      optional("MaxResults") => integer(),
      optional("NextToken") => String.t(),
      required("TransitGatewayMulticastDomainId") => String.t()
    }
  """

  @spec search_transit_gateway_multicast_groups(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, search_transit_gateway_multicast_groups_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def search_transit_gateway_multicast_groups(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "SearchTransitGatewayMulticastGroups", input, options)
  end

  @doc """
  Searches for routes in the specified transit gateway route table.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20SearchTransitGatewayRoutes&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:search_transit_gateway_routes_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxResults") => integer(),
      required("Filters") => list(filter()()),
      required("TransitGatewayRouteTableId") => String.t()
    }
  """

  @spec search_transit_gateway_routes(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, search_transit_gateway_routes_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def search_transit_gateway_routes(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "SearchTransitGatewayRoutes", input, options)
  end

  @doc """
  Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a
  *kernel panic* (on Linux instances), or a *blue screen*/*stop error* (on
  Windows instances). For instances based on Intel and AMD processors, the
  interrupt is received as a *non-maskable interrupt* (NMI). In general, the
  operating system crashes and reboots when a kernel panic or stop error is
  triggered. The operating system can also be configured to perform diagnostic
  tasks, such as generating a memory dump file, loading a secondary kernel, or
  obtaining a call trace.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20SendDiagnosticInterrupt&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:send_diagnostic_interrupt_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceId") => String.t()
    }
  """

  @spec send_diagnostic_interrupt(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def send_diagnostic_interrupt(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "SendDiagnosticInterrupt", input, options)
  end

  @doc """
  Starts an Amazon EBS-backed instance that you've previously stopped. Instances
  that use Amazon EBS volumes as their root devices can be quickly stopped and
  started. When an instance is stopped, the compute resources are released and
  you are not billed for instance usage. However, your root partition Amazon EBS
  volume remains and continues to persist your data, and you are charged for
  Amazon EBS volume usage. You can restart your instance at any time. Every time
  you start your instance, Amazon EC2 charges a one-minute minimum for instance
  usage, and thereafter charges per second for instance usage.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20StartInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:start_instances_request`)
    %{
      optional("AdditionalInfo") => String.t(),
      optional("DryRun") => boolean(),
      required("InstanceIds") => list(String.t()())
    }
  """

  @spec start_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, start_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def start_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "StartInstances", input, options)
  end

  @doc """
  Starts analyzing the specified Network Access Scope.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20StartNetworkInsightsAccessScopeAnalysis&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:start_network_insights_access_scope_analysis_request`)
    %{
      optional("DryRun") => boolean(),
      optional("TagSpecifications") => list(tag_specification()()),
      required("ClientToken") => String.t(),
      required("NetworkInsightsAccessScopeId") => String.t()
    }
  """

  @spec start_network_insights_access_scope_analysis(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, start_network_insights_access_scope_analysis_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def start_network_insights_access_scope_analysis(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "StartNetworkInsightsAccessScopeAnalysis", input, options)
  end

  @doc """
  Starts analyzing the specified path. If the path is reachable, the operation
  returns the shortest feasible path.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20StartNetworkInsightsAnalysis&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:start_network_insights_analysis_request`)
    %{
      optional("AdditionalAccounts") => list(String.t()()),
      optional("DryRun") => boolean(),
      optional("FilterInArns") => list(String.t()()),
      optional("TagSpecifications") => list(tag_specification()()),
      required("ClientToken") => String.t(),
      required("NetworkInsightsPathId") => String.t()
    }
  """

  @spec start_network_insights_analysis(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, start_network_insights_analysis_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def start_network_insights_analysis(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "StartNetworkInsightsAnalysis", input, options)
  end

  @doc """
  Initiates the verification process to prove that the service provider owns the
  private DNS name domain for the endpoint service. The service provider must
  successfully perform the verification before the consumer can use the name to
  access the service.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20StartVpcEndpointServicePrivateDnsVerification&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:start_vpc_endpoint_service_private_dns_verification_request`)
    %{
      optional("DryRun") => boolean(),
      required("ServiceId") => String.t()
    }
  """

  @spec start_vpc_endpoint_service_private_dns_verification(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, start_vpc_endpoint_service_private_dns_verification_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def start_vpc_endpoint_service_private_dns_verification(
        %Client{} = client,
        input,
        options \\ []
      )
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "StartVpcEndpointServicePrivateDnsVerification",
      input,
      options
    )
  end

  @doc """
  Stops an Amazon EBS-backed instance. For more information, see [Stop and start
  Amazon EC2
  instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html)
  in the *Amazon EC2 User Guide*. You can use the Stop action to hibernate an
  instance if the instance is [enabled for
  hibernation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enabling-hibernation.html)
  and it meets the [hibernation
  prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html).
  For more information, see [Hibernate your Amazon EC2
  instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)
  in the *Amazon EC2 User Guide*. We don't charge usage for a stopped instance,
  or data transfer fees; however, your root partition Amazon EBS volume remains
  and continues to persist your data, and you are charged for Amazon EBS volume
  usage. Every time you start your instance, Amazon EC2 charges a one-minute
  minimum for instance usage, and thereafter charges per second for instance
  usage. You can't stop or hibernate instance store-backed instances. You can't
  use the Stop action to hibernate Spot Instances, but you can specify that
  Amazon EC2 should hibernate Spot Instances when they are interrupted. For more
  information, see [Hibernating interrupted Spot
  Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20StopInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:stop_instances_request`)
    %{
      optional("DryRun") => boolean(),
      optional("Force") => boolean(),
      optional("Hibernate") => boolean(),
      required("InstanceIds") => list(String.t()())
    }
  """

  @spec stop_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, stop_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def stop_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "StopInstances", input, options)
  end

  @doc """
  Terminates active Client VPN endpoint connections. This action can be used to
  terminate a specific client connection, or up to five connections established
  by a specific user.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20TerminateClientVpnConnections&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:terminate_client_vpn_connections_request`)
    %{
      optional("ConnectionId") => String.t(),
      optional("DryRun") => boolean(),
      optional("Username") => String.t(),
      required("ClientVpnEndpointId") => String.t()
    }
  """

  @spec terminate_client_vpn_connections(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, terminate_client_vpn_connections_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def terminate_client_vpn_connections(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "TerminateClientVpnConnections", input, options)
  end

  @doc """
  Shuts down the specified instances. This operation is idempotent; if you
  terminate an instance more than once, each call succeeds. If you specify
  multiple instances and the request fails (for example, because of a single
  incorrect instance ID), none of the instances are terminated.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20TerminateInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:terminate_instances_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceIds") => list(String.t()())
    }
  """

  @spec terminate_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, terminate_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def terminate_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "TerminateInstances", input, options)
  end

  @doc """
  Unassigns one or more IPv6 addresses IPv4 Prefix Delegation prefixes from a
  network interface.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20UnassignIpv6Addresses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:unassign_ipv6_addresses_request`)
    %{
      optional("Ipv6Addresses") => list(String.t()()),
      optional("Ipv6Prefixes") => list(String.t()()),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec unassign_ipv6_addresses(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, unassign_ipv6_addresses_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def unassign_ipv6_addresses(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "UnassignIpv6Addresses", input, options)
  end

  @doc """
  Unassigns one or more secondary private IP addresses, or IPv4 Prefix Delegation
  prefixes from a network interface.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20UnassignPrivateIpAddresses&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:unassign_private_ip_addresses_request`)
    %{
      optional("Ipv4Prefixes") => list(String.t()()),
      optional("PrivateIpAddresses") => list(String.t()()),
      required("NetworkInterfaceId") => String.t()
    }
  """

  @spec unassign_private_ip_addresses(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, nil, any()}
          | {:error, {:unexpected_response, any()}}

  def unassign_private_ip_addresses(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "UnassignPrivateIpAddresses", input, options)
  end

  @doc """
  Unassigns secondary private IPv4 addresses from a private NAT gateway. You
  cannot unassign your primary private IP. For more information, see [Edit
  secondary IP address
  associations](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-edit-secondary)
  in the *Amazon VPC User Guide*. While unassigning is in progress, you cannot
  assign/unassign additional IP addresses while the connections are being
  drained. You are, however, allowed to delete the NAT gateway.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20UnassignPrivateNatGatewayAddress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:unassign_private_nat_gateway_address_request`)
    %{
      optional("DryRun") => boolean(),
      optional("MaxDrainDurationSeconds") => integer(),
      required("NatGatewayId") => String.t(),
      required("PrivateIpAddresses") => list(String.t()())
    }
  """

  @spec unassign_private_nat_gateway_address(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, unassign_private_nat_gateway_address_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def unassign_private_nat_gateway_address(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "UnassignPrivateNatGatewayAddress", input, options)
  end

  @doc """
  Unlocks a snapshot that is locked in governance mode or that is locked in
  compliance mode but still in the cooling-off period. You can't unlock a
  snapshot that is locked in compliance mode after the cooling-off period has
  expired.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20UnlockSnapshot&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:unlock_snapshot_request`)
    %{
      optional("DryRun") => boolean(),
      required("SnapshotId") => String.t()
    }
  """

  @spec unlock_snapshot(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, unlock_snapshot_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def unlock_snapshot(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "UnlockSnapshot", input, options)
  end

  @doc """
  Disables detailed monitoring for a running instance. For more information, see
  [Monitoring your instances and
  volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html)
  in the *Amazon EC2 User Guide*.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20UnmonitorInstances&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:unmonitor_instances_request`)
    %{
      optional("DryRun") => boolean(),
      required("InstanceIds") => list(String.t()())
    }
  """

  @spec unmonitor_instances(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, unmonitor_instances_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def unmonitor_instances(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "UnmonitorInstances", input, options)
  end

  @doc """
  Updates the description of an egress (outbound) security group rule. You can
  replace an existing description, or add a description to a rule that did not
  have one previously. You can remove a description for a security group rule by
  omitting the description parameter in the request.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20UpdateSecurityGroupRuleDescriptionsEgress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:update_security_group_rule_descriptions_egress_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GroupId") => String.t(),
      optional("GroupName") => String.t(),
      optional("IpPermissions") => list(ip_permission()()),
      optional("SecurityGroupRuleDescriptions") => list(security_group_rule_description()())
    }
  """

  @spec update_security_group_rule_descriptions_egress(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, update_security_group_rule_descriptions_egress_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def update_security_group_rule_descriptions_egress(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "UpdateSecurityGroupRuleDescriptionsEgress",
      input,
      options
    )
  end

  @doc """
  Updates the description of an ingress (inbound) security group rule. You can
  replace an existing description, or add a description to a rule that did not
  have one previously. You can remove a description for a security group rule by
  omitting the description parameter in the request.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20UpdateSecurityGroupRuleDescriptionsIngress&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:update_security_group_rule_descriptions_ingress_request`)
    %{
      optional("DryRun") => boolean(),
      optional("GroupId") => String.t(),
      optional("GroupName") => String.t(),
      optional("IpPermissions") => list(ip_permission()()),
      optional("SecurityGroupRuleDescriptions") => list(security_group_rule_description()())
    }
  """

  @spec update_security_group_rule_descriptions_ingress(
          AWS.Client.t(),
          input :: map(),
          Keyword.t()
        ) ::
          {:ok, update_security_group_rule_descriptions_ingress_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def update_security_group_rule_descriptions_ingress(%Client{} = client, input, options \\ [])
      when is_map(input) do
    meta =
      metadata()

    Request.request_post(
      client,
      meta,
      "UpdateSecurityGroupRuleDescriptionsIngress",
      input,
      options
    )
  end

  @doc """
  Stops advertising an address range that is provisioned as an address pool. You
  can perform this operation at most once every 10 seconds, even if you specify
  different address ranges each time.

  [API Reference](https://docs.aws.amazon.com/search/doc-search.html?searchPath=documentation&searchQuery=ec2%20WithdrawByoipCidr&this_doc_guide=API%2520Reference)

  ## Parameters:
  * `:input` (`t:withdraw_byoip_cidr_request`)
    %{
      optional("DryRun") => boolean(),
      required("Cidr") => String.t()
    }
  """

  @spec withdraw_byoip_cidr(AWS.Client.t(), input :: map(), Keyword.t()) ::
          {:ok, withdraw_byoip_cidr_result(), any()}
          | {:error, {:unexpected_response, any()}}

  def withdraw_byoip_cidr(%Client{} = client, input, options \\ []) when is_map(input) do
    meta =
      metadata()

    Request.request_post(client, meta, "WithdrawByoipCidr", input, options)
  end
end
